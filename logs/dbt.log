2021-08-13 02:13:14.410790 (MainThread): Running with dbt=0.19.2
2021-08-13 02:13:14.437824 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.rpc.server.RPCServerTask'>, debug=False, defer=None, exclude=None, host='0.0.0.0', log_cache_events=False, log_format='default', models=None, partial_parse=True, port=8580, profile='user', profiles_dir='/usr/src/develop/.dbt', project_dir=None, record_timing_info=None, rpc_method=None, single_threaded=False, state=None, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, use_colors=None, vars='{}', version_check=True, warn_error=False, which='rpc', write_json=True)
2021-08-13 02:13:14.450974 (Thread-89): Parsing macros/adapters.sql
2021-08-13 02:13:14.470889 (MainThread): Tracking: tracking
2021-08-13 02:13:14.471076 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d548040>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e37c820>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e37cb80>]}
2021-08-13 02:13:14.471202 (Thread-89): Parsing macros/etc.sql
2021-08-13 02:13:14.471463 (MainThread): Serving RPC server at 0.0.0.0:8580, pid=15
2021-08-13 02:13:14.473671 (MainThread): Supported methods: ['cli_args', 'compile', 'compile_sql', 'deps', 'docs.generate', 'gc', 'get-manifest', 'kill', 'poll', 'ps', 'run', 'run-operation', 'run_sql', 'seed', 'snapshot', 'snapshot-freshness', 'status', 'test']
2021-08-13 02:13:14.473815 (MainThread): Send requests to http://localhost:8580/jsonrpc
2021-08-13 02:13:14.474121 (Thread-89): Parsing macros/catalog.sql
2021-08-13 02:13:14.480178 (Thread-89): Parsing macros/materializations/copy.sql
2021-08-13 02:13:14.484386 (Thread-89): Parsing macros/materializations/table.sql
2021-08-13 02:13:14.493934 (Thread-89): Parsing macros/materializations/incremental.sql
2021-08-13 02:13:14.507292 (Thread-89): Parsing macros/materializations/seed.sql
2021-08-13 02:13:14.509901 (Thread-89): Parsing macros/materializations/snapshot.sql
2021-08-13 02:13:14.511667 (Thread-89): Parsing macros/materializations/view.sql
2021-08-13 02:13:14.515025 (Thread-89): Parsing macros/core.sql
2021-08-13 02:13:14.518748 (Thread-89): Parsing macros/materializations/helpers.sql
2021-08-13 02:13:14.528580 (Thread-89): Parsing macros/materializations/common/merge.sql
2021-08-13 02:13:14.542248 (Thread-89): Parsing macros/materializations/snapshot/snapshot_merge.sql
2021-08-13 02:13:14.544045 (Thread-89): Parsing macros/materializations/snapshot/strategies.sql
2021-08-13 02:13:14.561285 (Thread-89): Parsing macros/materializations/snapshot/snapshot.sql
2021-08-13 02:13:14.592672 (Thread-89): Parsing macros/materializations/view/create_or_replace_view.sql
2021-08-13 02:13:14.599609 (Thread-89): Parsing macros/materializations/view/view.sql
2021-08-13 02:13:14.605692 (Thread-89): Parsing macros/materializations/seed/seed.sql
2021-08-13 02:13:14.625847 (Thread-89): Parsing macros/materializations/table/table.sql
2021-08-13 02:13:14.632389 (Thread-89): Parsing macros/materializations/incremental/helpers.sql
2021-08-13 02:13:14.634187 (Thread-89): Parsing macros/materializations/incremental/incremental.sql
2021-08-13 02:13:14.640060 (Thread-89): Parsing macros/etc/is_incremental.sql
2021-08-13 02:13:14.642272 (Thread-90): handling status request
2021-08-13 02:13:14.642466 (Thread-89): Parsing macros/etc/query.sql
2021-08-13 02:13:14.642768 (Thread-90): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d4e9940>]}
2021-08-13 02:13:14.644221 (Thread-90): sending response (<Response 185 bytes [200 OK]>) to 10.0.7.69
2021-08-13 02:13:14.644640 (Thread-89): Parsing macros/etc/datetime.sql
2021-08-13 02:13:14.653560 (Thread-89): Parsing macros/etc/get_custom_alias.sql
2021-08-13 02:13:14.654558 (Thread-89): Parsing macros/etc/get_custom_database.sql
2021-08-13 02:13:14.656232 (Thread-89): Parsing macros/etc/get_custom_schema.sql
2021-08-13 02:13:14.658137 (Thread-89): Parsing macros/schema_tests/not_null.sql
2021-08-13 02:13:14.659704 (Thread-89): Parsing macros/schema_tests/accepted_values.sql
2021-08-13 02:13:14.662401 (Thread-89): Parsing macros/schema_tests/relationships.sql
2021-08-13 02:13:14.664298 (Thread-89): Parsing macros/schema_tests/unique.sql
2021-08-13 02:13:14.666029 (Thread-89): Parsing macros/adapters/common.sql
2021-08-13 02:13:14.702456 (Thread-91): handling status request
2021-08-13 02:13:14.715953 (Thread-91): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e15a3a0>]}
2021-08-13 02:13:14.716533 (Thread-91): sending response (<Response 185 bytes [200 OK]>) to 10.0.45.128
2021-08-13 02:13:14.862763 (Thread-92): handling status request
2021-08-13 02:13:14.878351 (Thread-92): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5f7221c0>]}
2021-08-13 02:13:14.884010 (Thread-92): sending response (<Response 185 bytes [200 OK]>) to 10.0.10.107
2021-08-13 02:13:14.898169 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheader".
2021-08-13 02:13:14.904113 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheadersalesreason".
2021-08-13 02:13:14.909856 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_store".
2021-08-13 02:13:14.915400 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_product".
2021-08-13 02:13:14.920793 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderdetail".
2021-08-13 02:13:14.926252 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_person".
2021-08-13 02:13:14.931571 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesperson".
2021-08-13 02:13:14.936824 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_customer".
2021-08-13 02:13:14.943050 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_employee".
2021-08-13 02:13:14.948611 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesreason".
2021-08-13 02:13:14.953705 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesterritory".
2021-08-13 02:13:14.959080 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.stg_personcreditcard".
2021-08-13 02:13:14.964410 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.dim_product".
2021-08-13 02:13:14.969691 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.dim_store".
2021-08-13 02:13:14.975051 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.fact_salesorderdetail".
2021-08-13 02:13:14.982866 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesperson".
2021-08-13 02:13:14.988152 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.dim_person".
2021-08-13 02:13:14.993533 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.dim_customer".
2021-08-13 02:13:14.998597 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.dim_personcreditcard".
2021-08-13 02:13:15.003921 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesterritory".
2021-08-13 02:13:15.009572 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesreason".
2021-08-13 02:13:15.014771 (Thread-89): Acquiring new bigquery connection "model.adventureworks_etl.dim_employee".
2021-08-13 02:13:15.022536 (Thread-89): Acquiring new bigquery connection "test.adventureworks_etl.test_product_quantity".
2021-08-13 02:13:15.027827 (Thread-89): Acquiring new bigquery connection "test.adventureworks_etl.test_order_quantity".
2021-08-13 02:13:15.272569 (Thread-89): Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e1b26a0>]}
2021-08-13 02:13:16.051412 (Thread-93): handling status request
2021-08-13 02:13:16.051701 (Thread-93): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e30f9d0>]}
2021-08-13 02:13:16.052652 (Thread-93): sending response (<Response 16764 bytes [200 OK]>) to 10.0.32.18
2021-08-13 02:13:16.058956 (Thread-94): handling status request
2021-08-13 02:13:16.059151 (Thread-94): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e30fa90>]}
2021-08-13 02:13:16.059959 (Thread-94): sending response (<Response 16764 bytes [200 OK]>) to 10.0.10.107
2021-08-13 02:13:16.232158 (Thread-95): handling status request
2021-08-13 02:13:16.232435 (Thread-95): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d806d60>]}
2021-08-13 02:13:16.233352 (Thread-95): sending response (<Response 16764 bytes [200 OK]>) to 10.0.23.232
2021-08-13 02:17:23.565410 (Thread-96): handling status request
2021-08-13 02:17:23.566822 (Thread-96): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d806df0>]}
2021-08-13 02:17:23.567781 (Thread-96): sending response (<Response 16764 bytes [200 OK]>) to 10.0.29.164
2021-08-13 02:17:25.412574 (MainThread): Connection 'test.adventureworks_etl.test_order_quantity' was properly closed.
2021-08-13 02:17:25.428403 (Thread-97): Parsing macros/adapters.sql
2021-08-13 02:17:25.449332 (Thread-97): Parsing macros/etc.sql
2021-08-13 02:17:25.451373 (Thread-97): Parsing macros/catalog.sql
2021-08-13 02:17:25.457184 (Thread-97): Parsing macros/materializations/copy.sql
2021-08-13 02:17:25.461424 (Thread-97): Parsing macros/materializations/table.sql
2021-08-13 02:17:25.470925 (Thread-97): Parsing macros/materializations/incremental.sql
2021-08-13 02:17:25.482588 (Thread-97): Parsing macros/materializations/seed.sql
2021-08-13 02:17:25.485221 (Thread-97): Parsing macros/materializations/snapshot.sql
2021-08-13 02:17:25.487024 (Thread-97): Parsing macros/materializations/view.sql
2021-08-13 02:17:25.490394 (Thread-97): Parsing macros/core.sql
2021-08-13 02:17:25.494104 (Thread-97): Parsing macros/materializations/helpers.sql
2021-08-13 02:17:25.502804 (Thread-97): Parsing macros/materializations/common/merge.sql
2021-08-13 02:17:25.516293 (Thread-97): Parsing macros/materializations/snapshot/snapshot_merge.sql
2021-08-13 02:17:25.517995 (Thread-97): Parsing macros/materializations/snapshot/strategies.sql
2021-08-13 02:17:25.535416 (Thread-97): Parsing macros/materializations/snapshot/snapshot.sql
2021-08-13 02:17:25.565457 (Thread-97): Parsing macros/materializations/view/create_or_replace_view.sql
2021-08-13 02:17:25.570979 (Thread-97): Parsing macros/materializations/view/view.sql
2021-08-13 02:17:25.576956 (Thread-97): Parsing macros/materializations/seed/seed.sql
2021-08-13 02:17:25.596948 (Thread-97): Parsing macros/materializations/table/table.sql
2021-08-13 02:17:25.603458 (Thread-97): Parsing macros/materializations/incremental/helpers.sql
2021-08-13 02:17:25.605274 (Thread-97): Parsing macros/materializations/incremental/incremental.sql
2021-08-13 02:17:25.611242 (Thread-97): Parsing macros/etc/is_incremental.sql
2021-08-13 02:17:25.612841 (Thread-97): Parsing macros/etc/query.sql
2021-08-13 02:17:25.613923 (Thread-97): Parsing macros/etc/datetime.sql
2021-08-13 02:17:25.622649 (Thread-97): Parsing macros/etc/get_custom_alias.sql
2021-08-13 02:17:25.623615 (Thread-97): Parsing macros/etc/get_custom_database.sql
2021-08-13 02:17:25.625254 (Thread-97): Parsing macros/etc/get_custom_schema.sql
2021-08-13 02:17:25.627223 (Thread-97): Parsing macros/schema_tests/not_null.sql
2021-08-13 02:17:25.628751 (Thread-97): Parsing macros/schema_tests/accepted_values.sql
2021-08-13 02:17:25.631417 (Thread-97): Parsing macros/schema_tests/relationships.sql
2021-08-13 02:17:25.633328 (Thread-97): Parsing macros/schema_tests/unique.sql
2021-08-13 02:17:25.635070 (Thread-97): Parsing macros/adapters/common.sql
2021-08-13 02:17:25.859050 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheader".
2021-08-13 02:17:25.865176 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheadersalesreason".
2021-08-13 02:17:25.870710 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_store".
2021-08-13 02:17:25.876196 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_product".
2021-08-13 02:17:25.881869 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderdetail".
2021-08-13 02:17:25.888873 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_person".
2021-08-13 02:17:25.894652 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesperson".
2021-08-13 02:17:25.900249 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_customer".
2021-08-13 02:17:25.905807 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_employee".
2021-08-13 02:17:25.911177 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesreason".
2021-08-13 02:17:25.916716 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesterritory".
2021-08-13 02:17:25.922203 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.stg_personcreditcard".
2021-08-13 02:17:25.927803 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.dim_product".
2021-08-13 02:17:25.933376 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.dim_store".
2021-08-13 02:17:25.939275 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.fact_salesorderdetail".
2021-08-13 02:17:25.947551 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesperson".
2021-08-13 02:17:25.953265 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.dim_person".
2021-08-13 02:17:25.959005 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.dim_customer".
2021-08-13 02:17:25.964322 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.dim_personcreditcard".
2021-08-13 02:17:25.970529 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesterritory".
2021-08-13 02:17:25.975941 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesreason".
2021-08-13 02:17:25.981424 (Thread-97): Acquiring new bigquery connection "model.adventureworks_etl.dim_employee".
2021-08-13 02:17:25.989219 (Thread-97): Acquiring new bigquery connection "test.adventureworks_etl.test_product_quantity".
2021-08-13 02:17:25.994788 (Thread-97): Acquiring new bigquery connection "test.adventureworks_etl.test_order_quantity".
2021-08-13 02:17:26.085304 (Thread-98): handling status request
2021-08-13 02:17:26.085587 (Thread-98): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e482a90>]}
2021-08-13 02:17:26.086019 (Thread-98): sending response (<Response 185 bytes [200 OK]>) to 10.0.29.164
2021-08-13 02:17:26.295285 (Thread-99): handling status request
2021-08-13 02:17:26.295732 (Thread-99): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e422880>]}
2021-08-13 02:17:26.296349 (Thread-99): sending response (<Response 185 bytes [200 OK]>) to 10.0.10.107
2021-08-13 02:17:26.325566 (Thread-100): handling status request
2021-08-13 02:17:26.325879 (Thread-100): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d75cca0>]}
2021-08-13 02:17:26.326351 (Thread-100): sending response (<Response 185 bytes [200 OK]>) to 10.0.29.164
2021-08-13 02:17:26.370666 (Thread-97): Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e2adc70>]}
2021-08-13 02:17:27.486357 (Thread-101): handling status request
2021-08-13 02:17:27.486644 (Thread-101): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e45c730>]}
2021-08-13 02:17:27.487664 (Thread-101): sending response (<Response 16806 bytes [200 OK]>) to 10.0.25.88
2021-08-13 02:17:27.659209 (Thread-102): handling status request
2021-08-13 02:17:27.659476 (Thread-102): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e45c460>]}
2021-08-13 02:17:27.660426 (Thread-102): sending response (<Response 16806 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:17:27.672035 (Thread-103): handling status request
2021-08-13 02:17:27.672251 (Thread-103): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e45ceb0>]}
2021-08-13 02:17:27.673015 (Thread-103): sending response (<Response 16806 bytes [200 OK]>) to 10.0.39.231
2021-08-13 02:19:40.239087 (MainThread): Connection 'test.adventureworks_etl.test_order_quantity' was properly closed.
2021-08-13 02:19:40.276920 (Thread-104): Got an acceptable cached parse result
2021-08-13 02:19:40.484707 (Thread-104): Acquiring new bigquery connection "model.adventureworks_etl.fact_salesorderdetail".
2021-08-13 02:19:40.648672 (Thread-104): Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d842820>]}
2021-08-13 02:19:41.046614 (Thread-105): handling status request
2021-08-13 02:19:41.046927 (Thread-105): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3ac6a0>]}
2021-08-13 02:19:41.047454 (Thread-105): sending response (<Response 1204 bytes [200 OK]>) to 10.0.6.1
2021-08-13 02:19:41.049116 (Thread-106): handling status request
2021-08-13 02:19:41.049342 (Thread-106): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e2b1f70>]}
2021-08-13 02:19:41.049729 (Thread-106): sending response (<Response 1204 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:19:41.169960 (Thread-107): handling status request
2021-08-13 02:19:41.170244 (Thread-107): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3acb50>]}
2021-08-13 02:19:41.170725 (Thread-107): sending response (<Response 1204 bytes [200 OK]>) to 10.0.39.231
2021-08-13 02:19:43.358741 (Thread-108): handling status request
2021-08-13 02:19:43.359049 (Thread-108): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5f787fd0>]}
2021-08-13 02:19:43.359549 (Thread-108): sending response (<Response 1204 bytes [200 OK]>) to 10.0.44.53
2021-08-13 02:19:43.681161 (Thread-109): handling run_sql request
2021-08-13 02:19:43.681434 (Thread-109): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5f7879a0>]}
2021-08-13 02:19:43.683614 (Thread-109): Connection 'model.adventureworks_etl.fact_salesorderdetail' was properly closed.
2021-08-13 02:19:45.450612 (Thread-109): sending response (<Response 138 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:19:45.465939 (MainThread): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:19:45.484797 (MainThread): Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'b4493227-9971-4e5f-a5b9-21c0571c57bf', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f9dba7e7a00>]}
2021-08-13 02:19:45.485040 (MainThread): Found 22 models, 22 tests, 0 snapshots, 0 analyses, 156 macros, 0 operations, 0 seed files, 16 sources, 0 exposures
2021-08-13 02:19:45.485413 (Thread-1): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:19:45.485528 (Thread-1): Compiling rpc.adventureworks_etl.request
2021-08-13 02:19:45.490005 (Thread-1): finished collecting timing info
2021-08-13 02:19:45.490127 (Thread-1): Opening a new connection, currently in state init
2021-08-13 02:19:45.494569 (Thread-1): On rpc.adventureworks_etl.request: with 
    customer as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
    ),
    employee as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
    ),    
    person as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
    ),
    personcreditcard as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
    ),
    product as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
    ),
    salesperson as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
    ),        
    salesreason as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
    ),
    salesterritory as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
    ),
    store as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
    ),
    orderheader_with_sk as(
        select
            orderheader.salesorderid
            , customer_sk as customer_fk
            , salesperson_sk as salesperson_fk
            , territory_sk as territory_fk
            , creditcard_sk as creditcard_fk
            , orderheader.billtoaddressid
            , orderheader.shiptoaddressid
            , orderheader.shipmethodid
            , orderheader.currencyrateid
            , orderheader.revisionnumber
            , orderheader.orderdate
            , orderheader.duedate
            , orderheader.shipdate
            , orderheader.status
            , orderheader.onlineorderflag
            , orderheader.purchaseordernumber
            , orderheader.accountnumber
            , orderheader.creditcardapprovalcode
            , orderheader.subtotal
            , orderheader.taxamt
            , orderheader.freight
            , orderheader.totaldue
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
        left join customer on orderheader.customerid = customer.customer_id
        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
    )
    , orderdetail_with_sk as(
        select
            orderdetail.salesorderid
            , orderdetail.salesorderdetailid
            , orderdetail.carriertrackingnumber
            , orderdetail.orderqty
            , product.product_sk as product_fk
            , orderdetail.specialofferid
            , orderdetail.unitprice
            , orderdetail.unitpricediscount      
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
        left join product on orderdetail.productid = product.product_id
    )
    , final as (
        select
            orderdetail_with_sk.salesorderdetailid
            , orderdetail_with_sk.salesorderid
            , orderheader_with_sk.customer_fk
            , orderdetail_with_sk.product_fk
            , orderheader_with_sk.salesperson_fk
            , orderheader_with_sk.territory_fk
            , orderheader_with_sk.creditcard_fk
            , orderheader_with_sk.billtoaddressid
            , orderheader_with_sk.shiptoaddressid
            , orderheader_with_sk.shipmethodid
            , orderheader_with_sk.currencyrateid
            , orderheader_with_sk.revisionnumber
            , orderheader_with_sk.orderdate
            , day(orderheader_with_sk.orderdate) as 'dia',
            , month(orderheader_with_sk.orderdate) as 'mes',
            , year(orderheader_with_sk.orderdate) as 'ano,'
            , orderheader_with_sk.duedate
            , orderheader_with_sk.shipdate
            , orderheader_with_sk.status
            , orderheader_with_sk.onlineorderflag
            , orderheader_with_sk.purchaseordernumber
            , orderheader_with_sk.accountnumber
            , orderheader_with_sk.creditcardapprovalcode
            , orderheader_with_sk.subtotal
            , orderheader_with_sk.taxamt
            , orderheader_with_sk.freight
            , orderheader_with_sk.totaldue
            , orderdetail_with_sk.carriertrackingnumber
            , orderdetail_with_sk.orderqty
            , orderdetail_with_sk.specialofferid
            , orderdetail_with_sk.unitprice
            , orderdetail_with_sk.unitpricediscount 
            from orderheader_with_sk
            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
    )
    select * from final
limit 500
/* limit added automatically by dbt cloud */
2021-08-13 02:19:45.806820 (Thread-110): handling poll request
2021-08-13 02:19:45.807205 (Thread-110): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e46f280>]}
2021-08-13 02:19:45.808182 (Thread-110): sending response (<Response 7931 bytes [200 OK]>) to 10.0.7.69
2021-08-13 02:19:45.984989 (Thread-1): Retry attempt 1 of 1 after error: BadRequest("GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/d2876961-a399-4d5b-b8f8-980011a12dc2?maxResults=0&location=US&prettyPrint=false: Syntax error: Unexpected string literal 'dia' at [96:53]")
2021-08-13 02:19:47.179703 (Thread-111): handling poll request
2021-08-13 02:19:47.179993 (Thread-111): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d842c70>]}
2021-08-13 02:19:47.180546 (Thread-111): sending response (<Response 905 bytes [200 OK]>) to 10.0.25.88
2021-08-13 02:19:47.366093 (Thread-1): finished collecting timing info
2021-08-13 02:19:47.366288 (Thread-1): Got an exception: Database Error
  Syntax error: Unexpected string literal 'dia' at [96:53]
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 151, in exception_handler
    yield
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 329, in fn
    return self._query_and_results(client, sql, conn, job_params)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 522, in _query_and_results
    iterator = query_job.result(timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1146, in result
    super(QueryJob, self).result(retry=retry, timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/base.py", line 631, in result
    return super(_AsyncJob, self).result(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 129, in result
    self._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1042, in _blocking_poll
    super(QueryJob, self)._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 107, in _blocking_poll
    retry_(self._done_or_raise)(**kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 85, in _done_or_raise
    if not self.done(**kwargs):
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1022, in done
    self._query_results = self._client._get_query_results(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 1557, in _get_query_results
    resource = self._call_api(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 636, in _call_api
    return call()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/_http.py", line 438, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.BadRequest: 400 GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/fb2bb867-e38d-474a-bf27-0905cc1f3b6f?maxResults=0&location=US&prettyPrint=false: Syntax error: Unexpected string literal 'dia' at [96:53]

(job ID: fb2bb867-e38d-474a-bf27-0905cc1f3b6f)

                                           -----Query Job SQL Follows-----                                           

    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
   1:with 
   2:    customer as (
   3:        select *
   4:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
   5:    ),
   6:    employee as (
   7:        select *
   8:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
   9:    ),    
  10:    person as (
  11:        select *
  12:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
  13:    ),
  14:    personcreditcard as (
  15:        select *
  16:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
  17:    ),
  18:    product as (
  19:        select *
  20:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
  21:    ),
  22:    salesperson as (
  23:        select *
  24:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
  25:    ),        
  26:    salesreason as (
  27:        select *
  28:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
  29:    ),
  30:    salesterritory as (
  31:        select *
  32:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
  33:    ),
  34:    store as (
  35:        select *
  36:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
  37:    ),
  38:    orderheader_with_sk as(
  39:        select
  40:            orderheader.salesorderid
  41:            , customer_sk as customer_fk
  42:            , salesperson_sk as salesperson_fk
  43:            , territory_sk as territory_fk
  44:            , creditcard_sk as creditcard_fk
  45:            , orderheader.billtoaddressid
  46:            , orderheader.shiptoaddressid
  47:            , orderheader.shipmethodid
  48:            , orderheader.currencyrateid
  49:            , orderheader.revisionnumber
  50:            , orderheader.orderdate
  51:            , orderheader.duedate
  52:            , orderheader.shipdate
  53:            , orderheader.status
  54:            , orderheader.onlineorderflag
  55:            , orderheader.purchaseordernumber
  56:            , orderheader.accountnumber
  57:            , orderheader.creditcardapprovalcode
  58:            , orderheader.subtotal
  59:            , orderheader.taxamt
  60:            , orderheader.freight
  61:            , orderheader.totaldue
  62:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
  63:        left join customer on orderheader.customerid = customer.customer_id
  64:        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
  65:        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
  66:        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
  67:    )
  68:    , orderdetail_with_sk as(
  69:        select
  70:            orderdetail.salesorderid
  71:            , orderdetail.salesorderdetailid
  72:            , orderdetail.carriertrackingnumber
  73:            , orderdetail.orderqty
  74:            , product.product_sk as product_fk
  75:            , orderdetail.specialofferid
  76:            , orderdetail.unitprice
  77:            , orderdetail.unitpricediscount      
  78:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
  79:        left join product on orderdetail.productid = product.product_id
  80:    )
  81:    , final as (
  82:        select
  83:            orderdetail_with_sk.salesorderdetailid
  84:            , orderdetail_with_sk.salesorderid
  85:            , orderheader_with_sk.customer_fk
  86:            , orderdetail_with_sk.product_fk
  87:            , orderheader_with_sk.salesperson_fk
  88:            , orderheader_with_sk.territory_fk
  89:            , orderheader_with_sk.creditcard_fk
  90:            , orderheader_with_sk.billtoaddressid
  91:            , orderheader_with_sk.shiptoaddressid
  92:            , orderheader_with_sk.shipmethodid
  93:            , orderheader_with_sk.currencyrateid
  94:            , orderheader_with_sk.revisionnumber
  95:            , orderheader_with_sk.orderdate
  96:            , day(orderheader_with_sk.orderdate) as 'dia',
  97:            , month(orderheader_with_sk.orderdate) as 'mes',
  98:            , year(orderheader_with_sk.orderdate) as 'ano,'
  99:            , orderheader_with_sk.duedate
 100:            , orderheader_with_sk.shipdate
 101:            , orderheader_with_sk.status
 102:            , orderheader_with_sk.onlineorderflag
 103:            , orderheader_with_sk.purchaseordernumber
 104:            , orderheader_with_sk.accountnumber
 105:            , orderheader_with_sk.creditcardapprovalcode
 106:            , orderheader_with_sk.subtotal
 107:            , orderheader_with_sk.taxamt
 108:            , orderheader_with_sk.freight
 109:            , orderheader_with_sk.totaldue
 110:            , orderdetail_with_sk.carriertrackingnumber
 111:            , orderdetail_with_sk.orderqty
 112:            , orderdetail_with_sk.specialofferid
 113:            , orderdetail_with_sk.unitprice
 114:            , orderdetail_with_sk.unitpricediscount 
 115:            from orderheader_with_sk
 116:            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
 117:    )
 118:    select * from final
 119:limit 500
 120:/* limit added automatically by dbt cloud */
    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 344, in safe_run
    result = self.compile_and_execute(manifest, ctx)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 287, in compile_and_execute
    result = self.run(ctx.node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 389, in run
    return self.execute(compiled_node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 90, in execute
    _, execute_result = self.adapter.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/base/impl.py", line 227, in execute
    return self.connections.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 340, in execute
    query_job, iterator = self.raw_execute(sql, fetch=fetch)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 331, in raw_execute
    query_job, iterator = self._retry_and_handle(msg=sql, conn=conn, fn=fn)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 155, in exception_handler
    self.handle_error(e, message)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 143, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Syntax error: Unexpected string literal 'dia' at [96:53]
2021-08-13 02:19:47.368728 (Thread-1): Got exception RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': "Database Error in rpc request (from remote system)\n  Syntax error: Unexpected string literal 'dia' at [96:53]", 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , day(orderheader_with_sk.orderdate) as 'dia',\r\n            , month(orderheader_with_sk.orderdate) as 'mes',\r\n            , year(orderheader_with_sk.orderdate) as 'ano,'\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': "with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , day(orderheader_with_sk.orderdate) as 'dia',\n            , month(orderheader_with_sk.orderdate) as 'mes',\n            , year(orderheader_with_sk.orderdate) as 'ano,'\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'tags': None}, None)
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/rpc/sql_commands.py", line 145, in _in_thread
    self.node_results.append(runner.safe_run(self.manifest))
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 360, in safe_run
    result = self.error_result(ctx.node, error, started, [])
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 56, in error_result
    raise error
dbt.rpc.error.RPCException: RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': "Database Error in rpc request (from remote system)\n  Syntax error: Unexpected string literal 'dia' at [96:53]", 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , day(orderheader_with_sk.orderdate) as 'dia',\r\n            , month(orderheader_with_sk.orderdate) as 'mes',\r\n            , year(orderheader_with_sk.orderdate) as 'ano,'\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': "with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , day(orderheader_with_sk.orderdate) as 'dia',\n            , month(orderheader_with_sk.orderdate) as 'mes',\n            , year(orderheader_with_sk.orderdate) as 'ano,'\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'tags': None}, None)
2021-08-13 02:19:48.565182 (Thread-112): handling poll request
2021-08-13 02:19:48.565476 (Thread-112): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d8424f0>]}
2021-08-13 02:19:48.566373 (Thread-112): sending response (<Response 51121 bytes [200 OK]>) to 10.0.42.208
2021-08-13 02:20:24.798600 (Thread-113): Got an acceptable cached parse result
2021-08-13 02:20:25.004659 (Thread-113): Acquiring new bigquery connection "model.adventureworks_etl.fact_salesorderdetail".
2021-08-13 02:20:25.163731 (Thread-113): Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d73ea30>]}
2021-08-13 02:20:25.723113 (Thread-114): handling status request
2021-08-13 02:20:25.723415 (Thread-114): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e313ac0>]}
2021-08-13 02:20:25.723964 (Thread-114): sending response (<Response 1204 bytes [200 OK]>) to 10.0.23.232
2021-08-13 02:20:25.886799 (Thread-115): handling status request
2021-08-13 02:20:25.887117 (Thread-115): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5f776130>]}
2021-08-13 02:20:25.887629 (Thread-115): sending response (<Response 1204 bytes [200 OK]>) to 10.0.3.12
2021-08-13 02:20:25.915957 (Thread-116): handling status request
2021-08-13 02:20:25.916276 (Thread-116): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e48ce20>]}
2021-08-13 02:20:25.916798 (Thread-116): sending response (<Response 1204 bytes [200 OK]>) to 10.0.13.71
2021-08-13 02:20:26.019173 (Thread-117): handling status request
2021-08-13 02:20:26.019459 (Thread-117): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e212190>]}
2021-08-13 02:20:26.043009 (Thread-117): sending response (<Response 1204 bytes [200 OK]>) to 10.0.29.160
2021-08-13 02:20:26.079168 (Thread-118): handling status request
2021-08-13 02:20:26.079442 (Thread-118): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e19e7f0>]}
2021-08-13 02:20:26.079924 (Thread-118): sending response (<Response 1204 bytes [200 OK]>) to 10.0.42.208
2021-08-13 02:20:26.096388 (Thread-119): handling status request
2021-08-13 02:20:26.096622 (Thread-119): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e19e070>]}
2021-08-13 02:20:26.097074 (Thread-119): sending response (<Response 1204 bytes [200 OK]>) to 10.0.7.69
2021-08-13 02:20:27.234841 (Thread-120): handling status request
2021-08-13 02:20:27.235160 (Thread-120): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d556820>]}
2021-08-13 02:20:27.235692 (Thread-120): sending response (<Response 1204 bytes [200 OK]>) to 10.0.4.54
2021-08-13 02:20:27.330287 (Thread-121): handling status request
2021-08-13 02:20:27.330580 (Thread-121): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d5d17f0>]}
2021-08-13 02:20:27.331106 (Thread-121): sending response (<Response 1204 bytes [200 OK]>) to 10.0.44.53
2021-08-13 02:20:27.598064 (Thread-122): handling run_sql request
2021-08-13 02:20:27.598351 (Thread-122): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5f734e80>]}
2021-08-13 02:20:27.599562 (Thread-122): Connection 'model.adventureworks_etl.fact_salesorderdetail' was properly closed.
2021-08-13 02:20:27.710288 (Thread-123): handling run_sql request
2021-08-13 02:20:27.710933 (Thread-123): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d39c160>]}
2021-08-13 02:20:29.384441 (Thread-122): sending response (<Response 138 bytes [200 OK]>) to 10.0.39.231
2021-08-13 02:20:29.433439 (MainThread): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:20:29.447447 (MainThread): Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '7b9f4946-3382-4692-a572-d6a308360c39', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3108464f10>]}
2021-08-13 02:20:29.447741 (MainThread): Found 22 models, 22 tests, 0 snapshots, 0 analyses, 156 macros, 0 operations, 0 seed files, 16 sources, 0 exposures
2021-08-13 02:20:29.448191 (Thread-1): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:20:29.448306 (Thread-1): Compiling rpc.adventureworks_etl.request
2021-08-13 02:20:29.453082 (Thread-1): finished collecting timing info
2021-08-13 02:20:29.453271 (Thread-1): Opening a new connection, currently in state init
2021-08-13 02:20:29.457876 (Thread-1): On rpc.adventureworks_etl.request: with 
    customer as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
    ),
    employee as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
    ),    
    person as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
    ),
    personcreditcard as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
    ),
    product as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
    ),
    salesperson as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
    ),        
    salesreason as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
    ),
    salesterritory as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
    ),
    store as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
    ),
    orderheader_with_sk as(
        select
            orderheader.salesorderid
            , customer_sk as customer_fk
            , salesperson_sk as salesperson_fk
            , territory_sk as territory_fk
            , creditcard_sk as creditcard_fk
            , orderheader.billtoaddressid
            , orderheader.shiptoaddressid
            , orderheader.shipmethodid
            , orderheader.currencyrateid
            , orderheader.revisionnumber
            , orderheader.orderdate
            , orderheader.duedate
            , orderheader.shipdate
            , orderheader.status
            , orderheader.onlineorderflag
            , orderheader.purchaseordernumber
            , orderheader.accountnumber
            , orderheader.creditcardapprovalcode
            , orderheader.subtotal
            , orderheader.taxamt
            , orderheader.freight
            , orderheader.totaldue
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
        left join customer on orderheader.customerid = customer.customer_id
        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
    )
    , orderdetail_with_sk as(
        select
            orderdetail.salesorderid
            , orderdetail.salesorderdetailid
            , orderdetail.carriertrackingnumber
            , orderdetail.orderqty
            , product.product_sk as product_fk
            , orderdetail.specialofferid
            , orderdetail.unitprice
            , orderdetail.unitpricediscount      
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
        left join product on orderdetail.productid = product.product_id
    )
    , final as (
        select
            orderdetail_with_sk.salesorderdetailid
            , orderdetail_with_sk.salesorderid
            , orderheader_with_sk.customer_fk
            , orderdetail_with_sk.product_fk
            , orderheader_with_sk.salesperson_fk
            , orderheader_with_sk.territory_fk
            , orderheader_with_sk.creditcard_fk
            , orderheader_with_sk.billtoaddressid
            , orderheader_with_sk.shiptoaddressid
            , orderheader_with_sk.shipmethodid
            , orderheader_with_sk.currencyrateid
            , orderheader_with_sk.revisionnumber
            , orderheader_with_sk.orderdate
            , day(orderheader_with_sk.orderdate) as 'dia',
            , month(orderheader_with_sk.orderdate) as 'mes',
            , year(orderheader_with_sk.orderdate) as 'ano',
            , orderheader_with_sk.duedate
            , orderheader_with_sk.shipdate
            , orderheader_with_sk.status
            , orderheader_with_sk.onlineorderflag
            , orderheader_with_sk.purchaseordernumber
            , orderheader_with_sk.accountnumber
            , orderheader_with_sk.creditcardapprovalcode
            , orderheader_with_sk.subtotal
            , orderheader_with_sk.taxamt
            , orderheader_with_sk.freight
            , orderheader_with_sk.totaldue
            , orderdetail_with_sk.carriertrackingnumber
            , orderdetail_with_sk.orderqty
            , orderdetail_with_sk.specialofferid
            , orderdetail_with_sk.unitprice
            , orderdetail_with_sk.unitpricediscount 
            from orderheader_with_sk
            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
    )
    select * from final
limit 500
/* limit added automatically by dbt cloud */
2021-08-13 02:20:29.503457 (Thread-123): sending response (<Response 138 bytes [200 OK]>) to 10.0.42.208
2021-08-13 02:20:29.550553 (MainThread): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:20:29.563854 (MainThread): Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'f5d4a157-3821-4ef7-9412-c1cc61ea3d2b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f0cc0f57730>]}
2021-08-13 02:20:29.564123 (MainThread): Found 22 models, 22 tests, 0 snapshots, 0 analyses, 156 macros, 0 operations, 0 seed files, 16 sources, 0 exposures
2021-08-13 02:20:29.564538 (Thread-1): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:20:29.564651 (Thread-1): Compiling rpc.adventureworks_etl.request
2021-08-13 02:20:29.569324 (Thread-1): finished collecting timing info
2021-08-13 02:20:29.569500 (Thread-1): Opening a new connection, currently in state init
2021-08-13 02:20:29.573966 (Thread-1): On rpc.adventureworks_etl.request: with 
    customer as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
    ),
    employee as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
    ),    
    person as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
    ),
    personcreditcard as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
    ),
    product as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
    ),
    salesperson as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
    ),        
    salesreason as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
    ),
    salesterritory as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
    ),
    store as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
    ),
    orderheader_with_sk as(
        select
            orderheader.salesorderid
            , customer_sk as customer_fk
            , salesperson_sk as salesperson_fk
            , territory_sk as territory_fk
            , creditcard_sk as creditcard_fk
            , orderheader.billtoaddressid
            , orderheader.shiptoaddressid
            , orderheader.shipmethodid
            , orderheader.currencyrateid
            , orderheader.revisionnumber
            , orderheader.orderdate
            , orderheader.duedate
            , orderheader.shipdate
            , orderheader.status
            , orderheader.onlineorderflag
            , orderheader.purchaseordernumber
            , orderheader.accountnumber
            , orderheader.creditcardapprovalcode
            , orderheader.subtotal
            , orderheader.taxamt
            , orderheader.freight
            , orderheader.totaldue
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
        left join customer on orderheader.customerid = customer.customer_id
        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
    )
    , orderdetail_with_sk as(
        select
            orderdetail.salesorderid
            , orderdetail.salesorderdetailid
            , orderdetail.carriertrackingnumber
            , orderdetail.orderqty
            , product.product_sk as product_fk
            , orderdetail.specialofferid
            , orderdetail.unitprice
            , orderdetail.unitpricediscount      
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
        left join product on orderdetail.productid = product.product_id
    )
    , final as (
        select
            orderdetail_with_sk.salesorderdetailid
            , orderdetail_with_sk.salesorderid
            , orderheader_with_sk.customer_fk
            , orderdetail_with_sk.product_fk
            , orderheader_with_sk.salesperson_fk
            , orderheader_with_sk.territory_fk
            , orderheader_with_sk.creditcard_fk
            , orderheader_with_sk.billtoaddressid
            , orderheader_with_sk.shiptoaddressid
            , orderheader_with_sk.shipmethodid
            , orderheader_with_sk.currencyrateid
            , orderheader_with_sk.revisionnumber
            , orderheader_with_sk.orderdate
            , day(orderheader_with_sk.orderdate) as 'dia',
            , month(orderheader_with_sk.orderdate) as 'mes',
            , year(orderheader_with_sk.orderdate) as 'ano',
            , orderheader_with_sk.duedate
            , orderheader_with_sk.shipdate
            , orderheader_with_sk.status
            , orderheader_with_sk.onlineorderflag
            , orderheader_with_sk.purchaseordernumber
            , orderheader_with_sk.accountnumber
            , orderheader_with_sk.creditcardapprovalcode
            , orderheader_with_sk.subtotal
            , orderheader_with_sk.taxamt
            , orderheader_with_sk.freight
            , orderheader_with_sk.totaldue
            , orderdetail_with_sk.carriertrackingnumber
            , orderdetail_with_sk.orderqty
            , orderdetail_with_sk.specialofferid
            , orderdetail_with_sk.unitprice
            , orderdetail_with_sk.unitpricediscount 
            from orderheader_with_sk
            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
    )
    select * from final
limit 500
/* limit added automatically by dbt cloud */
2021-08-13 02:20:29.755151 (Thread-124): handling poll request
2021-08-13 02:20:29.755504 (Thread-124): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d5ad700>]}
2021-08-13 02:20:29.756502 (Thread-124): sending response (<Response 7932 bytes [200 OK]>) to 10.0.10.107
2021-08-13 02:20:29.872600 (Thread-125): handling poll request
2021-08-13 02:20:29.872897 (Thread-125): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d5ad130>]}
2021-08-13 02:20:29.873535 (Thread-125): sending response (<Response 7932 bytes [200 OK]>) to 10.0.10.107
2021-08-13 02:20:29.909004 (Thread-1): Retry attempt 1 of 1 after error: BadRequest("GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/a94cd48a-a392-495c-8de0-a76b756c77dd?maxResults=0&location=US&prettyPrint=false: Syntax error: Unexpected string literal 'dia' at [96:53]")
2021-08-13 02:20:29.981168 (Thread-1): Retry attempt 1 of 1 after error: BadRequest("GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/0381dc4e-8520-4ad6-b15e-8b6320bc7927?maxResults=0&location=US&prettyPrint=false: Syntax error: Unexpected string literal 'dia' at [96:53]")
2021-08-13 02:20:31.145501 (Thread-126): handling poll request
2021-08-13 02:20:31.145798 (Thread-126): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d5ad580>]}
2021-08-13 02:20:31.146347 (Thread-126): sending response (<Response 905 bytes [200 OK]>) to 10.0.4.54
2021-08-13 02:20:31.234528 (Thread-127): handling poll request
2021-08-13 02:20:31.234808 (Thread-127): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d5addc0>]}
2021-08-13 02:20:31.235350 (Thread-127): sending response (<Response 904 bytes [200 OK]>) to 10.0.45.128
2021-08-13 02:20:31.240053 (Thread-1): finished collecting timing info
2021-08-13 02:20:31.240253 (Thread-1): Got an exception: Database Error
  Syntax error: Unexpected string literal 'dia' at [96:53]
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 151, in exception_handler
    yield
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 329, in fn
    return self._query_and_results(client, sql, conn, job_params)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 522, in _query_and_results
    iterator = query_job.result(timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1146, in result
    super(QueryJob, self).result(retry=retry, timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/base.py", line 631, in result
    return super(_AsyncJob, self).result(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 129, in result
    self._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1042, in _blocking_poll
    super(QueryJob, self)._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 107, in _blocking_poll
    retry_(self._done_or_raise)(**kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 85, in _done_or_raise
    if not self.done(**kwargs):
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1022, in done
    self._query_results = self._client._get_query_results(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 1557, in _get_query_results
    resource = self._call_api(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 636, in _call_api
    return call()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/_http.py", line 438, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.BadRequest: 400 GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/4ad6b364-808d-480b-a184-48ed3094f114?maxResults=0&location=US&prettyPrint=false: Syntax error: Unexpected string literal 'dia' at [96:53]

(job ID: 4ad6b364-808d-480b-a184-48ed3094f114)

                                           -----Query Job SQL Follows-----                                           

    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
   1:with 
   2:    customer as (
   3:        select *
   4:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
   5:    ),
   6:    employee as (
   7:        select *
   8:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
   9:    ),    
  10:    person as (
  11:        select *
  12:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
  13:    ),
  14:    personcreditcard as (
  15:        select *
  16:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
  17:    ),
  18:    product as (
  19:        select *
  20:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
  21:    ),
  22:    salesperson as (
  23:        select *
  24:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
  25:    ),        
  26:    salesreason as (
  27:        select *
  28:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
  29:    ),
  30:    salesterritory as (
  31:        select *
  32:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
  33:    ),
  34:    store as (
  35:        select *
  36:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
  37:    ),
  38:    orderheader_with_sk as(
  39:        select
  40:            orderheader.salesorderid
  41:            , customer_sk as customer_fk
  42:            , salesperson_sk as salesperson_fk
  43:            , territory_sk as territory_fk
  44:            , creditcard_sk as creditcard_fk
  45:            , orderheader.billtoaddressid
  46:            , orderheader.shiptoaddressid
  47:            , orderheader.shipmethodid
  48:            , orderheader.currencyrateid
  49:            , orderheader.revisionnumber
  50:            , orderheader.orderdate
  51:            , orderheader.duedate
  52:            , orderheader.shipdate
  53:            , orderheader.status
  54:            , orderheader.onlineorderflag
  55:            , orderheader.purchaseordernumber
  56:            , orderheader.accountnumber
  57:            , orderheader.creditcardapprovalcode
  58:            , orderheader.subtotal
  59:            , orderheader.taxamt
  60:            , orderheader.freight
  61:            , orderheader.totaldue
  62:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
  63:        left join customer on orderheader.customerid = customer.customer_id
  64:        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
  65:        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
  66:        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
  67:    )
  68:    , orderdetail_with_sk as(
  69:        select
  70:            orderdetail.salesorderid
  71:            , orderdetail.salesorderdetailid
  72:            , orderdetail.carriertrackingnumber
  73:            , orderdetail.orderqty
  74:            , product.product_sk as product_fk
  75:            , orderdetail.specialofferid
  76:            , orderdetail.unitprice
  77:            , orderdetail.unitpricediscount      
  78:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
  79:        left join product on orderdetail.productid = product.product_id
  80:    )
  81:    , final as (
  82:        select
  83:            orderdetail_with_sk.salesorderdetailid
  84:            , orderdetail_with_sk.salesorderid
  85:            , orderheader_with_sk.customer_fk
  86:            , orderdetail_with_sk.product_fk
  87:            , orderheader_with_sk.salesperson_fk
  88:            , orderheader_with_sk.territory_fk
  89:            , orderheader_with_sk.creditcard_fk
  90:            , orderheader_with_sk.billtoaddressid
  91:            , orderheader_with_sk.shiptoaddressid
  92:            , orderheader_with_sk.shipmethodid
  93:            , orderheader_with_sk.currencyrateid
  94:            , orderheader_with_sk.revisionnumber
  95:            , orderheader_with_sk.orderdate
  96:            , day(orderheader_with_sk.orderdate) as 'dia',
  97:            , month(orderheader_with_sk.orderdate) as 'mes',
  98:            , year(orderheader_with_sk.orderdate) as 'ano',
  99:            , orderheader_with_sk.duedate
 100:            , orderheader_with_sk.shipdate
 101:            , orderheader_with_sk.status
 102:            , orderheader_with_sk.onlineorderflag
 103:            , orderheader_with_sk.purchaseordernumber
 104:            , orderheader_with_sk.accountnumber
 105:            , orderheader_with_sk.creditcardapprovalcode
 106:            , orderheader_with_sk.subtotal
 107:            , orderheader_with_sk.taxamt
 108:            , orderheader_with_sk.freight
 109:            , orderheader_with_sk.totaldue
 110:            , orderdetail_with_sk.carriertrackingnumber
 111:            , orderdetail_with_sk.orderqty
 112:            , orderdetail_with_sk.specialofferid
 113:            , orderdetail_with_sk.unitprice
 114:            , orderdetail_with_sk.unitpricediscount 
 115:            from orderheader_with_sk
 116:            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
 117:    )
 118:    select * from final
 119:limit 500
 120:/* limit added automatically by dbt cloud */
    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 344, in safe_run
    result = self.compile_and_execute(manifest, ctx)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 287, in compile_and_execute
    result = self.run(ctx.node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 389, in run
    return self.execute(compiled_node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 90, in execute
    _, execute_result = self.adapter.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/base/impl.py", line 227, in execute
    return self.connections.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 340, in execute
    query_job, iterator = self.raw_execute(sql, fetch=fetch)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 331, in raw_execute
    query_job, iterator = self._retry_and_handle(msg=sql, conn=conn, fn=fn)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 155, in exception_handler
    self.handle_error(e, message)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 143, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Syntax error: Unexpected string literal 'dia' at [96:53]
2021-08-13 02:20:31.242734 (Thread-1): Got exception RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': "Database Error in rpc request (from remote system)\n  Syntax error: Unexpected string literal 'dia' at [96:53]", 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , day(orderheader_with_sk.orderdate) as 'dia',\r\n            , month(orderheader_with_sk.orderdate) as 'mes',\r\n            , year(orderheader_with_sk.orderdate) as 'ano',\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': "with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , day(orderheader_with_sk.orderdate) as 'dia',\n            , month(orderheader_with_sk.orderdate) as 'mes',\n            , year(orderheader_with_sk.orderdate) as 'ano',\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'tags': None}, None)
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/rpc/sql_commands.py", line 145, in _in_thread
    self.node_results.append(runner.safe_run(self.manifest))
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 360, in safe_run
    result = self.error_result(ctx.node, error, started, [])
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 56, in error_result
    raise error
dbt.rpc.error.RPCException: RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': "Database Error in rpc request (from remote system)\n  Syntax error: Unexpected string literal 'dia' at [96:53]", 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , day(orderheader_with_sk.orderdate) as 'dia',\r\n            , month(orderheader_with_sk.orderdate) as 'mes',\r\n            , year(orderheader_with_sk.orderdate) as 'ano',\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': "with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , day(orderheader_with_sk.orderdate) as 'dia',\n            , month(orderheader_with_sk.orderdate) as 'mes',\n            , year(orderheader_with_sk.orderdate) as 'ano',\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'tags': None}, None)
2021-08-13 02:20:31.355537 (Thread-1): finished collecting timing info
2021-08-13 02:20:31.355817 (Thread-1): Got an exception: Database Error
  Syntax error: Unexpected string literal 'dia' at [96:53]
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 151, in exception_handler
    yield
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 329, in fn
    return self._query_and_results(client, sql, conn, job_params)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 522, in _query_and_results
    iterator = query_job.result(timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1146, in result
    super(QueryJob, self).result(retry=retry, timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/base.py", line 631, in result
    return super(_AsyncJob, self).result(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 129, in result
    self._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1042, in _blocking_poll
    super(QueryJob, self)._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 107, in _blocking_poll
    retry_(self._done_or_raise)(**kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 85, in _done_or_raise
    if not self.done(**kwargs):
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1022, in done
    self._query_results = self._client._get_query_results(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 1557, in _get_query_results
    resource = self._call_api(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 636, in _call_api
    return call()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/_http.py", line 438, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.BadRequest: 400 GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/4dbaaea6-bbf5-4296-b0db-1b79ee2d45af?maxResults=0&location=US&prettyPrint=false: Syntax error: Unexpected string literal 'dia' at [96:53]

(job ID: 4dbaaea6-bbf5-4296-b0db-1b79ee2d45af)

                                           -----Query Job SQL Follows-----                                           

    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
   1:with 
   2:    customer as (
   3:        select *
   4:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
   5:    ),
   6:    employee as (
   7:        select *
   8:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
   9:    ),    
  10:    person as (
  11:        select *
  12:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
  13:    ),
  14:    personcreditcard as (
  15:        select *
  16:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
  17:    ),
  18:    product as (
  19:        select *
  20:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
  21:    ),
  22:    salesperson as (
  23:        select *
  24:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
  25:    ),        
  26:    salesreason as (
  27:        select *
  28:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
  29:    ),
  30:    salesterritory as (
  31:        select *
  32:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
  33:    ),
  34:    store as (
  35:        select *
  36:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
  37:    ),
  38:    orderheader_with_sk as(
  39:        select
  40:            orderheader.salesorderid
  41:            , customer_sk as customer_fk
  42:            , salesperson_sk as salesperson_fk
  43:            , territory_sk as territory_fk
  44:            , creditcard_sk as creditcard_fk
  45:            , orderheader.billtoaddressid
  46:            , orderheader.shiptoaddressid
  47:            , orderheader.shipmethodid
  48:            , orderheader.currencyrateid
  49:            , orderheader.revisionnumber
  50:            , orderheader.orderdate
  51:            , orderheader.duedate
  52:            , orderheader.shipdate
  53:            , orderheader.status
  54:            , orderheader.onlineorderflag
  55:            , orderheader.purchaseordernumber
  56:            , orderheader.accountnumber
  57:            , orderheader.creditcardapprovalcode
  58:            , orderheader.subtotal
  59:            , orderheader.taxamt
  60:            , orderheader.freight
  61:            , orderheader.totaldue
  62:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
  63:        left join customer on orderheader.customerid = customer.customer_id
  64:        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
  65:        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
  66:        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
  67:    )
  68:    , orderdetail_with_sk as(
  69:        select
  70:            orderdetail.salesorderid
  71:            , orderdetail.salesorderdetailid
  72:            , orderdetail.carriertrackingnumber
  73:            , orderdetail.orderqty
  74:            , product.product_sk as product_fk
  75:            , orderdetail.specialofferid
  76:            , orderdetail.unitprice
  77:            , orderdetail.unitpricediscount      
  78:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
  79:        left join product on orderdetail.productid = product.product_id
  80:    )
  81:    , final as (
  82:        select
  83:            orderdetail_with_sk.salesorderdetailid
  84:            , orderdetail_with_sk.salesorderid
  85:            , orderheader_with_sk.customer_fk
  86:            , orderdetail_with_sk.product_fk
  87:            , orderheader_with_sk.salesperson_fk
  88:            , orderheader_with_sk.territory_fk
  89:            , orderheader_with_sk.creditcard_fk
  90:            , orderheader_with_sk.billtoaddressid
  91:            , orderheader_with_sk.shiptoaddressid
  92:            , orderheader_with_sk.shipmethodid
  93:            , orderheader_with_sk.currencyrateid
  94:            , orderheader_with_sk.revisionnumber
  95:            , orderheader_with_sk.orderdate
  96:            , day(orderheader_with_sk.orderdate) as 'dia',
  97:            , month(orderheader_with_sk.orderdate) as 'mes',
  98:            , year(orderheader_with_sk.orderdate) as 'ano',
  99:            , orderheader_with_sk.duedate
 100:            , orderheader_with_sk.shipdate
 101:            , orderheader_with_sk.status
 102:            , orderheader_with_sk.onlineorderflag
 103:            , orderheader_with_sk.purchaseordernumber
 104:            , orderheader_with_sk.accountnumber
 105:            , orderheader_with_sk.creditcardapprovalcode
 106:            , orderheader_with_sk.subtotal
 107:            , orderheader_with_sk.taxamt
 108:            , orderheader_with_sk.freight
 109:            , orderheader_with_sk.totaldue
 110:            , orderdetail_with_sk.carriertrackingnumber
 111:            , orderdetail_with_sk.orderqty
 112:            , orderdetail_with_sk.specialofferid
 113:            , orderdetail_with_sk.unitprice
 114:            , orderdetail_with_sk.unitpricediscount 
 115:            from orderheader_with_sk
 116:            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
 117:    )
 118:    select * from final
 119:limit 500
 120:/* limit added automatically by dbt cloud */
    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 344, in safe_run
    result = self.compile_and_execute(manifest, ctx)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 287, in compile_and_execute
    result = self.run(ctx.node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 389, in run
    return self.execute(compiled_node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 90, in execute
    _, execute_result = self.adapter.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/base/impl.py", line 227, in execute
    return self.connections.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 340, in execute
    query_job, iterator = self.raw_execute(sql, fetch=fetch)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 331, in raw_execute
    query_job, iterator = self._retry_and_handle(msg=sql, conn=conn, fn=fn)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 155, in exception_handler
    self.handle_error(e, message)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 143, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Syntax error: Unexpected string literal 'dia' at [96:53]
2021-08-13 02:20:31.359417 (Thread-1): Got exception RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': "Database Error in rpc request (from remote system)\n  Syntax error: Unexpected string literal 'dia' at [96:53]", 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , day(orderheader_with_sk.orderdate) as 'dia',\r\n            , month(orderheader_with_sk.orderdate) as 'mes',\r\n            , year(orderheader_with_sk.orderdate) as 'ano',\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': "with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , day(orderheader_with_sk.orderdate) as 'dia',\n            , month(orderheader_with_sk.orderdate) as 'mes',\n            , year(orderheader_with_sk.orderdate) as 'ano',\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'tags': None}, None)
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/rpc/sql_commands.py", line 145, in _in_thread
    self.node_results.append(runner.safe_run(self.manifest))
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 360, in safe_run
    result = self.error_result(ctx.node, error, started, [])
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 56, in error_result
    raise error
dbt.rpc.error.RPCException: RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': "Database Error in rpc request (from remote system)\n  Syntax error: Unexpected string literal 'dia' at [96:53]", 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , day(orderheader_with_sk.orderdate) as 'dia',\r\n            , month(orderheader_with_sk.orderdate) as 'mes',\r\n            , year(orderheader_with_sk.orderdate) as 'ano',\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': "with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , day(orderheader_with_sk.orderdate) as 'dia',\n            , month(orderheader_with_sk.orderdate) as 'mes',\n            , year(orderheader_with_sk.orderdate) as 'ano',\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'tags': None}, None)
2021-08-13 02:20:32.502480 (Thread-128): handling poll request
2021-08-13 02:20:32.502769 (Thread-128): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d5ad880>]}
2021-08-13 02:20:32.503675 (Thread-128): sending response (<Response 51121 bytes [200 OK]>) to 10.0.29.160
2021-08-13 02:20:32.564459 (Thread-129): handling poll request
2021-08-13 02:20:32.564724 (Thread-129): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d590ac0>]}
2021-08-13 02:20:32.566180 (Thread-129): sending response (<Response 51121 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:20:56.340910 (Thread-130): handling status request
2021-08-13 02:20:56.341212 (Thread-130): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d39ca00>]}
2021-08-13 02:20:56.341756 (Thread-130): sending response (<Response 1204 bytes [200 OK]>) to 10.0.32.18
2021-08-13 02:20:56.782825 (Thread-131): handling run_sql request
2021-08-13 02:20:56.783141 (Thread-131): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d39c9d0>]}
2021-08-13 02:20:58.556083 (Thread-131): sending response (<Response 138 bytes [200 OK]>) to 10.0.4.54
2021-08-13 02:20:58.602973 (MainThread): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:20:58.616237 (MainThread): Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'e7094149-9af0-468c-a82a-342893076a53', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f07094c47c0>]}
2021-08-13 02:20:58.616506 (MainThread): Found 22 models, 22 tests, 0 snapshots, 0 analyses, 156 macros, 0 operations, 0 seed files, 16 sources, 0 exposures
2021-08-13 02:20:58.616912 (Thread-1): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:20:58.617025 (Thread-1): Compiling rpc.adventureworks_etl.request
2021-08-13 02:20:58.621675 (Thread-1): finished collecting timing info
2021-08-13 02:20:58.621801 (Thread-1): Opening a new connection, currently in state init
2021-08-13 02:20:58.626362 (Thread-1): On rpc.adventureworks_etl.request: with 
    customer as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
    ),
    employee as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
    ),    
    person as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
    ),
    personcreditcard as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
    ),
    product as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
    ),
    salesperson as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
    ),        
    salesreason as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
    ),
    salesterritory as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
    ),
    store as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
    ),
    orderheader_with_sk as(
        select
            orderheader.salesorderid
            , customer_sk as customer_fk
            , salesperson_sk as salesperson_fk
            , territory_sk as territory_fk
            , creditcard_sk as creditcard_fk
            , orderheader.billtoaddressid
            , orderheader.shiptoaddressid
            , orderheader.shipmethodid
            , orderheader.currencyrateid
            , orderheader.revisionnumber
            , orderheader.orderdate
            , orderheader.duedate
            , orderheader.shipdate
            , orderheader.status
            , orderheader.onlineorderflag
            , orderheader.purchaseordernumber
            , orderheader.accountnumber
            , orderheader.creditcardapprovalcode
            , orderheader.subtotal
            , orderheader.taxamt
            , orderheader.freight
            , orderheader.totaldue
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
        left join customer on orderheader.customerid = customer.customer_id
        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
    )
    , orderdetail_with_sk as(
        select
            orderdetail.salesorderid
            , orderdetail.salesorderdetailid
            , orderdetail.carriertrackingnumber
            , orderdetail.orderqty
            , product.product_sk as product_fk
            , orderdetail.specialofferid
            , orderdetail.unitprice
            , orderdetail.unitpricediscount      
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
        left join product on orderdetail.productid = product.product_id
    )
    , final as (
        select
            orderdetail_with_sk.salesorderdetailid
            , orderdetail_with_sk.salesorderid
            , orderheader_with_sk.customer_fk
            , orderdetail_with_sk.product_fk
            , orderheader_with_sk.salesperson_fk
            , orderheader_with_sk.territory_fk
            , orderheader_with_sk.creditcard_fk
            , orderheader_with_sk.billtoaddressid
            , orderheader_with_sk.shiptoaddressid
            , orderheader_with_sk.shipmethodid
            , orderheader_with_sk.currencyrateid
            , orderheader_with_sk.revisionnumber
            , orderheader_with_sk.orderdate
            , day(orderheader_with_sk.orderdate) as dia,
            , month(orderheader_with_sk.orderdate) as mes,
            , year(orderheader_with_sk.orderdate) as ano,
            , orderheader_with_sk.duedate
            , orderheader_with_sk.shipdate
            , orderheader_with_sk.status
            , orderheader_with_sk.onlineorderflag
            , orderheader_with_sk.purchaseordernumber
            , orderheader_with_sk.accountnumber
            , orderheader_with_sk.creditcardapprovalcode
            , orderheader_with_sk.subtotal
            , orderheader_with_sk.taxamt
            , orderheader_with_sk.freight
            , orderheader_with_sk.totaldue
            , orderdetail_with_sk.carriertrackingnumber
            , orderdetail_with_sk.orderqty
            , orderdetail_with_sk.specialofferid
            , orderdetail_with_sk.unitprice
            , orderdetail_with_sk.unitpricediscount 
            from orderheader_with_sk
            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
    )
    select * from final
limit 500
/* limit added automatically by dbt cloud */
2021-08-13 02:20:58.910460 (Thread-132): handling poll request
2021-08-13 02:20:58.910796 (Thread-132): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3ec910>]}
2021-08-13 02:20:58.911845 (Thread-132): sending response (<Response 7926 bytes [200 OK]>) to 10.0.6.1
2021-08-13 02:20:59.158095 (Thread-1): Retry attempt 1 of 1 after error: BadRequest('GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/7b798e69-2e4a-44d7-86ca-86377f7f4382?maxResults=0&location=US&prettyPrint=false: Syntax error: Expected ")" but got "," at [97:13]')
2021-08-13 02:21:00.260307 (Thread-133): handling poll request
2021-08-13 02:21:00.260617 (Thread-133): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d590520>]}
2021-08-13 02:21:00.261202 (Thread-133): sending response (<Response 900 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:21:00.681038 (Thread-1): finished collecting timing info
2021-08-13 02:21:00.681244 (Thread-1): Got an exception: Database Error
  Syntax error: Expected ")" but got "," at [97:13]
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 151, in exception_handler
    yield
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 329, in fn
    return self._query_and_results(client, sql, conn, job_params)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 522, in _query_and_results
    iterator = query_job.result(timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1146, in result
    super(QueryJob, self).result(retry=retry, timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/base.py", line 631, in result
    return super(_AsyncJob, self).result(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 129, in result
    self._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1042, in _blocking_poll
    super(QueryJob, self)._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 107, in _blocking_poll
    retry_(self._done_or_raise)(**kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 85, in _done_or_raise
    if not self.done(**kwargs):
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1022, in done
    self._query_results = self._client._get_query_results(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 1557, in _get_query_results
    resource = self._call_api(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 636, in _call_api
    return call()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/_http.py", line 438, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.BadRequest: 400 GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/96e4dbef-4394-40d6-88b8-f2e2d1eac525?maxResults=0&location=US&prettyPrint=false: Syntax error: Expected ")" but got "," at [97:13]

(job ID: 96e4dbef-4394-40d6-88b8-f2e2d1eac525)

                                           -----Query Job SQL Follows-----                                           

    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
   1:with 
   2:    customer as (
   3:        select *
   4:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
   5:    ),
   6:    employee as (
   7:        select *
   8:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
   9:    ),    
  10:    person as (
  11:        select *
  12:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
  13:    ),
  14:    personcreditcard as (
  15:        select *
  16:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
  17:    ),
  18:    product as (
  19:        select *
  20:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
  21:    ),
  22:    salesperson as (
  23:        select *
  24:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
  25:    ),        
  26:    salesreason as (
  27:        select *
  28:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
  29:    ),
  30:    salesterritory as (
  31:        select *
  32:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
  33:    ),
  34:    store as (
  35:        select *
  36:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
  37:    ),
  38:    orderheader_with_sk as(
  39:        select
  40:            orderheader.salesorderid
  41:            , customer_sk as customer_fk
  42:            , salesperson_sk as salesperson_fk
  43:            , territory_sk as territory_fk
  44:            , creditcard_sk as creditcard_fk
  45:            , orderheader.billtoaddressid
  46:            , orderheader.shiptoaddressid
  47:            , orderheader.shipmethodid
  48:            , orderheader.currencyrateid
  49:            , orderheader.revisionnumber
  50:            , orderheader.orderdate
  51:            , orderheader.duedate
  52:            , orderheader.shipdate
  53:            , orderheader.status
  54:            , orderheader.onlineorderflag
  55:            , orderheader.purchaseordernumber
  56:            , orderheader.accountnumber
  57:            , orderheader.creditcardapprovalcode
  58:            , orderheader.subtotal
  59:            , orderheader.taxamt
  60:            , orderheader.freight
  61:            , orderheader.totaldue
  62:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
  63:        left join customer on orderheader.customerid = customer.customer_id
  64:        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
  65:        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
  66:        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
  67:    )
  68:    , orderdetail_with_sk as(
  69:        select
  70:            orderdetail.salesorderid
  71:            , orderdetail.salesorderdetailid
  72:            , orderdetail.carriertrackingnumber
  73:            , orderdetail.orderqty
  74:            , product.product_sk as product_fk
  75:            , orderdetail.specialofferid
  76:            , orderdetail.unitprice
  77:            , orderdetail.unitpricediscount      
  78:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
  79:        left join product on orderdetail.productid = product.product_id
  80:    )
  81:    , final as (
  82:        select
  83:            orderdetail_with_sk.salesorderdetailid
  84:            , orderdetail_with_sk.salesorderid
  85:            , orderheader_with_sk.customer_fk
  86:            , orderdetail_with_sk.product_fk
  87:            , orderheader_with_sk.salesperson_fk
  88:            , orderheader_with_sk.territory_fk
  89:            , orderheader_with_sk.creditcard_fk
  90:            , orderheader_with_sk.billtoaddressid
  91:            , orderheader_with_sk.shiptoaddressid
  92:            , orderheader_with_sk.shipmethodid
  93:            , orderheader_with_sk.currencyrateid
  94:            , orderheader_with_sk.revisionnumber
  95:            , orderheader_with_sk.orderdate
  96:            , day(orderheader_with_sk.orderdate) as dia,
  97:            , month(orderheader_with_sk.orderdate) as mes,
  98:            , year(orderheader_with_sk.orderdate) as ano,
  99:            , orderheader_with_sk.duedate
 100:            , orderheader_with_sk.shipdate
 101:            , orderheader_with_sk.status
 102:            , orderheader_with_sk.onlineorderflag
 103:            , orderheader_with_sk.purchaseordernumber
 104:            , orderheader_with_sk.accountnumber
 105:            , orderheader_with_sk.creditcardapprovalcode
 106:            , orderheader_with_sk.subtotal
 107:            , orderheader_with_sk.taxamt
 108:            , orderheader_with_sk.freight
 109:            , orderheader_with_sk.totaldue
 110:            , orderdetail_with_sk.carriertrackingnumber
 111:            , orderdetail_with_sk.orderqty
 112:            , orderdetail_with_sk.specialofferid
 113:            , orderdetail_with_sk.unitprice
 114:            , orderdetail_with_sk.unitpricediscount 
 115:            from orderheader_with_sk
 116:            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
 117:    )
 118:    select * from final
 119:limit 500
 120:/* limit added automatically by dbt cloud */
    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 344, in safe_run
    result = self.compile_and_execute(manifest, ctx)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 287, in compile_and_execute
    result = self.run(ctx.node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 389, in run
    return self.execute(compiled_node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 90, in execute
    _, execute_result = self.adapter.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/base/impl.py", line 227, in execute
    return self.connections.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 340, in execute
    query_job, iterator = self.raw_execute(sql, fetch=fetch)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 331, in raw_execute
    query_job, iterator = self._retry_and_handle(msg=sql, conn=conn, fn=fn)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 155, in exception_handler
    self.handle_error(e, message)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 143, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Syntax error: Expected ")" but got "," at [97:13]
2021-08-13 02:21:00.683762 (Thread-1): Got exception RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': 'Database Error in rpc request (from remote system)\n  Syntax error: Expected ")" but got "," at [97:13]', 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , day(orderheader_with_sk.orderdate) as dia,\r\n            , month(orderheader_with_sk.orderdate) as mes,\r\n            , year(orderheader_with_sk.orderdate) as ano,\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': 'with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , day(orderheader_with_sk.orderdate) as dia,\n            , month(orderheader_with_sk.orderdate) as mes,\n            , year(orderheader_with_sk.orderdate) as ano,\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'tags': None}, None)
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/rpc/sql_commands.py", line 145, in _in_thread
    self.node_results.append(runner.safe_run(self.manifest))
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 360, in safe_run
    result = self.error_result(ctx.node, error, started, [])
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 56, in error_result
    raise error
dbt.rpc.error.RPCException: RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': 'Database Error in rpc request (from remote system)\n  Syntax error: Expected ")" but got "," at [97:13]', 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , day(orderheader_with_sk.orderdate) as dia,\r\n            , month(orderheader_with_sk.orderdate) as mes,\r\n            , year(orderheader_with_sk.orderdate) as ano,\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': 'with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , day(orderheader_with_sk.orderdate) as dia,\n            , month(orderheader_with_sk.orderdate) as mes,\n            , year(orderheader_with_sk.orderdate) as ano,\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'tags': None}, None)
2021-08-13 02:21:01.610389 (Thread-134): handling poll request
2021-08-13 02:21:01.610725 (Thread-134): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d590130>]}
2021-08-13 02:21:01.611714 (Thread-134): sending response (<Response 51042 bytes [200 OK]>) to 10.0.7.69
2021-08-13 02:22:42.976507 (Thread-135): handling status request
2021-08-13 02:22:42.978261 (Thread-135): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d5901c0>]}
2021-08-13 02:22:42.978805 (Thread-135): sending response (<Response 1204 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:22:43.319655 (Thread-136): handling run_sql request
2021-08-13 02:22:43.319947 (Thread-136): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d590370>]}
2021-08-13 02:22:45.091021 (Thread-136): sending response (<Response 138 bytes [200 OK]>) to 10.0.7.69
2021-08-13 02:22:45.139606 (MainThread): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:22:45.154614 (MainThread): Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'd96ccae0-edbd-4053-8495-a3eb5ddb98c7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f8e10c8b790>]}
2021-08-13 02:22:45.154890 (MainThread): Found 22 models, 22 tests, 0 snapshots, 0 analyses, 156 macros, 0 operations, 0 seed files, 16 sources, 0 exposures
2021-08-13 02:22:45.155305 (Thread-1): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:22:45.155416 (Thread-1): Compiling rpc.adventureworks_etl.request
2021-08-13 02:22:45.160112 (Thread-1): finished collecting timing info
2021-08-13 02:22:45.160284 (Thread-1): Opening a new connection, currently in state init
2021-08-13 02:22:45.164778 (Thread-1): On rpc.adventureworks_etl.request: with 
    customer as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
    ),
    employee as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
    ),    
    person as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
    ),
    personcreditcard as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
    ),
    product as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
    ),
    salesperson as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
    ),        
    salesreason as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
    ),
    salesterritory as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
    ),
    store as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
    ),
    orderheader_with_sk as(
        select
            orderheader.salesorderid
            , customer_sk as customer_fk
            , salesperson_sk as salesperson_fk
            , territory_sk as territory_fk
            , creditcard_sk as creditcard_fk
            , orderheader.billtoaddressid
            , orderheader.shiptoaddressid
            , orderheader.shipmethodid
            , orderheader.currencyrateid
            , orderheader.revisionnumber
            , orderheader.orderdate
            , orderheader.duedate
            , orderheader.shipdate
            , orderheader.status
            , orderheader.onlineorderflag
            , orderheader.purchaseordernumber
            , orderheader.accountnumber
            , orderheader.creditcardapprovalcode
            , orderheader.subtotal
            , orderheader.taxamt
            , orderheader.freight
            , orderheader.totaldue
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
        left join customer on orderheader.customerid = customer.customer_id
        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
    )
    , orderdetail_with_sk as(
        select
            orderdetail.salesorderid
            , orderdetail.salesorderdetailid
            , orderdetail.carriertrackingnumber
            , orderdetail.orderqty
            , product.product_sk as product_fk
            , orderdetail.specialofferid
            , orderdetail.unitprice
            , orderdetail.unitpricediscount      
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
        left join product on orderdetail.productid = product.product_id
    )
    , final as (
        select
            orderdetail_with_sk.salesorderdetailid
            , orderdetail_with_sk.salesorderid
            , orderheader_with_sk.customer_fk
            , orderdetail_with_sk.product_fk
            , orderheader_with_sk.salesperson_fk
            , orderheader_with_sk.territory_fk
            , orderheader_with_sk.creditcard_fk
            , orderheader_with_sk.billtoaddressid
            , orderheader_with_sk.shiptoaddressid
            , orderheader_with_sk.shipmethodid
            , orderheader_with_sk.currencyrateid
            , orderheader_with_sk.revisionnumber
            , orderheader_with_sk.orderdate
            , day(orderheader_with_sk.orderdate) as dia
            , month(orderheader_with_sk.orderdate) as mes
            , year(orderheader_with_sk.orderdate) as ano
            , orderheader_with_sk.duedate
            , orderheader_with_sk.shipdate
            , orderheader_with_sk.status
            , orderheader_with_sk.onlineorderflag
            , orderheader_with_sk.purchaseordernumber
            , orderheader_with_sk.accountnumber
            , orderheader_with_sk.creditcardapprovalcode
            , orderheader_with_sk.subtotal
            , orderheader_with_sk.taxamt
            , orderheader_with_sk.freight
            , orderheader_with_sk.totaldue
            , orderdetail_with_sk.carriertrackingnumber
            , orderdetail_with_sk.orderqty
            , orderdetail_with_sk.specialofferid
            , orderdetail_with_sk.unitprice
            , orderdetail_with_sk.unitpricediscount 
            from orderheader_with_sk
            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
    )
    select * from final
limit 500
/* limit added automatically by dbt cloud */
2021-08-13 02:22:45.465833 (Thread-137): handling poll request
2021-08-13 02:22:45.466156 (Thread-137): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e4a2fd0>]}
2021-08-13 02:22:45.467144 (Thread-137): sending response (<Response 7922 bytes [200 OK]>) to 10.0.44.53
2021-08-13 02:22:45.992704 (Thread-1): Retry attempt 1 of 1 after error: BadRequest('GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/6b699b50-1ced-4ca6-95c0-0de19fc2bdc4?maxResults=0&location=US&prettyPrint=false: Function not found: day at [96:15]')
2021-08-13 02:22:46.800310 (Thread-138): handling poll request
2021-08-13 02:22:46.800605 (Thread-138): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e4a2f70>]}
2021-08-13 02:22:46.801156 (Thread-138): sending response (<Response 880 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:22:47.284310 (Thread-1): finished collecting timing info
2021-08-13 02:22:47.284516 (Thread-1): Got an exception: Database Error
  Function not found: day at [96:15]
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 151, in exception_handler
    yield
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 329, in fn
    return self._query_and_results(client, sql, conn, job_params)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 522, in _query_and_results
    iterator = query_job.result(timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1146, in result
    super(QueryJob, self).result(retry=retry, timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/base.py", line 631, in result
    return super(_AsyncJob, self).result(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 129, in result
    self._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1042, in _blocking_poll
    super(QueryJob, self)._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 107, in _blocking_poll
    retry_(self._done_or_raise)(**kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 85, in _done_or_raise
    if not self.done(**kwargs):
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1022, in done
    self._query_results = self._client._get_query_results(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 1557, in _get_query_results
    resource = self._call_api(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 636, in _call_api
    return call()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/_http.py", line 438, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.BadRequest: 400 GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/d602b8fc-88ab-4a11-9966-e2553d2cef75?maxResults=0&location=US&prettyPrint=false: Function not found: day at [96:15]

(job ID: d602b8fc-88ab-4a11-9966-e2553d2cef75)

                                           -----Query Job SQL Follows-----                                           

    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
   1:with 
   2:    customer as (
   3:        select *
   4:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
   5:    ),
   6:    employee as (
   7:        select *
   8:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
   9:    ),    
  10:    person as (
  11:        select *
  12:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
  13:    ),
  14:    personcreditcard as (
  15:        select *
  16:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
  17:    ),
  18:    product as (
  19:        select *
  20:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
  21:    ),
  22:    salesperson as (
  23:        select *
  24:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
  25:    ),        
  26:    salesreason as (
  27:        select *
  28:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
  29:    ),
  30:    salesterritory as (
  31:        select *
  32:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
  33:    ),
  34:    store as (
  35:        select *
  36:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
  37:    ),
  38:    orderheader_with_sk as(
  39:        select
  40:            orderheader.salesorderid
  41:            , customer_sk as customer_fk
  42:            , salesperson_sk as salesperson_fk
  43:            , territory_sk as territory_fk
  44:            , creditcard_sk as creditcard_fk
  45:            , orderheader.billtoaddressid
  46:            , orderheader.shiptoaddressid
  47:            , orderheader.shipmethodid
  48:            , orderheader.currencyrateid
  49:            , orderheader.revisionnumber
  50:            , orderheader.orderdate
  51:            , orderheader.duedate
  52:            , orderheader.shipdate
  53:            , orderheader.status
  54:            , orderheader.onlineorderflag
  55:            , orderheader.purchaseordernumber
  56:            , orderheader.accountnumber
  57:            , orderheader.creditcardapprovalcode
  58:            , orderheader.subtotal
  59:            , orderheader.taxamt
  60:            , orderheader.freight
  61:            , orderheader.totaldue
  62:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
  63:        left join customer on orderheader.customerid = customer.customer_id
  64:        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
  65:        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
  66:        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
  67:    )
  68:    , orderdetail_with_sk as(
  69:        select
  70:            orderdetail.salesorderid
  71:            , orderdetail.salesorderdetailid
  72:            , orderdetail.carriertrackingnumber
  73:            , orderdetail.orderqty
  74:            , product.product_sk as product_fk
  75:            , orderdetail.specialofferid
  76:            , orderdetail.unitprice
  77:            , orderdetail.unitpricediscount      
  78:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
  79:        left join product on orderdetail.productid = product.product_id
  80:    )
  81:    , final as (
  82:        select
  83:            orderdetail_with_sk.salesorderdetailid
  84:            , orderdetail_with_sk.salesorderid
  85:            , orderheader_with_sk.customer_fk
  86:            , orderdetail_with_sk.product_fk
  87:            , orderheader_with_sk.salesperson_fk
  88:            , orderheader_with_sk.territory_fk
  89:            , orderheader_with_sk.creditcard_fk
  90:            , orderheader_with_sk.billtoaddressid
  91:            , orderheader_with_sk.shiptoaddressid
  92:            , orderheader_with_sk.shipmethodid
  93:            , orderheader_with_sk.currencyrateid
  94:            , orderheader_with_sk.revisionnumber
  95:            , orderheader_with_sk.orderdate
  96:            , day(orderheader_with_sk.orderdate) as dia
  97:            , month(orderheader_with_sk.orderdate) as mes
  98:            , year(orderheader_with_sk.orderdate) as ano
  99:            , orderheader_with_sk.duedate
 100:            , orderheader_with_sk.shipdate
 101:            , orderheader_with_sk.status
 102:            , orderheader_with_sk.onlineorderflag
 103:            , orderheader_with_sk.purchaseordernumber
 104:            , orderheader_with_sk.accountnumber
 105:            , orderheader_with_sk.creditcardapprovalcode
 106:            , orderheader_with_sk.subtotal
 107:            , orderheader_with_sk.taxamt
 108:            , orderheader_with_sk.freight
 109:            , orderheader_with_sk.totaldue
 110:            , orderdetail_with_sk.carriertrackingnumber
 111:            , orderdetail_with_sk.orderqty
 112:            , orderdetail_with_sk.specialofferid
 113:            , orderdetail_with_sk.unitprice
 114:            , orderdetail_with_sk.unitpricediscount 
 115:            from orderheader_with_sk
 116:            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
 117:    )
 118:    select * from final
 119:limit 500
 120:/* limit added automatically by dbt cloud */
    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 344, in safe_run
    result = self.compile_and_execute(manifest, ctx)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 287, in compile_and_execute
    result = self.run(ctx.node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 389, in run
    return self.execute(compiled_node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 90, in execute
    _, execute_result = self.adapter.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/base/impl.py", line 227, in execute
    return self.connections.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 340, in execute
    query_job, iterator = self.raw_execute(sql, fetch=fetch)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 331, in raw_execute
    query_job, iterator = self._retry_and_handle(msg=sql, conn=conn, fn=fn)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 155, in exception_handler
    self.handle_error(e, message)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 143, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Function not found: day at [96:15]
2021-08-13 02:22:47.287043 (Thread-1): Got exception RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': 'Database Error in rpc request (from remote system)\n  Function not found: day at [96:15]', 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , day(orderheader_with_sk.orderdate) as dia\r\n            , month(orderheader_with_sk.orderdate) as mes\r\n            , year(orderheader_with_sk.orderdate) as ano\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': 'with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , day(orderheader_with_sk.orderdate) as dia\n            , month(orderheader_with_sk.orderdate) as mes\n            , year(orderheader_with_sk.orderdate) as ano\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'tags': None}, None)
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/rpc/sql_commands.py", line 145, in _in_thread
    self.node_results.append(runner.safe_run(self.manifest))
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 360, in safe_run
    result = self.error_result(ctx.node, error, started, [])
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 56, in error_result
    raise error
dbt.rpc.error.RPCException: RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': 'Database Error in rpc request (from remote system)\n  Function not found: day at [96:15]', 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , day(orderheader_with_sk.orderdate) as dia\r\n            , month(orderheader_with_sk.orderdate) as mes\r\n            , year(orderheader_with_sk.orderdate) as ano\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': 'with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , day(orderheader_with_sk.orderdate) as dia\n            , month(orderheader_with_sk.orderdate) as mes\n            , year(orderheader_with_sk.orderdate) as ano\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'tags': None}, None)
2021-08-13 02:22:48.123737 (Thread-139): handling poll request
2021-08-13 02:22:48.124035 (Thread-139): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e4a2b50>]}
2021-08-13 02:22:48.124906 (Thread-139): sending response (<Response 50885 bytes [200 OK]>) to 10.0.29.164
2021-08-13 02:23:25.157058 (Thread-140): handling status request
2021-08-13 02:23:25.157357 (Thread-140): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e4a27f0>]}
2021-08-13 02:23:25.157925 (Thread-140): sending response (<Response 1204 bytes [200 OK]>) to 10.0.3.12
2021-08-13 02:23:25.243963 (Thread-141): handling status request
2021-08-13 02:23:25.244253 (Thread-141): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d7fd790>]}
2021-08-13 02:23:25.244792 (Thread-141): sending response (<Response 1204 bytes [200 OK]>) to 10.0.3.12
2021-08-13 02:23:25.494970 (Thread-142): handling run_sql request
2021-08-13 02:23:25.495276 (Thread-142): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d7fd6a0>]}
2021-08-13 02:23:25.572692 (Thread-143): handling run_sql request
2021-08-13 02:23:25.573312 (Thread-143): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d648b20>]}
2021-08-13 02:23:27.319964 (Thread-142): sending response (<Response 138 bytes [200 OK]>) to 10.0.23.232
2021-08-13 02:23:27.367305 (MainThread): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:23:27.380658 (MainThread): Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'f80b3fd8-b789-4be3-84a4-eda3c20a2198', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7ff4c21126d0>]}
2021-08-13 02:23:27.380933 (MainThread): Found 22 models, 22 tests, 0 snapshots, 0 analyses, 156 macros, 0 operations, 0 seed files, 16 sources, 0 exposures
2021-08-13 02:23:27.381340 (Thread-1): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:23:27.381449 (Thread-1): Compiling rpc.adventureworks_etl.request
2021-08-13 02:23:27.386076 (Thread-1): finished collecting timing info
2021-08-13 02:23:27.386213 (Thread-1): Opening a new connection, currently in state init
2021-08-13 02:23:27.390802 (Thread-1): On rpc.adventureworks_etl.request: with 
    customer as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
    ),
    employee as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
    ),    
    person as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
    ),
    personcreditcard as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
    ),
    product as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
    ),
    salesperson as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
    ),        
    salesreason as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
    ),
    salesterritory as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
    ),
    store as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
    ),
    orderheader_with_sk as(
        select
            orderheader.salesorderid
            , customer_sk as customer_fk
            , salesperson_sk as salesperson_fk
            , territory_sk as territory_fk
            , creditcard_sk as creditcard_fk
            , orderheader.billtoaddressid
            , orderheader.shiptoaddressid
            , orderheader.shipmethodid
            , orderheader.currencyrateid
            , orderheader.revisionnumber
            , orderheader.orderdate
            , orderheader.duedate
            , orderheader.shipdate
            , orderheader.status
            , orderheader.onlineorderflag
            , orderheader.purchaseordernumber
            , orderheader.accountnumber
            , orderheader.creditcardapprovalcode
            , orderheader.subtotal
            , orderheader.taxamt
            , orderheader.freight
            , orderheader.totaldue
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
        left join customer on orderheader.customerid = customer.customer_id
        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
    )
    , orderdetail_with_sk as(
        select
            orderdetail.salesorderid
            , orderdetail.salesorderdetailid
            , orderdetail.carriertrackingnumber
            , orderdetail.orderqty
            , product.product_sk as product_fk
            , orderdetail.specialofferid
            , orderdetail.unitprice
            , orderdetail.unitpricediscount      
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
        left join product on orderdetail.productid = product.product_id
    )
    , final as (
        select
            orderdetail_with_sk.salesorderdetailid
            , orderdetail_with_sk.salesorderid
            , orderheader_with_sk.customer_fk
            , orderdetail_with_sk.product_fk
            , orderheader_with_sk.salesperson_fk
            , orderheader_with_sk.territory_fk
            , orderheader_with_sk.creditcard_fk
            , orderheader_with_sk.billtoaddressid
            , orderheader_with_sk.shiptoaddressid
            , orderheader_with_sk.shipmethodid
            , orderheader_with_sk.currencyrateid
            , orderheader_with_sk.revisionnumber
            , orderheader_with_sk.orderdate
            , month(orderheader_with_sk.orderdate) as mes
            , year(orderheader_with_sk.orderdate) as ano
            , orderheader_with_sk.duedate
            , orderheader_with_sk.shipdate
            , orderheader_with_sk.status
            , orderheader_with_sk.onlineorderflag
            , orderheader_with_sk.purchaseordernumber
            , orderheader_with_sk.accountnumber
            , orderheader_with_sk.creditcardapprovalcode
            , orderheader_with_sk.subtotal
            , orderheader_with_sk.taxamt
            , orderheader_with_sk.freight
            , orderheader_with_sk.totaldue
            , orderdetail_with_sk.carriertrackingnumber
            , orderdetail_with_sk.orderqty
            , orderdetail_with_sk.specialofferid
            , orderdetail_with_sk.unitprice
            , orderdetail_with_sk.unitpricediscount 
            from orderheader_with_sk
            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
    )
    select * from final
limit 500
/* limit added automatically by dbt cloud */
2021-08-13 02:23:27.404923 (Thread-143): sending response (<Response 138 bytes [200 OK]>) to 10.0.29.164
2021-08-13 02:23:27.452467 (MainThread): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:23:27.465788 (MainThread): Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '1aeb836f-075c-4957-b537-de3bc558a42e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f08111586d0>]}
2021-08-13 02:23:27.466050 (MainThread): Found 22 models, 22 tests, 0 snapshots, 0 analyses, 156 macros, 0 operations, 0 seed files, 16 sources, 0 exposures
2021-08-13 02:23:27.466488 (Thread-1): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:23:27.466632 (Thread-1): Compiling rpc.adventureworks_etl.request
2021-08-13 02:23:27.471271 (Thread-1): finished collecting timing info
2021-08-13 02:23:27.471442 (Thread-1): Opening a new connection, currently in state init
2021-08-13 02:23:27.476209 (Thread-1): On rpc.adventureworks_etl.request: with 
    customer as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
    ),
    employee as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
    ),    
    person as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
    ),
    personcreditcard as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
    ),
    product as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
    ),
    salesperson as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
    ),        
    salesreason as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
    ),
    salesterritory as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
    ),
    store as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
    ),
    orderheader_with_sk as(
        select
            orderheader.salesorderid
            , customer_sk as customer_fk
            , salesperson_sk as salesperson_fk
            , territory_sk as territory_fk
            , creditcard_sk as creditcard_fk
            , orderheader.billtoaddressid
            , orderheader.shiptoaddressid
            , orderheader.shipmethodid
            , orderheader.currencyrateid
            , orderheader.revisionnumber
            , orderheader.orderdate
            , orderheader.duedate
            , orderheader.shipdate
            , orderheader.status
            , orderheader.onlineorderflag
            , orderheader.purchaseordernumber
            , orderheader.accountnumber
            , orderheader.creditcardapprovalcode
            , orderheader.subtotal
            , orderheader.taxamt
            , orderheader.freight
            , orderheader.totaldue
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
        left join customer on orderheader.customerid = customer.customer_id
        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
    )
    , orderdetail_with_sk as(
        select
            orderdetail.salesorderid
            , orderdetail.salesorderdetailid
            , orderdetail.carriertrackingnumber
            , orderdetail.orderqty
            , product.product_sk as product_fk
            , orderdetail.specialofferid
            , orderdetail.unitprice
            , orderdetail.unitpricediscount      
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
        left join product on orderdetail.productid = product.product_id
    )
    , final as (
        select
            orderdetail_with_sk.salesorderdetailid
            , orderdetail_with_sk.salesorderid
            , orderheader_with_sk.customer_fk
            , orderdetail_with_sk.product_fk
            , orderheader_with_sk.salesperson_fk
            , orderheader_with_sk.territory_fk
            , orderheader_with_sk.creditcard_fk
            , orderheader_with_sk.billtoaddressid
            , orderheader_with_sk.shiptoaddressid
            , orderheader_with_sk.shipmethodid
            , orderheader_with_sk.currencyrateid
            , orderheader_with_sk.revisionnumber
            , orderheader_with_sk.orderdate
            , month(orderheader_with_sk.orderdate) as mes
            , year(orderheader_with_sk.orderdate) as ano
            , orderheader_with_sk.duedate
            , orderheader_with_sk.shipdate
            , orderheader_with_sk.status
            , orderheader_with_sk.onlineorderflag
            , orderheader_with_sk.purchaseordernumber
            , orderheader_with_sk.accountnumber
            , orderheader_with_sk.creditcardapprovalcode
            , orderheader_with_sk.subtotal
            , orderheader_with_sk.taxamt
            , orderheader_with_sk.freight
            , orderheader_with_sk.totaldue
            , orderdetail_with_sk.carriertrackingnumber
            , orderdetail_with_sk.orderqty
            , orderdetail_with_sk.specialofferid
            , orderdetail_with_sk.unitprice
            , orderdetail_with_sk.unitpricediscount 
            from orderheader_with_sk
            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
    )
    select * from final
limit 500
/* limit added automatically by dbt cloud */
2021-08-13 02:23:27.679902 (Thread-144): handling poll request
2021-08-13 02:23:27.680224 (Thread-144): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3e34c0>]}
2021-08-13 02:23:27.681146 (Thread-144): sending response (<Response 7874 bytes [200 OK]>) to 10.0.3.12
2021-08-13 02:23:27.778446 (Thread-145): handling poll request
2021-08-13 02:23:27.778732 (Thread-145): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3e3850>]}
2021-08-13 02:23:27.779380 (Thread-145): sending response (<Response 7874 bytes [200 OK]>) to 10.0.42.208
2021-08-13 02:23:27.998643 (Thread-1): Retry attempt 1 of 1 after error: BadRequest('GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/be09df50-6dc3-495f-b4c5-9042f365349a?maxResults=0&location=US&prettyPrint=false: Function not found: month at [96:15]')
2021-08-13 02:23:28.104458 (Thread-1): Retry attempt 1 of 1 after error: BadRequest('GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/70cd77ff-9cdd-448e-8f0b-57750d70eaf4?maxResults=0&location=US&prettyPrint=false: Function not found: month at [96:15]')
2021-08-13 02:23:29.020565 (Thread-146): handling poll request
2021-08-13 02:23:29.020850 (Thread-146): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3e3040>]}
2021-08-13 02:23:29.021413 (Thread-146): sending response (<Response 884 bytes [200 OK]>) to 10.0.25.88
2021-08-13 02:23:29.164581 (Thread-147): handling poll request
2021-08-13 02:23:29.164874 (Thread-147): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3e36a0>]}
2021-08-13 02:23:29.193858 (Thread-147): sending response (<Response 884 bytes [200 OK]>) to 10.0.42.208
2021-08-13 02:23:29.208263 (Thread-1): finished collecting timing info
2021-08-13 02:23:29.208455 (Thread-1): Got an exception: Database Error
  Function not found: month at [96:15]
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 151, in exception_handler
    yield
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 329, in fn
    return self._query_and_results(client, sql, conn, job_params)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 522, in _query_and_results
    iterator = query_job.result(timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1146, in result
    super(QueryJob, self).result(retry=retry, timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/base.py", line 631, in result
    return super(_AsyncJob, self).result(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 129, in result
    self._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1042, in _blocking_poll
    super(QueryJob, self)._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 107, in _blocking_poll
    retry_(self._done_or_raise)(**kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 85, in _done_or_raise
    if not self.done(**kwargs):
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1022, in done
    self._query_results = self._client._get_query_results(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 1557, in _get_query_results
    resource = self._call_api(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 636, in _call_api
    return call()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/_http.py", line 438, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.BadRequest: 400 GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/318e1393-20a8-44ae-b504-c51f063a12d0?maxResults=0&location=US&prettyPrint=false: Function not found: month at [96:15]

(job ID: 318e1393-20a8-44ae-b504-c51f063a12d0)

                                           -----Query Job SQL Follows-----                                           

    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
   1:with 
   2:    customer as (
   3:        select *
   4:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
   5:    ),
   6:    employee as (
   7:        select *
   8:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
   9:    ),    
  10:    person as (
  11:        select *
  12:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
  13:    ),
  14:    personcreditcard as (
  15:        select *
  16:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
  17:    ),
  18:    product as (
  19:        select *
  20:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
  21:    ),
  22:    salesperson as (
  23:        select *
  24:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
  25:    ),        
  26:    salesreason as (
  27:        select *
  28:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
  29:    ),
  30:    salesterritory as (
  31:        select *
  32:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
  33:    ),
  34:    store as (
  35:        select *
  36:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
  37:    ),
  38:    orderheader_with_sk as(
  39:        select
  40:            orderheader.salesorderid
  41:            , customer_sk as customer_fk
  42:            , salesperson_sk as salesperson_fk
  43:            , territory_sk as territory_fk
  44:            , creditcard_sk as creditcard_fk
  45:            , orderheader.billtoaddressid
  46:            , orderheader.shiptoaddressid
  47:            , orderheader.shipmethodid
  48:            , orderheader.currencyrateid
  49:            , orderheader.revisionnumber
  50:            , orderheader.orderdate
  51:            , orderheader.duedate
  52:            , orderheader.shipdate
  53:            , orderheader.status
  54:            , orderheader.onlineorderflag
  55:            , orderheader.purchaseordernumber
  56:            , orderheader.accountnumber
  57:            , orderheader.creditcardapprovalcode
  58:            , orderheader.subtotal
  59:            , orderheader.taxamt
  60:            , orderheader.freight
  61:            , orderheader.totaldue
  62:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
  63:        left join customer on orderheader.customerid = customer.customer_id
  64:        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
  65:        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
  66:        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
  67:    )
  68:    , orderdetail_with_sk as(
  69:        select
  70:            orderdetail.salesorderid
  71:            , orderdetail.salesorderdetailid
  72:            , orderdetail.carriertrackingnumber
  73:            , orderdetail.orderqty
  74:            , product.product_sk as product_fk
  75:            , orderdetail.specialofferid
  76:            , orderdetail.unitprice
  77:            , orderdetail.unitpricediscount      
  78:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
  79:        left join product on orderdetail.productid = product.product_id
  80:    )
  81:    , final as (
  82:        select
  83:            orderdetail_with_sk.salesorderdetailid
  84:            , orderdetail_with_sk.salesorderid
  85:            , orderheader_with_sk.customer_fk
  86:            , orderdetail_with_sk.product_fk
  87:            , orderheader_with_sk.salesperson_fk
  88:            , orderheader_with_sk.territory_fk
  89:            , orderheader_with_sk.creditcard_fk
  90:            , orderheader_with_sk.billtoaddressid
  91:            , orderheader_with_sk.shiptoaddressid
  92:            , orderheader_with_sk.shipmethodid
  93:            , orderheader_with_sk.currencyrateid
  94:            , orderheader_with_sk.revisionnumber
  95:            , orderheader_with_sk.orderdate
  96:            , month(orderheader_with_sk.orderdate) as mes
  97:            , year(orderheader_with_sk.orderdate) as ano
  98:            , orderheader_with_sk.duedate
  99:            , orderheader_with_sk.shipdate
 100:            , orderheader_with_sk.status
 101:            , orderheader_with_sk.onlineorderflag
 102:            , orderheader_with_sk.purchaseordernumber
 103:            , orderheader_with_sk.accountnumber
 104:            , orderheader_with_sk.creditcardapprovalcode
 105:            , orderheader_with_sk.subtotal
 106:            , orderheader_with_sk.taxamt
 107:            , orderheader_with_sk.freight
 108:            , orderheader_with_sk.totaldue
 109:            , orderdetail_with_sk.carriertrackingnumber
 110:            , orderdetail_with_sk.orderqty
 111:            , orderdetail_with_sk.specialofferid
 112:            , orderdetail_with_sk.unitprice
 113:            , orderdetail_with_sk.unitpricediscount 
 114:            from orderheader_with_sk
 115:            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
 116:    )
 117:    select * from final
 118:limit 500
 119:/* limit added automatically by dbt cloud */
    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 344, in safe_run
    result = self.compile_and_execute(manifest, ctx)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 287, in compile_and_execute
    result = self.run(ctx.node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 389, in run
    return self.execute(compiled_node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 90, in execute
    _, execute_result = self.adapter.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/base/impl.py", line 227, in execute
    return self.connections.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 340, in execute
    query_job, iterator = self.raw_execute(sql, fetch=fetch)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 331, in raw_execute
    query_job, iterator = self._retry_and_handle(msg=sql, conn=conn, fn=fn)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 155, in exception_handler
    self.handle_error(e, message)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 143, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Function not found: month at [96:15]
2021-08-13 02:23:29.210941 (Thread-1): Got exception RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': 'Database Error in rpc request (from remote system)\n  Function not found: month at [96:15]', 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , month(orderheader_with_sk.orderdate) as mes\r\n            , year(orderheader_with_sk.orderdate) as ano\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': 'with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , month(orderheader_with_sk.orderdate) as mes\n            , year(orderheader_with_sk.orderdate) as ano\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'tags': None}, None)
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/rpc/sql_commands.py", line 145, in _in_thread
    self.node_results.append(runner.safe_run(self.manifest))
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 360, in safe_run
    result = self.error_result(ctx.node, error, started, [])
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 56, in error_result
    raise error
dbt.rpc.error.RPCException: RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': 'Database Error in rpc request (from remote system)\n  Function not found: month at [96:15]', 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , month(orderheader_with_sk.orderdate) as mes\r\n            , year(orderheader_with_sk.orderdate) as ano\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': 'with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , month(orderheader_with_sk.orderdate) as mes\n            , year(orderheader_with_sk.orderdate) as ano\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'tags': None}, None)
2021-08-13 02:23:29.659815 (Thread-1): finished collecting timing info
2021-08-13 02:23:29.660012 (Thread-1): Got an exception: Database Error
  Function not found: month at [96:15]
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 151, in exception_handler
    yield
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 329, in fn
    return self._query_and_results(client, sql, conn, job_params)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 522, in _query_and_results
    iterator = query_job.result(timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1146, in result
    super(QueryJob, self).result(retry=retry, timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/base.py", line 631, in result
    return super(_AsyncJob, self).result(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 129, in result
    self._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1042, in _blocking_poll
    super(QueryJob, self)._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 107, in _blocking_poll
    retry_(self._done_or_raise)(**kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 85, in _done_or_raise
    if not self.done(**kwargs):
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1022, in done
    self._query_results = self._client._get_query_results(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 1557, in _get_query_results
    resource = self._call_api(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 636, in _call_api
    return call()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/_http.py", line 438, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.BadRequest: 400 GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/c85b6b52-8157-430f-b742-f94e95bfecd6?maxResults=0&location=US&prettyPrint=false: Function not found: month at [96:15]

(job ID: c85b6b52-8157-430f-b742-f94e95bfecd6)

                                           -----Query Job SQL Follows-----                                           

    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
   1:with 
   2:    customer as (
   3:        select *
   4:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
   5:    ),
   6:    employee as (
   7:        select *
   8:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
   9:    ),    
  10:    person as (
  11:        select *
  12:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
  13:    ),
  14:    personcreditcard as (
  15:        select *
  16:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
  17:    ),
  18:    product as (
  19:        select *
  20:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
  21:    ),
  22:    salesperson as (
  23:        select *
  24:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
  25:    ),        
  26:    salesreason as (
  27:        select *
  28:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
  29:    ),
  30:    salesterritory as (
  31:        select *
  32:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
  33:    ),
  34:    store as (
  35:        select *
  36:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
  37:    ),
  38:    orderheader_with_sk as(
  39:        select
  40:            orderheader.salesorderid
  41:            , customer_sk as customer_fk
  42:            , salesperson_sk as salesperson_fk
  43:            , territory_sk as territory_fk
  44:            , creditcard_sk as creditcard_fk
  45:            , orderheader.billtoaddressid
  46:            , orderheader.shiptoaddressid
  47:            , orderheader.shipmethodid
  48:            , orderheader.currencyrateid
  49:            , orderheader.revisionnumber
  50:            , orderheader.orderdate
  51:            , orderheader.duedate
  52:            , orderheader.shipdate
  53:            , orderheader.status
  54:            , orderheader.onlineorderflag
  55:            , orderheader.purchaseordernumber
  56:            , orderheader.accountnumber
  57:            , orderheader.creditcardapprovalcode
  58:            , orderheader.subtotal
  59:            , orderheader.taxamt
  60:            , orderheader.freight
  61:            , orderheader.totaldue
  62:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
  63:        left join customer on orderheader.customerid = customer.customer_id
  64:        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
  65:        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
  66:        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
  67:    )
  68:    , orderdetail_with_sk as(
  69:        select
  70:            orderdetail.salesorderid
  71:            , orderdetail.salesorderdetailid
  72:            , orderdetail.carriertrackingnumber
  73:            , orderdetail.orderqty
  74:            , product.product_sk as product_fk
  75:            , orderdetail.specialofferid
  76:            , orderdetail.unitprice
  77:            , orderdetail.unitpricediscount      
  78:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
  79:        left join product on orderdetail.productid = product.product_id
  80:    )
  81:    , final as (
  82:        select
  83:            orderdetail_with_sk.salesorderdetailid
  84:            , orderdetail_with_sk.salesorderid
  85:            , orderheader_with_sk.customer_fk
  86:            , orderdetail_with_sk.product_fk
  87:            , orderheader_with_sk.salesperson_fk
  88:            , orderheader_with_sk.territory_fk
  89:            , orderheader_with_sk.creditcard_fk
  90:            , orderheader_with_sk.billtoaddressid
  91:            , orderheader_with_sk.shiptoaddressid
  92:            , orderheader_with_sk.shipmethodid
  93:            , orderheader_with_sk.currencyrateid
  94:            , orderheader_with_sk.revisionnumber
  95:            , orderheader_with_sk.orderdate
  96:            , month(orderheader_with_sk.orderdate) as mes
  97:            , year(orderheader_with_sk.orderdate) as ano
  98:            , orderheader_with_sk.duedate
  99:            , orderheader_with_sk.shipdate
 100:            , orderheader_with_sk.status
 101:            , orderheader_with_sk.onlineorderflag
 102:            , orderheader_with_sk.purchaseordernumber
 103:            , orderheader_with_sk.accountnumber
 104:            , orderheader_with_sk.creditcardapprovalcode
 105:            , orderheader_with_sk.subtotal
 106:            , orderheader_with_sk.taxamt
 107:            , orderheader_with_sk.freight
 108:            , orderheader_with_sk.totaldue
 109:            , orderdetail_with_sk.carriertrackingnumber
 110:            , orderdetail_with_sk.orderqty
 111:            , orderdetail_with_sk.specialofferid
 112:            , orderdetail_with_sk.unitprice
 113:            , orderdetail_with_sk.unitpricediscount 
 114:            from orderheader_with_sk
 115:            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
 116:    )
 117:    select * from final
 118:limit 500
 119:/* limit added automatically by dbt cloud */
    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 344, in safe_run
    result = self.compile_and_execute(manifest, ctx)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 287, in compile_and_execute
    result = self.run(ctx.node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 389, in run
    return self.execute(compiled_node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 90, in execute
    _, execute_result = self.adapter.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/base/impl.py", line 227, in execute
    return self.connections.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 340, in execute
    query_job, iterator = self.raw_execute(sql, fetch=fetch)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 331, in raw_execute
    query_job, iterator = self._retry_and_handle(msg=sql, conn=conn, fn=fn)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 155, in exception_handler
    self.handle_error(e, message)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 143, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Function not found: month at [96:15]
2021-08-13 02:23:29.662561 (Thread-1): Got exception RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': 'Database Error in rpc request (from remote system)\n  Function not found: month at [96:15]', 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , month(orderheader_with_sk.orderdate) as mes\r\n            , year(orderheader_with_sk.orderdate) as ano\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': 'with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , month(orderheader_with_sk.orderdate) as mes\n            , year(orderheader_with_sk.orderdate) as ano\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'tags': None}, None)
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/rpc/sql_commands.py", line 145, in _in_thread
    self.node_results.append(runner.safe_run(self.manifest))
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 360, in safe_run
    result = self.error_result(ctx.node, error, started, [])
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 56, in error_result
    raise error
dbt.rpc.error.RPCException: RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': 'Database Error in rpc request (from remote system)\n  Function not found: month at [96:15]', 'raw_sql': "with \r\n    customer as (\r\n        select *\r\n        from {{ ref('dim_customer')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref('dim_employee')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref('dim_person')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref('dim_personcreditcard')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref('dim_product')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref('dim_salesperson')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref('dim_salesreason')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref('dim_salesterritory')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref('dim_store')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref('stg_salesorderheader')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref('stg_salesorderdetail')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , month(orderheader_with_sk.orderdate) as mes\r\n            , year(orderheader_with_sk.orderdate) as ano\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */", 'compiled_sql': 'with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , month(orderheader_with_sk.orderdate) as mes\n            , year(orderheader_with_sk.orderdate) as ano\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'tags': None}, None)
2021-08-13 02:23:30.398276 (Thread-148): handling poll request
2021-08-13 02:23:30.398570 (Thread-148): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3e3b50>]}
2021-08-13 02:23:30.399474 (Thread-148): sending response (<Response 50438 bytes [200 OK]>) to 10.0.44.53
2021-08-13 02:23:30.554408 (Thread-149): handling poll request
2021-08-13 02:23:30.554690 (Thread-149): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e2770d0>]}
2021-08-13 02:23:30.555539 (Thread-149): sending response (<Response 50438 bytes [200 OK]>) to 10.0.42.208
2021-08-13 02:23:46.581442 (Thread-150): handling status request
2021-08-13 02:23:46.581742 (Thread-150): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e277b80>]}
2021-08-13 02:23:46.582277 (Thread-150): sending response (<Response 1204 bytes [200 OK]>) to 10.0.25.88
2021-08-13 02:23:46.974745 (Thread-151): handling run_sql request
2021-08-13 02:23:46.975074 (Thread-151): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e277310>]}
2021-08-13 02:23:48.752616 (Thread-151): sending response (<Response 138 bytes [200 OK]>) to 10.0.44.53
2021-08-13 02:23:48.799698 (MainThread): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:23:48.814167 (MainThread): Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '81cf4d74-38aa-4c00-baf6-2be6eac36502', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fb1b0af96a0>]}
2021-08-13 02:23:48.814450 (MainThread): Found 22 models, 22 tests, 0 snapshots, 0 analyses, 156 macros, 0 operations, 0 seed files, 16 sources, 0 exposures
2021-08-13 02:23:48.814921 (Thread-1): Acquiring new bigquery connection "rpc.adventureworks_etl.request".
2021-08-13 02:23:48.815054 (Thread-1): Compiling rpc.adventureworks_etl.request
2021-08-13 02:23:48.819911 (Thread-1): finished collecting timing info
2021-08-13 02:23:48.820047 (Thread-1): Opening a new connection, currently in state init
2021-08-13 02:23:48.824540 (Thread-1): On rpc.adventureworks_etl.request: with 
    customer as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
    ),
    employee as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
    ),    
    person as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
    ),
    personcreditcard as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
    ),
    product as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
    ),
    salesperson as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
    ),        
    salesreason as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
    ),
    salesterritory as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
    ),
    store as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
    ),
    orderheader_with_sk as(
        select
            orderheader.salesorderid
            , customer_sk as customer_fk
            , salesperson_sk as salesperson_fk
            , territory_sk as territory_fk
            , creditcard_sk as creditcard_fk
            , orderheader.billtoaddressid
            , orderheader.shiptoaddressid
            , orderheader.shipmethodid
            , orderheader.currencyrateid
            , orderheader.revisionnumber
            , orderheader.orderdate
            , orderheader.duedate
            , orderheader.shipdate
            , orderheader.status
            , orderheader.onlineorderflag
            , orderheader.purchaseordernumber
            , orderheader.accountnumber
            , orderheader.creditcardapprovalcode
            , orderheader.subtotal
            , orderheader.taxamt
            , orderheader.freight
            , orderheader.totaldue
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
        left join customer on orderheader.customerid = customer.customer_id
        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
    )
    , orderdetail_with_sk as(
        select
            orderdetail.salesorderid
            , orderdetail.salesorderdetailid
            , orderdetail.carriertrackingnumber
            , orderdetail.orderqty
            , product.product_sk as product_fk
            , orderdetail.specialofferid
            , orderdetail.unitprice
            , orderdetail.unitpricediscount      
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
        left join product on orderdetail.productid = product.product_id
    )
    , final as (
        select
            orderdetail_with_sk.salesorderdetailid
            , orderdetail_with_sk.salesorderid
            , orderheader_with_sk.customer_fk
            , orderdetail_with_sk.product_fk
            , orderheader_with_sk.salesperson_fk
            , orderheader_with_sk.territory_fk
            , orderheader_with_sk.creditcard_fk
            , orderheader_with_sk.billtoaddressid
            , orderheader_with_sk.shiptoaddressid
            , orderheader_with_sk.shipmethodid
            , orderheader_with_sk.currencyrateid
            , orderheader_with_sk.revisionnumber
            , orderheader_with_sk.orderdate
            , month(orderheader_with_sk.orderdate) as "mes"
            , year(orderheader_with_sk.orderdate) as ano
            , orderheader_with_sk.duedate
            , orderheader_with_sk.shipdate
            , orderheader_with_sk.status
            , orderheader_with_sk.onlineorderflag
            , orderheader_with_sk.purchaseordernumber
            , orderheader_with_sk.accountnumber
            , orderheader_with_sk.creditcardapprovalcode
            , orderheader_with_sk.subtotal
            , orderheader_with_sk.taxamt
            , orderheader_with_sk.freight
            , orderheader_with_sk.totaldue
            , orderdetail_with_sk.carriertrackingnumber
            , orderdetail_with_sk.orderqty
            , orderdetail_with_sk.specialofferid
            , orderdetail_with_sk.unitprice
            , orderdetail_with_sk.unitpricediscount 
            from orderheader_with_sk
            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
    )
    select * from final
limit 500
/* limit added automatically by dbt cloud */
2021-08-13 02:23:49.109202 (Thread-152): handling poll request
2021-08-13 02:23:49.109541 (Thread-152): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3e3550>]}
2021-08-13 02:23:49.110510 (Thread-152): sending response (<Response 7877 bytes [200 OK]>) to 10.0.25.88
2021-08-13 02:23:49.267330 (Thread-1): Retry attempt 1 of 1 after error: BadRequest('GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/717951e1-1e46-43c7-8574-d8931d884427?maxResults=0&location=US&prettyPrint=false: Syntax error: Unexpected string literal "mes" at [96:55]')
2021-08-13 02:23:50.455411 (Thread-153): handling poll request
2021-08-13 02:23:50.455726 (Thread-153): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d3cbf40>]}
2021-08-13 02:23:50.456283 (Thread-153): sending response (<Response 906 bytes [200 OK]>) to 10.0.3.12
2021-08-13 02:23:50.623663 (Thread-1): finished collecting timing info
2021-08-13 02:23:50.623859 (Thread-1): Got an exception: Database Error
  Syntax error: Unexpected string literal "mes" at [96:55]
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 151, in exception_handler
    yield
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 329, in fn
    return self._query_and_results(client, sql, conn, job_params)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 522, in _query_and_results
    iterator = query_job.result(timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1146, in result
    super(QueryJob, self).result(retry=retry, timeout=timeout)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/base.py", line 631, in result
    return super(_AsyncJob, self).result(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 129, in result
    self._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1042, in _blocking_poll
    super(QueryJob, self)._blocking_poll(timeout=timeout, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 107, in _blocking_poll
    retry_(self._done_or_raise)(**kwargs)
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/future/polling.py", line 85, in _done_or_raise
    if not self.done(**kwargs):
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/job/query.py", line 1022, in done
    self._query_results = self._client._get_query_results(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 1557, in _get_query_results
    resource = self._call_api(
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/bigquery/client.py", line 636, in _call_api
    return call()
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 281, in retry_wrapped_func
    return retry_target(
  File "/usr/local/lib/python3.8/dist-packages/google/api_core/retry.py", line 184, in retry_target
    return target()
  File "/usr/local/lib/python3.8/dist-packages/google/cloud/_http.py", line 438, in api_request
    raise exceptions.from_http_response(response)
google.api_core.exceptions.BadRequest: 400 GET https://bigquery.googleapis.com/bigquery/v2/projects/cursoanalytics-318700/queries/f2274d5e-c40b-47f2-be12-d941fb20ab61?maxResults=0&location=US&prettyPrint=false: Syntax error: Unexpected string literal "mes" at [96:55]

(job ID: f2274d5e-c40b-47f2-be12-d941fb20ab61)

                                           -----Query Job SQL Follows-----                                           

    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |
   1:with 
   2:    customer as (
   3:        select *
   4:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
   5:    ),
   6:    employee as (
   7:        select *
   8:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
   9:    ),    
  10:    person as (
  11:        select *
  12:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
  13:    ),
  14:    personcreditcard as (
  15:        select *
  16:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
  17:    ),
  18:    product as (
  19:        select *
  20:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
  21:    ),
  22:    salesperson as (
  23:        select *
  24:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
  25:    ),        
  26:    salesreason as (
  27:        select *
  28:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
  29:    ),
  30:    salesterritory as (
  31:        select *
  32:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
  33:    ),
  34:    store as (
  35:        select *
  36:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
  37:    ),
  38:    orderheader_with_sk as(
  39:        select
  40:            orderheader.salesorderid
  41:            , customer_sk as customer_fk
  42:            , salesperson_sk as salesperson_fk
  43:            , territory_sk as territory_fk
  44:            , creditcard_sk as creditcard_fk
  45:            , orderheader.billtoaddressid
  46:            , orderheader.shiptoaddressid
  47:            , orderheader.shipmethodid
  48:            , orderheader.currencyrateid
  49:            , orderheader.revisionnumber
  50:            , orderheader.orderdate
  51:            , orderheader.duedate
  52:            , orderheader.shipdate
  53:            , orderheader.status
  54:            , orderheader.onlineorderflag
  55:            , orderheader.purchaseordernumber
  56:            , orderheader.accountnumber
  57:            , orderheader.creditcardapprovalcode
  58:            , orderheader.subtotal
  59:            , orderheader.taxamt
  60:            , orderheader.freight
  61:            , orderheader.totaldue
  62:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
  63:        left join customer on orderheader.customerid = customer.customer_id
  64:        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
  65:        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
  66:        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
  67:    )
  68:    , orderdetail_with_sk as(
  69:        select
  70:            orderdetail.salesorderid
  71:            , orderdetail.salesorderdetailid
  72:            , orderdetail.carriertrackingnumber
  73:            , orderdetail.orderqty
  74:            , product.product_sk as product_fk
  75:            , orderdetail.specialofferid
  76:            , orderdetail.unitprice
  77:            , orderdetail.unitpricediscount      
  78:        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
  79:        left join product on orderdetail.productid = product.product_id
  80:    )
  81:    , final as (
  82:        select
  83:            orderdetail_with_sk.salesorderdetailid
  84:            , orderdetail_with_sk.salesorderid
  85:            , orderheader_with_sk.customer_fk
  86:            , orderdetail_with_sk.product_fk
  87:            , orderheader_with_sk.salesperson_fk
  88:            , orderheader_with_sk.territory_fk
  89:            , orderheader_with_sk.creditcard_fk
  90:            , orderheader_with_sk.billtoaddressid
  91:            , orderheader_with_sk.shiptoaddressid
  92:            , orderheader_with_sk.shipmethodid
  93:            , orderheader_with_sk.currencyrateid
  94:            , orderheader_with_sk.revisionnumber
  95:            , orderheader_with_sk.orderdate
  96:            , month(orderheader_with_sk.orderdate) as "mes"
  97:            , year(orderheader_with_sk.orderdate) as ano
  98:            , orderheader_with_sk.duedate
  99:            , orderheader_with_sk.shipdate
 100:            , orderheader_with_sk.status
 101:            , orderheader_with_sk.onlineorderflag
 102:            , orderheader_with_sk.purchaseordernumber
 103:            , orderheader_with_sk.accountnumber
 104:            , orderheader_with_sk.creditcardapprovalcode
 105:            , orderheader_with_sk.subtotal
 106:            , orderheader_with_sk.taxamt
 107:            , orderheader_with_sk.freight
 108:            , orderheader_with_sk.totaldue
 109:            , orderdetail_with_sk.carriertrackingnumber
 110:            , orderdetail_with_sk.orderqty
 111:            , orderdetail_with_sk.specialofferid
 112:            , orderdetail_with_sk.unitprice
 113:            , orderdetail_with_sk.unitpricediscount 
 114:            from orderheader_with_sk
 115:            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
 116:    )
 117:    select * from final
 118:limit 500
 119:/* limit added automatically by dbt cloud */
    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |    .    |

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 344, in safe_run
    result = self.compile_and_execute(manifest, ctx)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 287, in compile_and_execute
    result = self.run(ctx.node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 389, in run
    return self.execute(compiled_node, manifest)
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 90, in execute
    _, execute_result = self.adapter.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/base/impl.py", line 227, in execute
    return self.connections.execute(
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 340, in execute
    query_job, iterator = self.raw_execute(sql, fetch=fetch)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 331, in raw_execute
    query_job, iterator = self._retry_and_handle(msg=sql, conn=conn, fn=fn)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 536, in _retry_and_handle
    return retry.retry_target(
  File "/usr/lib/python3.8/contextlib.py", line 131, in __exit__
    self.gen.throw(type, value, traceback)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 155, in exception_handler
    self.handle_error(e, message)
  File "/usr/local/lib/python3.8/dist-packages/dbt/adapters/bigquery/connections.py", line 143, in handle_error
    raise DatabaseException(error_msg)
dbt.exceptions.DatabaseException: Database Error
  Syntax error: Unexpected string literal "mes" at [96:55]
2021-08-13 02:23:50.626245 (Thread-1): Got exception RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': 'Database Error in rpc request (from remote system)\n  Syntax error: Unexpected string literal "mes" at [96:55]', 'raw_sql': 'with \r\n    customer as (\r\n        select *\r\n        from {{ ref(\'dim_customer\')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref(\'dim_employee\')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref(\'dim_person\')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref(\'dim_personcreditcard\')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref(\'dim_product\')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref(\'dim_salesperson\')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref(\'dim_salesreason\')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref(\'dim_salesterritory\')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref(\'dim_store\')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref(\'stg_salesorderheader\')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref(\'stg_salesorderdetail\')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , month(orderheader_with_sk.orderdate) as "mes"\r\n            , year(orderheader_with_sk.orderdate) as ano\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'compiled_sql': 'with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , month(orderheader_with_sk.orderdate) as "mes"\n            , year(orderheader_with_sk.orderdate) as ano\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'tags': None}, None)
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/rpc/sql_commands.py", line 145, in _in_thread
    self.node_results.append(runner.safe_run(self.manifest))
  File "/usr/local/lib/python3.8/dist-packages/dbt/task/base.py", line 360, in safe_run
    result = self.error_result(ctx.node, error, started, [])
  File "/usr/local/lib/python3.8/dist-packages/dbt/rpc/node_runners.py", line 56, in error_result
    raise error
dbt.rpc.error.RPCException: RPCException(10003, Database Error, {'type': 'DatabaseException', 'message': 'Database Error in rpc request (from remote system)\n  Syntax error: Unexpected string literal "mes" at [96:55]', 'raw_sql': 'with \r\n    customer as (\r\n        select *\r\n        from {{ ref(\'dim_customer\')}}\r\n    ),\r\n    employee as (\r\n        select *\r\n        from {{ ref(\'dim_employee\')}}\r\n    ),    \r\n    person as (\r\n        select *\r\n        from {{ ref(\'dim_person\')}}\r\n    ),\r\n    personcreditcard as (\r\n        select *\r\n        from {{ ref(\'dim_personcreditcard\')}}\r\n    ),\r\n    product as (\r\n        select *\r\n        from {{ ref(\'dim_product\')}}\r\n    ),\r\n    salesperson as (\r\n        select *\r\n        from {{ ref(\'dim_salesperson\')}}\r\n    ),        \r\n    salesreason as (\r\n        select *\r\n        from {{ ref(\'dim_salesreason\')}}\r\n    ),\r\n    salesterritory as (\r\n        select *\r\n        from {{ ref(\'dim_salesterritory\')}}\r\n    ),\r\n    store as (\r\n        select *\r\n        from {{ ref(\'dim_store\')}}\r\n    ),\r\n    orderheader_with_sk as(\r\n        select\r\n            orderheader.salesorderid\r\n            , customer_sk as customer_fk\r\n            , salesperson_sk as salesperson_fk\r\n            , territory_sk as territory_fk\r\n            , creditcard_sk as creditcard_fk\r\n            , orderheader.billtoaddressid\r\n            , orderheader.shiptoaddressid\r\n            , orderheader.shipmethodid\r\n            , orderheader.currencyrateid\r\n            , orderheader.revisionnumber\r\n            , orderheader.orderdate\r\n            , orderheader.duedate\r\n            , orderheader.shipdate\r\n            , orderheader.status\r\n            , orderheader.onlineorderflag\r\n            , orderheader.purchaseordernumber\r\n            , orderheader.accountnumber\r\n            , orderheader.creditcardapprovalcode\r\n            , orderheader.subtotal\r\n            , orderheader.taxamt\r\n            , orderheader.freight\r\n            , orderheader.totaldue\r\n        from {{ ref(\'stg_salesorderheader\')}} as orderheader\r\n        left join customer on orderheader.customerid = customer.customer_id\r\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\r\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\r\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\r\n    )\r\n    , orderdetail_with_sk as(\r\n        select\r\n            orderdetail.salesorderid\r\n            , orderdetail.salesorderdetailid\r\n            , orderdetail.carriertrackingnumber\r\n            , orderdetail.orderqty\r\n            , product.product_sk as product_fk\r\n            , orderdetail.specialofferid\r\n            , orderdetail.unitprice\r\n            , orderdetail.unitpricediscount      \r\n        from {{ ref(\'stg_salesorderdetail\')}} as orderdetail\r\n        left join product on orderdetail.productid = product.product_id\r\n    )\r\n    , final as (\r\n        select\r\n            orderdetail_with_sk.salesorderdetailid\r\n            , orderdetail_with_sk.salesorderid\r\n            , orderheader_with_sk.customer_fk\r\n            , orderdetail_with_sk.product_fk\r\n            , orderheader_with_sk.salesperson_fk\r\n            , orderheader_with_sk.territory_fk\r\n            , orderheader_with_sk.creditcard_fk\r\n            , orderheader_with_sk.billtoaddressid\r\n            , orderheader_with_sk.shiptoaddressid\r\n            , orderheader_with_sk.shipmethodid\r\n            , orderheader_with_sk.currencyrateid\r\n            , orderheader_with_sk.revisionnumber\r\n            , orderheader_with_sk.orderdate\r\n            , month(orderheader_with_sk.orderdate) as "mes"\r\n            , year(orderheader_with_sk.orderdate) as ano\r\n            , orderheader_with_sk.duedate\r\n            , orderheader_with_sk.shipdate\r\n            , orderheader_with_sk.status\r\n            , orderheader_with_sk.onlineorderflag\r\n            , orderheader_with_sk.purchaseordernumber\r\n            , orderheader_with_sk.accountnumber\r\n            , orderheader_with_sk.creditcardapprovalcode\r\n            , orderheader_with_sk.subtotal\r\n            , orderheader_with_sk.taxamt\r\n            , orderheader_with_sk.freight\r\n            , orderheader_with_sk.totaldue\r\n            , orderdetail_with_sk.carriertrackingnumber\r\n            , orderdetail_with_sk.orderqty\r\n            , orderdetail_with_sk.specialofferid\r\n            , orderdetail_with_sk.unitprice\r\n            , orderdetail_with_sk.unitpricediscount \r\n            from orderheader_with_sk\r\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\r\n    )\r\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'compiled_sql': 'with \n    customer as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`\n    ),\n    employee as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`\n    ),    \n    person as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`\n    ),\n    personcreditcard as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`\n    ),\n    product as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`\n    ),\n    salesperson as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`\n    ),        \n    salesreason as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`\n    ),\n    salesterritory as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`\n    ),\n    store as (\n        select *\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`\n    ),\n    orderheader_with_sk as(\n        select\n            orderheader.salesorderid\n            , customer_sk as customer_fk\n            , salesperson_sk as salesperson_fk\n            , territory_sk as territory_fk\n            , creditcard_sk as creditcard_fk\n            , orderheader.billtoaddressid\n            , orderheader.shiptoaddressid\n            , orderheader.shipmethodid\n            , orderheader.currencyrateid\n            , orderheader.revisionnumber\n            , orderheader.orderdate\n            , orderheader.duedate\n            , orderheader.shipdate\n            , orderheader.status\n            , orderheader.onlineorderflag\n            , orderheader.purchaseordernumber\n            , orderheader.accountnumber\n            , orderheader.creditcardapprovalcode\n            , orderheader.subtotal\n            , orderheader.taxamt\n            , orderheader.freight\n            , orderheader.totaldue\n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader\n        left join customer on orderheader.customerid = customer.customer_id\n        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id\n        left join salesterritory on orderheader.territoryid = salesterritory.territory_id\n        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id\n    )\n    , orderdetail_with_sk as(\n        select\n            orderdetail.salesorderid\n            , orderdetail.salesorderdetailid\n            , orderdetail.carriertrackingnumber\n            , orderdetail.orderqty\n            , product.product_sk as product_fk\n            , orderdetail.specialofferid\n            , orderdetail.unitprice\n            , orderdetail.unitpricediscount      \n        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail\n        left join product on orderdetail.productid = product.product_id\n    )\n    , final as (\n        select\n            orderdetail_with_sk.salesorderdetailid\n            , orderdetail_with_sk.salesorderid\n            , orderheader_with_sk.customer_fk\n            , orderdetail_with_sk.product_fk\n            , orderheader_with_sk.salesperson_fk\n            , orderheader_with_sk.territory_fk\n            , orderheader_with_sk.creditcard_fk\n            , orderheader_with_sk.billtoaddressid\n            , orderheader_with_sk.shiptoaddressid\n            , orderheader_with_sk.shipmethodid\n            , orderheader_with_sk.currencyrateid\n            , orderheader_with_sk.revisionnumber\n            , orderheader_with_sk.orderdate\n            , month(orderheader_with_sk.orderdate) as "mes"\n            , year(orderheader_with_sk.orderdate) as ano\n            , orderheader_with_sk.duedate\n            , orderheader_with_sk.shipdate\n            , orderheader_with_sk.status\n            , orderheader_with_sk.onlineorderflag\n            , orderheader_with_sk.purchaseordernumber\n            , orderheader_with_sk.accountnumber\n            , orderheader_with_sk.creditcardapprovalcode\n            , orderheader_with_sk.subtotal\n            , orderheader_with_sk.taxamt\n            , orderheader_with_sk.freight\n            , orderheader_with_sk.totaldue\n            , orderdetail_with_sk.carriertrackingnumber\n            , orderdetail_with_sk.orderqty\n            , orderdetail_with_sk.specialofferid\n            , orderdetail_with_sk.unitprice\n            , orderdetail_with_sk.unitpricediscount \n            from orderheader_with_sk\n            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid\n    )\n    select * from final\nlimit 500\n/* limit added automatically by dbt cloud */', 'tags': None}, None)
2021-08-13 02:23:51.786683 (Thread-154): handling poll request
2021-08-13 02:23:51.787043 (Thread-154): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3e37f0>]}
2021-08-13 02:23:51.787931 (Thread-154): sending response (<Response 50708 bytes [200 OK]>) to 10.0.29.164
2021-08-13 02:24:58.286666 (Thread-155): Got an acceptable cached parse result
2021-08-13 02:24:58.490721 (Thread-155): Acquiring new bigquery connection "model.adventureworks_etl.fact_salesorderdetail".
2021-08-13 02:24:58.808689 (Thread-155): Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d89c5e0>]}
2021-08-13 02:24:58.978553 (Thread-156): handling status request
2021-08-13 02:24:58.978842 (Thread-156): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e120940>]}
2021-08-13 02:24:58.979381 (Thread-156): sending response (<Response 1204 bytes [200 OK]>) to 10.0.39.231
2021-08-13 02:24:59.046073 (Thread-157): handling status request
2021-08-13 02:24:59.046361 (Thread-157): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca95ca0>]}
2021-08-13 02:24:59.046839 (Thread-157): sending response (<Response 1204 bytes [200 OK]>) to 10.0.45.128
2021-08-13 02:24:59.120232 (Thread-158): handling status request
2021-08-13 02:24:59.120479 (Thread-158): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e120640>]}
2021-08-13 02:24:59.120945 (Thread-158): sending response (<Response 1204 bytes [200 OK]>) to 10.0.44.81
2021-08-13 02:25:12.111798 (Thread-159): handling status request
2021-08-13 02:25:12.112097 (Thread-159): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e120e50>]}
2021-08-13 02:25:12.112587 (Thread-159): sending response (<Response 1204 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:25:12.366748 (Thread-160): handling status request
2021-08-13 02:25:12.367054 (Thread-160): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e120040>]}
2021-08-13 02:25:12.367548 (Thread-160): sending response (<Response 1204 bytes [200 OK]>) to 10.0.6.1
2021-08-13 02:25:12.432103 (Thread-161): handling cli_args request
2021-08-13 02:25:12.432341 (Thread-161): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e1201c0>]}
2021-08-13 02:25:12.441207 (Thread-161): Connection 'model.adventureworks_etl.fact_salesorderdetail' was properly closed.
2021-08-13 02:25:14.224162 (Thread-161): sending response (<Response 138 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:25:14.259913 (MainThread): Partial parsing not enabled
2021-08-13 02:25:14.262082 (MainThread): Parsing macros/adapters.sql
2021-08-13 02:25:14.281604 (MainThread): Parsing macros/etc.sql
2021-08-13 02:25:14.283760 (MainThread): Parsing macros/catalog.sql
2021-08-13 02:25:14.289829 (MainThread): Parsing macros/materializations/copy.sql
2021-08-13 02:25:14.294548 (MainThread): Parsing macros/materializations/table.sql
2021-08-13 02:25:14.305127 (MainThread): Parsing macros/materializations/incremental.sql
2021-08-13 02:25:14.317170 (MainThread): Parsing macros/materializations/seed.sql
2021-08-13 02:25:14.319936 (MainThread): Parsing macros/materializations/snapshot.sql
2021-08-13 02:25:14.321769 (MainThread): Parsing macros/materializations/view.sql
2021-08-13 02:25:14.325236 (MainThread): Parsing macros/core.sql
2021-08-13 02:25:14.329084 (MainThread): Parsing macros/materializations/helpers.sql
2021-08-13 02:25:14.338030 (MainThread): Parsing macros/materializations/common/merge.sql
2021-08-13 02:25:14.352037 (MainThread): Parsing macros/materializations/snapshot/snapshot_merge.sql
2021-08-13 02:25:14.353836 (MainThread): Parsing macros/materializations/snapshot/strategies.sql
2021-08-13 02:25:14.371279 (MainThread): Parsing macros/materializations/snapshot/snapshot.sql
2021-08-13 02:25:14.402072 (MainThread): Parsing macros/materializations/view/create_or_replace_view.sql
2021-08-13 02:25:14.406998 (MainThread): Parsing macros/materializations/view/view.sql
2021-08-13 02:25:14.413059 (MainThread): Parsing macros/materializations/seed/seed.sql
2021-08-13 02:25:14.433156 (MainThread): Parsing macros/materializations/table/table.sql
2021-08-13 02:25:14.439723 (MainThread): Parsing macros/materializations/incremental/helpers.sql
2021-08-13 02:25:14.441646 (MainThread): Parsing macros/materializations/incremental/incremental.sql
2021-08-13 02:25:14.447644 (MainThread): Parsing macros/etc/is_incremental.sql
2021-08-13 02:25:14.449361 (MainThread): Parsing macros/etc/query.sql
2021-08-13 02:25:14.450520 (MainThread): Parsing macros/etc/datetime.sql
2021-08-13 02:25:14.459381 (MainThread): Parsing macros/etc/get_custom_alias.sql
2021-08-13 02:25:14.460447 (MainThread): Parsing macros/etc/get_custom_database.sql
2021-08-13 02:25:14.462145 (MainThread): Parsing macros/etc/get_custom_schema.sql
2021-08-13 02:25:14.464216 (MainThread): Parsing macros/schema_tests/not_null.sql
2021-08-13 02:25:14.465838 (MainThread): Parsing macros/schema_tests/accepted_values.sql
2021-08-13 02:25:14.468664 (MainThread): Parsing macros/schema_tests/relationships.sql
2021-08-13 02:25:14.470591 (MainThread): Parsing macros/schema_tests/unique.sql
2021-08-13 02:25:14.472458 (MainThread): Parsing macros/adapters/common.sql
2021-08-13 02:25:14.522326 (MainThread): Partial parsing not enabled
2021-08-13 02:25:14.571770 (Thread-162): handling poll request
2021-08-13 02:25:14.572087 (Thread-162): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d7ac1c0>]}
2021-08-13 02:25:14.573323 (Thread-162): sending response (<Response 9638 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:25:14.706742 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheader".
2021-08-13 02:25:14.718540 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheadersalesreason".
2021-08-13 02:25:14.723777 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_store".
2021-08-13 02:25:14.729093 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_product".
2021-08-13 02:25:14.734269 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderdetail".
2021-08-13 02:25:14.740500 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_person".
2021-08-13 02:25:14.746813 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesperson".
2021-08-13 02:25:14.752364 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_customer".
2021-08-13 02:25:14.757836 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_employee".
2021-08-13 02:25:14.763366 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesreason".
2021-08-13 02:25:14.769215 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesterritory".
2021-08-13 02:25:14.774364 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.stg_personcreditcard".
2021-08-13 02:25:14.779563 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.dim_product".
2021-08-13 02:25:14.784710 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.dim_store".
2021-08-13 02:25:14.790153 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.fact_salesorderdetail".
2021-08-13 02:25:14.798077 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesperson".
2021-08-13 02:25:14.803434 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.dim_person".
2021-08-13 02:25:14.808791 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.dim_customer".
2021-08-13 02:25:14.814010 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.dim_personcreditcard".
2021-08-13 02:25:14.819590 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesterritory".
2021-08-13 02:25:14.824551 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesreason".
2021-08-13 02:25:14.829622 (MainThread): Acquiring new bigquery connection "model.adventureworks_etl.dim_employee".
2021-08-13 02:25:14.844545 (MainThread): Acquiring new bigquery connection "test.adventureworks_etl.test_product_quantity".
2021-08-13 02:25:14.850252 (MainThread): Acquiring new bigquery connection "test.adventureworks_etl.test_order_quantity".
2021-08-13 02:25:15.156844 (MainThread): Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a55c27c0>]}
2021-08-13 02:25:15.189372 (MainThread): Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a560f940>]}
2021-08-13 02:25:15.189666 (MainThread): Found 22 models, 22 tests, 0 snapshots, 0 analyses, 156 macros, 0 operations, 0 seed files, 16 sources, 0 exposures
2021-08-13 02:25:15.192244 (MainThread): 
2021-08-13 02:25:15.192534 (MainThread): Acquiring new bigquery connection "master".
2021-08-13 02:25:15.194333 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_cursoanalytics-318700".
2021-08-13 02:25:15.194460 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2021-08-13 02:25:15.381460 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "list_cursoanalytics-318700_dbt_jrgseverino".
2021-08-13 02:25:15.381603 (ThreadPoolExecutor-1_0): Opening a new connection, currently in state closed
2021-08-13 02:25:15.565699 (MainThread): 02:25:15 | Concurrency: 1 threads (target='default')
2021-08-13 02:25:15.565833 (MainThread): 02:25:15 | 
2021-08-13 02:25:15.567936 (Thread-1): Began running node model.adventureworks_etl.stg_customer
2021-08-13 02:25:15.568196 (Thread-1): 02:25:15 | 1 of 22 START view model dbt_jrgseverino.stg_customer................ [RUN]
2021-08-13 02:25:15.568418 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_customer".
2021-08-13 02:25:15.568626 (Thread-1): Compiling model.adventureworks_etl.stg_customer
2021-08-13 02:25:15.570830 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_customer"
2021-08-13 02:25:15.618173 (Thread-1): finished collecting timing info
2021-08-13 02:25:15.644740 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_customer"
2021-08-13 02:25:15.681652 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:15.686031 (Thread-1): On model.adventureworks_etl.stg_customer: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_customer"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_customer`
  OPTIONS()
  as with dados_fonte as (
    select
    customerid
    , personid
    , storeid
    , territoryid
    from `cursoanalytics-318700`.`adventureworks_etl`.`customer`
)

select * from dados_fonte;


2021-08-13 02:25:16.018196 (Thread-163): handling poll request
2021-08-13 02:25:16.018496 (Thread-163): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e1b2a60>]}
2021-08-13 02:25:16.019552 (Thread-163): sending response (<Response 15484 bytes [200 OK]>) to 10.0.6.1
2021-08-13 02:25:16.639454 (Thread-1): finished collecting timing info
2021-08-13 02:25:16.639841 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0c84cd0>]}
2021-08-13 02:25:16.640135 (Thread-1): 02:25:16 | 1 of 22 OK created view model dbt_jrgseverino.stg_customer........... [OK in 1.07s]
2021-08-13 02:25:16.640208 (Thread-1): Finished running node model.adventureworks_etl.stg_customer
2021-08-13 02:25:16.640311 (Thread-1): Began running node model.adventureworks_etl.stg_employee
2021-08-13 02:25:16.640447 (Thread-1): 02:25:16 | 2 of 22 START view model dbt_jrgseverino.stg_employee................ [RUN]
2021-08-13 02:25:16.640633 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_employee".
2021-08-13 02:25:16.640704 (Thread-1): Compiling model.adventureworks_etl.stg_employee
2021-08-13 02:25:16.643047 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_employee"
2021-08-13 02:25:16.655669 (Thread-1): finished collecting timing info
2021-08-13 02:25:16.659377 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_employee"
2021-08-13 02:25:16.671018 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:16.675220 (Thread-1): On model.adventureworks_etl.stg_employee: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_employee"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_employee`
  OPTIONS()
  as with dados_fonte as (
    select
    businessentityid
    , nationalidnumber
    , loginid
    , jobtitle
    , birthdate
    , maritalstatus
    , gender
    , hiredate
    , salariedflag
    , vacationhours
    , sickleavehours
    , currentflag
    , organizationnode
    from `cursoanalytics-318700`.`adventureworks_etl`.`employee`
)

select * from dados_fonte;


2021-08-13 02:25:17.379104 (Thread-164): handling poll request
2021-08-13 02:25:17.379408 (Thread-164): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e1b2340>]}
2021-08-13 02:25:17.380093 (Thread-164): sending response (<Response 6345 bytes [200 OK]>) to 10.0.29.164
2021-08-13 02:25:17.562735 (Thread-1): finished collecting timing info
2021-08-13 02:25:17.563175 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0dd1df0>]}
2021-08-13 02:25:17.563485 (Thread-1): 02:25:17 | 2 of 22 OK created view model dbt_jrgseverino.stg_employee........... [OK in 0.92s]
2021-08-13 02:25:17.563561 (Thread-1): Finished running node model.adventureworks_etl.stg_employee
2021-08-13 02:25:17.563663 (Thread-1): Began running node model.adventureworks_etl.stg_person
2021-08-13 02:25:17.563796 (Thread-1): 02:25:17 | 3 of 22 START view model dbt_jrgseverino.stg_person.................. [RUN]
2021-08-13 02:25:17.564485 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_person".
2021-08-13 02:25:17.564574 (Thread-1): Compiling model.adventureworks_etl.stg_person
2021-08-13 02:25:17.566692 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_person"
2021-08-13 02:25:17.578413 (Thread-1): finished collecting timing info
2021-08-13 02:25:17.580256 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_person"
2021-08-13 02:25:17.591816 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:17.596147 (Thread-1): On model.adventureworks_etl.stg_person: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_person"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_person`
  OPTIONS()
  as with dados_fonte as (
    select
    businessentityid
    , namestyle
    , title
    , firstname
    , middlename
    , lastname
    , suffix
    , emailpromotion
    from `cursoanalytics-318700`.`adventureworks_etl`.`person`
)

select * from dados_fonte;


2021-08-13 02:25:18.266105 (Thread-1): finished collecting timing info
2021-08-13 02:25:18.266505 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0e29190>]}
2021-08-13 02:25:18.266806 (Thread-1): 02:25:18 | 3 of 22 OK created view model dbt_jrgseverino.stg_person............. [OK in 0.70s]
2021-08-13 02:25:18.266883 (Thread-1): Finished running node model.adventureworks_etl.stg_person
2021-08-13 02:25:18.267007 (Thread-1): Began running node model.adventureworks_etl.stg_personcreditcard
2021-08-13 02:25:18.267151 (Thread-1): 02:25:18 | 4 of 22 START view model dbt_jrgseverino.stg_personcreditcard........ [RUN]
2021-08-13 02:25:18.267354 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_personcreditcard".
2021-08-13 02:25:18.267425 (Thread-1): Compiling model.adventureworks_etl.stg_personcreditcard
2021-08-13 02:25:18.269581 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_personcreditcard"
2021-08-13 02:25:18.280715 (Thread-1): finished collecting timing info
2021-08-13 02:25:18.282588 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_personcreditcard"
2021-08-13 02:25:18.291745 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:18.296042 (Thread-1): On model.adventureworks_etl.stg_personcreditcard: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_personcreditcard"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_personcreditcard`
  OPTIONS()
  as with dados_fonte as (
    select
    businessentityid
    , creditcardid
    from `cursoanalytics-318700`.`adventureworks_etl`.`personcreditcard`
)

select * from dados_fonte;


2021-08-13 02:25:18.720402 (Thread-165): handling poll request
2021-08-13 02:25:18.720777 (Thread-165): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e195430>]}
2021-08-13 02:25:18.721777 (Thread-165): sending response (<Response 12206 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:25:19.144846 (Thread-1): finished collecting timing info
2021-08-13 02:25:19.145279 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0dc5520>]}
2021-08-13 02:25:19.145606 (Thread-1): 02:25:19 | 4 of 22 OK created view model dbt_jrgseverino.stg_personcreditcard... [OK in 0.88s]
2021-08-13 02:25:19.145684 (Thread-1): Finished running node model.adventureworks_etl.stg_personcreditcard
2021-08-13 02:25:19.145789 (Thread-1): Began running node model.adventureworks_etl.stg_product
2021-08-13 02:25:19.145925 (Thread-1): 02:25:19 | 5 of 22 START view model dbt_jrgseverino.stg_product................. [RUN]
2021-08-13 02:25:19.146114 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_product".
2021-08-13 02:25:19.146184 (Thread-1): Compiling model.adventureworks_etl.stg_product
2021-08-13 02:25:19.148406 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_product"
2021-08-13 02:25:19.162545 (Thread-1): finished collecting timing info
2021-08-13 02:25:19.164453 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_product"
2021-08-13 02:25:19.176109 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:19.180322 (Thread-1): On model.adventureworks_etl.stg_product: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_product"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_product`
  OPTIONS()
  as with dados_fonte as (
    select
    productid
    , name
    , productnumber
    , makeflag
    , finishedgoodsflag
    , color
    , safetystocklevel
    , reorderpoint
    , standardcost
    , listprice
    , size
    , sizeunitmeasurecode
    , weightunitmeasurecode
    , weight
    , daystomanufacture
    , productline
    , class
    , style
    , productsubcategoryid
    , productmodelid
    , sellstartdate
    , sellenddate
    from `cursoanalytics-318700`.`adventureworks_etl`.`product`
)

select * from dados_fonte;


2021-08-13 02:25:20.060864 (Thread-166): handling poll request
2021-08-13 02:25:20.061180 (Thread-166): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d8758e0>]}
2021-08-13 02:25:20.061855 (Thread-166): sending response (<Response 6537 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:25:20.307186 (Thread-1): finished collecting timing info
2021-08-13 02:25:20.307589 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0e29190>]}
2021-08-13 02:25:20.307908 (Thread-1): 02:25:20 | 5 of 22 OK created view model dbt_jrgseverino.stg_product............ [OK in 1.16s]
2021-08-13 02:25:20.307992 (Thread-1): Finished running node model.adventureworks_etl.stg_product
2021-08-13 02:25:20.308097 (Thread-1): Began running node model.adventureworks_etl.stg_salesperson
2021-08-13 02:25:20.308236 (Thread-1): 02:25:20 | 6 of 22 START view model dbt_jrgseverino.stg_salesperson............. [RUN]
2021-08-13 02:25:20.308436 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesperson".
2021-08-13 02:25:20.308506 (Thread-1): Compiling model.adventureworks_etl.stg_salesperson
2021-08-13 02:25:20.310883 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesperson"
2021-08-13 02:25:20.322060 (Thread-1): finished collecting timing info
2021-08-13 02:25:20.323852 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_salesperson"
2021-08-13 02:25:20.335222 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:20.339589 (Thread-1): On model.adventureworks_etl.stg_salesperson: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_salesperson"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesperson`
  OPTIONS()
  as with dados_fonte as (
    select
    businessentityid
    , territoryid
    , salesquota
    , bonus
    , commissionpct
    , salesytd
    , saleslastyear
    from `cursoanalytics-318700`.`adventureworks_etl`.`salesperson`
)

select * from dados_fonte;


2021-08-13 02:25:21.474240 (Thread-167): handling poll request
2021-08-13 02:25:21.474520 (Thread-167): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e1b2400>]}
2021-08-13 02:25:21.475194 (Thread-167): sending response (<Response 6285 bytes [200 OK]>) to 10.0.39.231
2021-08-13 02:25:21.816985 (Thread-1): finished collecting timing info
2021-08-13 02:25:21.817379 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0dc5520>]}
2021-08-13 02:25:21.817672 (Thread-1): 02:25:21 | 6 of 22 OK created view model dbt_jrgseverino.stg_salesperson........ [OK in 1.51s]
2021-08-13 02:25:21.817746 (Thread-1): Finished running node model.adventureworks_etl.stg_salesperson
2021-08-13 02:25:21.817848 (Thread-1): Began running node model.adventureworks_etl.stg_salesreason
2021-08-13 02:25:21.817985 (Thread-1): 02:25:21 | 7 of 22 START view model dbt_jrgseverino.stg_salesreason............. [RUN]
2021-08-13 02:25:21.818183 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesreason".
2021-08-13 02:25:21.818253 (Thread-1): Compiling model.adventureworks_etl.stg_salesreason
2021-08-13 02:25:21.820537 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesreason"
2021-08-13 02:25:21.832826 (Thread-1): finished collecting timing info
2021-08-13 02:25:21.834619 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_salesreason"
2021-08-13 02:25:21.845650 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:21.849893 (Thread-1): On model.adventureworks_etl.stg_salesreason: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_salesreason"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesreason`
  OPTIONS()
  as with dados_fonte as (
    select
    salesreasonid 
    , name  
    , reasontype
    from `cursoanalytics-318700`.`adventureworks_etl`.`salesreason`
)

select * from dados_fonte;


2021-08-13 02:25:22.691524 (Thread-1): finished collecting timing info
2021-08-13 02:25:22.691911 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0e296a0>]}
2021-08-13 02:25:22.692205 (Thread-1): 02:25:22 | 7 of 22 OK created view model dbt_jrgseverino.stg_salesreason........ [OK in 0.87s]
2021-08-13 02:25:22.692279 (Thread-1): Finished running node model.adventureworks_etl.stg_salesreason
2021-08-13 02:25:22.692381 (Thread-1): Began running node model.adventureworks_etl.stg_salesterritory
2021-08-13 02:25:22.692516 (Thread-1): 02:25:22 | 8 of 22 START view model dbt_jrgseverino.stg_salesterritory.......... [RUN]
2021-08-13 02:25:22.692707 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesterritory".
2021-08-13 02:25:22.692776 (Thread-1): Compiling model.adventureworks_etl.stg_salesterritory
2021-08-13 02:25:22.698872 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesterritory"
2021-08-13 02:25:22.709480 (Thread-1): finished collecting timing info
2021-08-13 02:25:22.711301 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_salesterritory"
2021-08-13 02:25:22.730151 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:22.734384 (Thread-1): On model.adventureworks_etl.stg_salesterritory: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_salesterritory"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesterritory`
  OPTIONS()
  as with dados_fonte as (
    select
    territoryid
    , name
    , countryregioncode
    , salesytd
    , saleslastyear
    , costytd
    , costlastyear
    from `cursoanalytics-318700`.`adventureworks_etl`.`salesterritory`
)

select * from dados_fonte;


2021-08-13 02:25:22.805331 (Thread-168): handling poll request
2021-08-13 02:25:22.805614 (Thread-168): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e367550>]}
2021-08-13 02:25:22.806451 (Thread-168): sending response (<Response 12310 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:25:23.705470 (Thread-1): finished collecting timing info
2021-08-13 02:25:23.705893 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0dc5520>]}
2021-08-13 02:25:23.706333 (Thread-1): 02:25:23 | 8 of 22 OK created view model dbt_jrgseverino.stg_salesterritory..... [OK in 1.01s]
2021-08-13 02:25:23.706415 (Thread-1): Finished running node model.adventureworks_etl.stg_salesterritory
2021-08-13 02:25:23.706518 (Thread-1): Began running node model.adventureworks_etl.stg_store
2021-08-13 02:25:23.706653 (Thread-1): 02:25:23 | 9 of 22 START view model dbt_jrgseverino.stg_store................... [RUN]
2021-08-13 02:25:23.706848 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_store".
2021-08-13 02:25:23.706952 (Thread-1): Compiling model.adventureworks_etl.stg_store
2021-08-13 02:25:23.709117 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_store"
2021-08-13 02:25:23.721438 (Thread-1): finished collecting timing info
2021-08-13 02:25:23.723302 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_store"
2021-08-13 02:25:23.733856 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:23.738241 (Thread-1): On model.adventureworks_etl.stg_store: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_store"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_store`
  OPTIONS()
  as with dados_fonte as (
    select
    businessentityid
    , name
    , salespersonid
    from `cursoanalytics-318700`.`adventureworks_etl`.`store`
)

select * from dados_fonte;


2021-08-13 02:25:24.186353 (Thread-169): handling poll request
2021-08-13 02:25:24.186656 (Thread-169): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3671f0>]}
2021-08-13 02:25:24.187357 (Thread-169): sending response (<Response 6114 bytes [200 OK]>) to 10.0.32.18
2021-08-13 02:25:24.673946 (Thread-1): finished collecting timing info
2021-08-13 02:25:24.674348 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0d14160>]}
2021-08-13 02:25:24.674648 (Thread-1): 02:25:24 | 9 of 22 OK created view model dbt_jrgseverino.stg_store.............. [OK in 0.97s]
2021-08-13 02:25:24.674723 (Thread-1): Finished running node model.adventureworks_etl.stg_store
2021-08-13 02:25:24.674825 (Thread-1): Began running node model.adventureworks_etl.stg_salesorderdetail
2021-08-13 02:25:24.674985 (Thread-1): 02:25:24 | 10 of 22 START view model dbt_jrgseverino.stg_salesorderdetail....... [RUN]
2021-08-13 02:25:24.675184 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderdetail".
2021-08-13 02:25:24.675255 (Thread-1): Compiling model.adventureworks_etl.stg_salesorderdetail
2021-08-13 02:25:24.677445 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesorderdetail"
2021-08-13 02:25:24.698949 (Thread-1): finished collecting timing info
2021-08-13 02:25:24.700975 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_salesorderdetail"
2021-08-13 02:25:24.711757 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:24.716050 (Thread-1): On model.adventureworks_etl.stg_salesorderdetail: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_salesorderdetail"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail`
  OPTIONS()
  as with dados_fonte as (
    select
    salesorderid
    , salesorderdetailid
    , carriertrackingnumber
    , orderqty
    , productid
    , specialofferid
    , unitprice
    , unitpricediscount
    from `cursoanalytics-318700`.`adventureworks_etl`.`salesorderdetail`
)

select * from dados_fonte;


2021-08-13 02:25:25.534372 (Thread-170): handling poll request
2021-08-13 02:25:25.534772 (Thread-170): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d89c4c0>]}
2021-08-13 02:25:25.535580 (Thread-170): sending response (<Response 6427 bytes [200 OK]>) to 10.0.25.88
2021-08-13 02:25:25.555089 (Thread-1): finished collecting timing info
2021-08-13 02:25:25.555602 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0d15c70>]}
2021-08-13 02:25:25.555911 (Thread-1): 02:25:25 | 10 of 22 OK created view model dbt_jrgseverino.stg_salesorderdetail.. [OK in 0.88s]
2021-08-13 02:25:25.556006 (Thread-1): Finished running node model.adventureworks_etl.stg_salesorderdetail
2021-08-13 02:25:25.556118 (Thread-1): Began running node model.adventureworks_etl.stg_salesorderheader
2021-08-13 02:25:25.556316 (Thread-1): 02:25:25 | 11 of 22 START view model dbt_jrgseverino.stg_salesorderheader....... [RUN]
2021-08-13 02:25:25.556522 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheader".
2021-08-13 02:25:25.556595 (Thread-1): Compiling model.adventureworks_etl.stg_salesorderheader
2021-08-13 02:25:25.558924 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesorderheader"
2021-08-13 02:25:25.571131 (Thread-1): finished collecting timing info
2021-08-13 02:25:25.573180 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_salesorderheader"
2021-08-13 02:25:25.584941 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:25.589274 (Thread-1): On model.adventureworks_etl.stg_salesorderheader: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_salesorderheader"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader`
  OPTIONS()
  as with dados_fonte as (
    select
    salesorderid
    , revisionnumber
    , orderdate
    , duedate
    , shipdate
    , status
    , onlineorderflag
    , purchaseordernumber
    , accountnumber
    , customerid
    , salespersonid
    , territoryid
    , billtoaddressid
    , shiptoaddressid
    , shipmethodid
    , creditcardid
    , creditcardapprovalcode
    , currencyrateid
    , subtotal
    , taxamt
    , freight
    , totaldue
    from `cursoanalytics-318700`.`adventureworks_etl`.`salesorderheader`
)

select * from dados_fonte;


2021-08-13 02:25:26.442061 (Thread-1): finished collecting timing info
2021-08-13 02:25:26.442476 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0d14160>]}
2021-08-13 02:25:26.442950 (Thread-1): 02:25:26 | 11 of 22 OK created view model dbt_jrgseverino.stg_salesorderheader.. [OK in 0.89s]
2021-08-13 02:25:26.443037 (Thread-1): Finished running node model.adventureworks_etl.stg_salesorderheader
2021-08-13 02:25:26.443142 (Thread-1): Began running node model.adventureworks_etl.stg_salesorderheadersalesreason
2021-08-13 02:25:26.443281 (Thread-1): 02:25:26 | 12 of 22 START view model dbt_jrgseverino.stg_salesorderheadersalesreason [RUN]
2021-08-13 02:25:26.443489 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheadersalesreason".
2021-08-13 02:25:26.443562 (Thread-1): Compiling model.adventureworks_etl.stg_salesorderheadersalesreason
2021-08-13 02:25:26.446141 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesorderheadersalesreason"
2021-08-13 02:25:26.456339 (Thread-1): finished collecting timing info
2021-08-13 02:25:26.458152 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.stg_salesorderheadersalesreason"
2021-08-13 02:25:26.469495 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:26.473998 (Thread-1): On model.adventureworks_etl.stg_salesorderheadersalesreason: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.stg_salesorderheadersalesreason"} */


  create or replace view `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheadersalesreason`
  OPTIONS()
  as with dados_fonte as (
    select
    salesorderid
    , salesreasonid
    from `cursoanalytics-318700`.`adventureworks_etl`.`salesorderheadersalesreason`
)

select * from dados_fonte;


2021-08-13 02:25:26.883038 (Thread-171): handling poll request
2021-08-13 02:25:26.883370 (Thread-171): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3a2190>]}
2021-08-13 02:25:26.884321 (Thread-171): sending response (<Response 13053 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:25:27.304588 (Thread-1): finished collecting timing info
2021-08-13 02:25:27.304995 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0e73d90>]}
2021-08-13 02:25:27.305299 (Thread-1): 02:25:27 | 12 of 22 OK created view model dbt_jrgseverino.stg_salesorderheadersalesreason [OK in 0.86s]
2021-08-13 02:25:27.305374 (Thread-1): Finished running node model.adventureworks_etl.stg_salesorderheadersalesreason
2021-08-13 02:25:27.305480 (Thread-1): Began running node model.adventureworks_etl.dim_customer
2021-08-13 02:25:27.305683 (Thread-1): 02:25:27 | 13 of 22 START table model dbt_jrgseverino.dim_customer.............. [RUN]
2021-08-13 02:25:27.305910 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_customer".
2021-08-13 02:25:27.305984 (Thread-1): Compiling model.adventureworks_etl.dim_customer
2021-08-13 02:25:27.308432 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_customer"
2021-08-13 02:25:27.328510 (Thread-1): finished collecting timing info
2021-08-13 02:25:27.344821 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:27.591342 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.dim_customer"
2021-08-13 02:25:27.613530 (Thread-1): On model.adventureworks_etl.dim_customer: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.dim_customer"} */


  create or replace table `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
  
  
  OPTIONS()
  as (
    with selected as (
    select
    customerid as customer_id
    , personid
    , storeid
    , territoryid
    from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_customer`
)
, transformed as (
    select
    row_number() over (order by customer_id) as customer_sk
    , *
from selected
)

select * from transformed
  );
    
2021-08-13 02:25:28.282777 (Thread-172): handling poll request
2021-08-13 02:25:28.283092 (Thread-172): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e44fa30>]}
2021-08-13 02:25:28.283778 (Thread-172): sending response (<Response 6405 bytes [200 OK]>) to 10.0.32.18
2021-08-13 02:25:29.633911 (Thread-173): handling poll request
2021-08-13 02:25:29.634192 (Thread-173): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d79e550>]}
2021-08-13 02:25:29.634700 (Thread-173): sending response (<Response 288 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:25:30.453977 (Thread-1): finished collecting timing info
2021-08-13 02:25:30.454397 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0d14160>]}
2021-08-13 02:25:30.454712 (Thread-1): 02:25:30 | 13 of 22 OK created table model dbt_jrgseverino.dim_customer......... [CREATE TABLE (19.8k rows, 469.5 KB processed) in 3.15s]
2021-08-13 02:25:30.454788 (Thread-1): Finished running node model.adventureworks_etl.dim_customer
2021-08-13 02:25:30.454893 (Thread-1): Began running node model.adventureworks_etl.dim_employee
2021-08-13 02:25:30.455095 (Thread-1): 02:25:30 | 14 of 22 START table model dbt_jrgseverino.dim_employee.............. [RUN]
2021-08-13 02:25:30.455300 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_employee".
2021-08-13 02:25:30.455371 (Thread-1): Compiling model.adventureworks_etl.dim_employee
2021-08-13 02:25:30.457854 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_employee"
2021-08-13 02:25:30.468143 (Thread-1): finished collecting timing info
2021-08-13 02:25:30.469615 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:30.658154 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.dim_employee"
2021-08-13 02:25:30.670079 (Thread-1): On model.adventureworks_etl.dim_employee: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.dim_employee"} */


  create or replace table `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
  
  
  OPTIONS()
  as (
    with selected as (
    select
    businessentityid as employee_id
    , nationalidnumber
    , loginid
    , jobtitle
    , birthdate
    , maritalstatus
    , gender
    , hiredate
    , salariedflag
    , vacationhours
    , sickleavehours
    , currentflag
    , organizationnode
    from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_employee`
)
, transformed as (
    select
    row_number() over (order by employee_id) as employee_sk
    , *
from selected
)

select * from transformed
  );
    
2021-08-13 02:25:30.979275 (Thread-174): handling poll request
2021-08-13 02:25:30.979559 (Thread-174): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3bedf0>]}
2021-08-13 02:25:30.980223 (Thread-174): sending response (<Response 6529 bytes [200 OK]>) to 10.0.29.164
2021-08-13 02:25:32.334191 (Thread-175): handling poll request
2021-08-13 02:25:32.334490 (Thread-175): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e3bedc0>]}
2021-08-13 02:25:32.335049 (Thread-175): sending response (<Response 288 bytes [200 OK]>) to 10.0.23.232
2021-08-13 02:25:33.437870 (Thread-1): finished collecting timing info
2021-08-13 02:25:33.438289 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0d14730>]}
2021-08-13 02:25:33.438591 (Thread-1): 02:25:33 | 14 of 22 OK created table model dbt_jrgseverino.dim_employee......... [CREATE TABLE (290.0 rows, 34.2 KB processed) in 2.98s]
2021-08-13 02:25:33.438668 (Thread-1): Finished running node model.adventureworks_etl.dim_employee
2021-08-13 02:25:33.438770 (Thread-1): Began running node model.adventureworks_etl.dim_person
2021-08-13 02:25:33.438932 (Thread-1): 02:25:33 | 15 of 22 START table model dbt_jrgseverino.dim_person................ [RUN]
2021-08-13 02:25:33.439126 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_person".
2021-08-13 02:25:33.439197 (Thread-1): Compiling model.adventureworks_etl.dim_person
2021-08-13 02:25:33.441707 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_person"
2021-08-13 02:25:33.452066 (Thread-1): finished collecting timing info
2021-08-13 02:25:33.453477 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:33.650167 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.dim_person"
2021-08-13 02:25:33.660226 (Thread-1): On model.adventureworks_etl.dim_person: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.dim_person"} */


  create or replace table `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
  
  
  OPTIONS()
  as (
    with selected as (
    select
    businessentityid as person_id
    , namestyle
    , title
    , firstname
    , middlename
    , lastname
    , suffix
    , emailpromotion
    from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_person`
)
, transformed as (
    select
    row_number() over (order by person_id) as person_sk
    , *
from selected
)

select * from transformed
  );
    
2021-08-13 02:25:33.685797 (Thread-176): handling poll request
2021-08-13 02:25:33.686039 (Thread-176): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d8a5bb0>]}
2021-08-13 02:25:33.686707 (Thread-176): sending response (<Response 6366 bytes [200 OK]>) to 10.0.7.69
2021-08-13 02:25:35.045581 (Thread-177): handling poll request
2021-08-13 02:25:35.045866 (Thread-177): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d8a5700>]}
2021-08-13 02:25:35.069500 (Thread-177): sending response (<Response 288 bytes [200 OK]>) to 10.0.7.69
2021-08-13 02:25:36.453158 (Thread-178): handling poll request
2021-08-13 02:25:36.453453 (Thread-178): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d8a51f0>]}
2021-08-13 02:25:36.453960 (Thread-178): sending response (<Response 288 bytes [200 OK]>) to 10.0.45.128
2021-08-13 02:25:36.632810 (Thread-1): finished collecting timing info
2021-08-13 02:25:36.633236 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0381370>]}
2021-08-13 02:25:36.633533 (Thread-1): 02:25:36 | 15 of 22 OK created table model dbt_jrgseverino.dim_person........... [CREATE TABLE (20.0k rows, 673.7 KB processed) in 3.19s]
2021-08-13 02:25:36.633609 (Thread-1): Finished running node model.adventureworks_etl.dim_person
2021-08-13 02:25:36.633710 (Thread-1): Began running node model.adventureworks_etl.dim_personcreditcard
2021-08-13 02:25:36.633845 (Thread-1): 02:25:36 | 16 of 22 START table model dbt_jrgseverino.dim_personcreditcard...... [RUN]
2021-08-13 02:25:36.634406 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_personcreditcard".
2021-08-13 02:25:36.634495 (Thread-1): Compiling model.adventureworks_etl.dim_personcreditcard
2021-08-13 02:25:36.636666 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_personcreditcard"
2021-08-13 02:25:36.647758 (Thread-1): finished collecting timing info
2021-08-13 02:25:36.649238 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:36.855884 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.dim_personcreditcard"
2021-08-13 02:25:36.866162 (Thread-1): On model.adventureworks_etl.dim_personcreditcard: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.dim_personcreditcard"} */


  create or replace table `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
  
  
  OPTIONS()
  as (
    with selected as (
    select
    businessentityid as person_id
    , creditcardid as creditcard_id
    from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_personcreditcard`
)
, transformed as (
    select
    row_number() over (order by person_id) as person_sk
    , row_number() over (order by person_id) as creditcard_sk
    , *
from selected
)

select * from transformed
  );
    
2021-08-13 02:25:37.810778 (Thread-179): handling poll request
2021-08-13 02:25:37.811136 (Thread-179): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d8a58b0>]}
2021-08-13 02:25:37.811832 (Thread-179): sending response (<Response 6558 bytes [200 OK]>) to 10.0.3.12
2021-08-13 02:25:39.169118 (Thread-180): handling poll request
2021-08-13 02:25:39.169415 (Thread-180): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e120a00>]}
2021-08-13 02:25:39.169917 (Thread-180): sending response (<Response 288 bytes [200 OK]>) to 10.0.29.160
2021-08-13 02:25:39.812680 (Thread-1): finished collecting timing info
2021-08-13 02:25:39.813095 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a039d2e0>]}
2021-08-13 02:25:39.813396 (Thread-1): 02:25:39 | 16 of 22 OK created table model dbt_jrgseverino.dim_personcreditcard. [CREATE TABLE (19.1k rows, 298.7 KB processed) in 3.18s]
2021-08-13 02:25:39.813474 (Thread-1): Finished running node model.adventureworks_etl.dim_personcreditcard
2021-08-13 02:25:39.813577 (Thread-1): Began running node model.adventureworks_etl.dim_product
2021-08-13 02:25:39.813715 (Thread-1): 02:25:39 | 17 of 22 START table model dbt_jrgseverino.dim_product............... [RUN]
2021-08-13 02:25:39.813907 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_product".
2021-08-13 02:25:39.813977 (Thread-1): Compiling model.adventureworks_etl.dim_product
2021-08-13 02:25:39.816570 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_product"
2021-08-13 02:25:39.829463 (Thread-1): finished collecting timing info
2021-08-13 02:25:39.831028 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:40.005406 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.dim_product"
2021-08-13 02:25:40.018515 (Thread-1): On model.adventureworks_etl.dim_product: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.dim_product"} */


  create or replace table `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
  
  
  OPTIONS()
  as (
    with selected as (
    select
    productid as product_id
    , name
    , productnumber
    , makeflag
    , finishedgoodsflag
    , color
    , safetystocklevel
    , reorderpoint
    , standardcost
    , listprice
    , size
    , sizeunitmeasurecode
    , weightunitmeasurecode
    , weight
    , daystomanufacture
    , productline
    , class
    , style
    , productsubcategoryid
    , productmodelid
    , sellstartdate
    , sellenddate
    from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_product`
)
, transformed as (
    select
    row_number() over (order by product_id) as product_sk
    , *
from selected
)

select * from transformed
  );
    
2021-08-13 02:25:40.565296 (Thread-181): handling poll request
2021-08-13 02:25:40.565599 (Thread-181): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d4955e0>]}
2021-08-13 02:25:40.566301 (Thread-181): sending response (<Response 6718 bytes [200 OK]>) to 10.0.32.18
2021-08-13 02:25:41.950341 (Thread-182): handling poll request
2021-08-13 02:25:41.950628 (Thread-182): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d4958b0>]}
2021-08-13 02:25:41.951277 (Thread-182): sending response (<Response 288 bytes [200 OK]>) to 10.0.45.128
2021-08-13 02:25:42.901441 (Thread-1): finished collecting timing info
2021-08-13 02:25:42.901858 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a03a83a0>]}
2021-08-13 02:25:42.902157 (Thread-1): 02:25:42 | 17 of 22 OK created table model dbt_jrgseverino.dim_product.......... [CREATE TABLE (504.0 rows, 67.4 KB processed) in 3.09s]
2021-08-13 02:25:42.902237 (Thread-1): Finished running node model.adventureworks_etl.dim_product
2021-08-13 02:25:42.902342 (Thread-1): Began running node model.adventureworks_etl.dim_salesperson
2021-08-13 02:25:42.902480 (Thread-1): 02:25:42 | 18 of 22 START table model dbt_jrgseverino.dim_salesperson........... [RUN]
2021-08-13 02:25:42.902675 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesperson".
2021-08-13 02:25:42.902746 (Thread-1): Compiling model.adventureworks_etl.dim_salesperson
2021-08-13 02:25:42.908540 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_salesperson"
2021-08-13 02:25:42.920470 (Thread-1): finished collecting timing info
2021-08-13 02:25:42.922027 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:43.109738 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.dim_salesperson"
2021-08-13 02:25:43.125865 (Thread-1): On model.adventureworks_etl.dim_salesperson: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.dim_salesperson"} */


  create or replace table `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
  
  
  OPTIONS()
  as (
    with selected as (
    select
    businessentityid as salesperson_id
    , territoryid
    , salesquota
    , bonus
    , commissionpct
    , salesytd
    , saleslastyear
    from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesperson`
)
, transformed as (
    select
    row_number() over (order by salesperson_id) as salesperson_sk
    , *
from selected
)

select * from transformed
  );
    
2021-08-13 02:25:43.300996 (Thread-183): handling poll request
2021-08-13 02:25:43.301289 (Thread-183): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d495a30>]}
2021-08-13 02:25:43.301990 (Thread-183): sending response (<Response 6477 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:25:44.661703 (Thread-184): handling poll request
2021-08-13 02:25:44.661988 (Thread-184): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e1b0eb0>]}
2021-08-13 02:25:44.662508 (Thread-184): sending response (<Response 288 bytes [200 OK]>) to 10.0.4.54
2021-08-13 02:25:45.835683 (Thread-1): finished collecting timing info
2021-08-13 02:25:45.836088 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a03a8880>]}
2021-08-13 02:25:45.836383 (Thread-1): 02:25:45 | 18 of 22 OK created table model dbt_jrgseverino.dim_salesperson...... [CREATE TABLE (17.0 rows, 1.5 KB processed) in 2.93s]
2021-08-13 02:25:45.836458 (Thread-1): Finished running node model.adventureworks_etl.dim_salesperson
2021-08-13 02:25:45.836560 (Thread-1): Began running node model.adventureworks_etl.dim_salesreason
2021-08-13 02:25:45.836698 (Thread-1): 02:25:45 | 19 of 22 START table model dbt_jrgseverino.dim_salesreason........... [RUN]
2021-08-13 02:25:45.836883 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesreason".
2021-08-13 02:25:45.836953 (Thread-1): Compiling model.adventureworks_etl.dim_salesreason
2021-08-13 02:25:45.839256 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_salesreason"
2021-08-13 02:25:45.852174 (Thread-1): finished collecting timing info
2021-08-13 02:25:45.853539 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:46.010125 (Thread-185): handling poll request
2021-08-13 02:25:46.010458 (Thread-185): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d4e9bb0>]}
2021-08-13 02:25:46.011190 (Thread-185): sending response (<Response 5085 bytes [200 OK]>) to 10.0.23.232
2021-08-13 02:25:46.044447 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.dim_salesreason"
2021-08-13 02:25:46.058785 (Thread-1): On model.adventureworks_etl.dim_salesreason: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.dim_salesreason"} */


  create or replace table `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
  
  
  OPTIONS()
  as (
    with selected as (
    select
    salesreasonid as salesreason_id
    , name  
    , reasontype
    from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesreason`
)
, transformed as (
    select
    row_number() over (order by salesreason_id) as salesreason_sk
    , *
from selected
)

select * from transformed
  );
    
2021-08-13 02:25:47.370127 (Thread-186): handling poll request
2021-08-13 02:25:47.370418 (Thread-186): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d637670>]}
2021-08-13 02:25:47.371020 (Thread-186): sending response (<Response 1617 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:25:48.666392 (Thread-1): finished collecting timing info
2021-08-13 02:25:48.666798 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a0d90c10>]}
2021-08-13 02:25:48.667269 (Thread-1): 02:25:48 | 19 of 22 OK created table model dbt_jrgseverino.dim_salesreason...... [CREATE TABLE (10.0 rows, 305.0 Bytes processed) in 2.83s]
2021-08-13 02:25:48.667351 (Thread-1): Finished running node model.adventureworks_etl.dim_salesreason
2021-08-13 02:25:48.667455 (Thread-1): Began running node model.adventureworks_etl.dim_salesterritory
2021-08-13 02:25:48.667592 (Thread-1): 02:25:48 | 20 of 22 START table model dbt_jrgseverino.dim_salesterritory........ [RUN]
2021-08-13 02:25:48.667788 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesterritory".
2021-08-13 02:25:48.667858 (Thread-1): Compiling model.adventureworks_etl.dim_salesterritory
2021-08-13 02:25:48.670235 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_salesterritory"
2021-08-13 02:25:48.683754 (Thread-1): finished collecting timing info
2021-08-13 02:25:48.685244 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:48.715248 (Thread-187): handling poll request
2021-08-13 02:25:48.715568 (Thread-187): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d6378b0>]}
2021-08-13 02:25:48.716223 (Thread-187): sending response (<Response 5135 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:25:48.857698 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.dim_salesterritory"
2021-08-13 02:25:48.871279 (Thread-1): On model.adventureworks_etl.dim_salesterritory: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.dim_salesterritory"} */


  create or replace table `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
  
  
  OPTIONS()
  as (
    with selected as (
    select
    territoryid as territory_id
    , name
    , countryregioncode
    , salesytd
    , saleslastyear
    , costytd
    , costlastyear
    from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesterritory`
)
, transformed as (
    select
    row_number() over (order by territory_id) as territory_sk
    , *
from selected
)

select * from transformed
  );
    
2021-08-13 02:25:50.072960 (Thread-188): handling poll request
2021-08-13 02:25:50.073248 (Thread-188): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d7acc10>]}
2021-08-13 02:25:50.073782 (Thread-188): sending response (<Response 1705 bytes [200 OK]>) to 10.0.3.12
2021-08-13 02:25:51.465247 (Thread-189): handling poll request
2021-08-13 02:25:51.465546 (Thread-189): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d7ac160>]}
2021-08-13 02:25:51.466061 (Thread-189): sending response (<Response 288 bytes [200 OK]>) to 10.0.44.81
2021-08-13 02:25:51.748558 (Thread-1): finished collecting timing info
2021-08-13 02:25:51.748969 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a02c6c70>]}
2021-08-13 02:25:51.749265 (Thread-1): 02:25:51 | 20 of 22 OK created table model dbt_jrgseverino.dim_salesterritory... [CREATE TABLE (10.0 rows, 865.0 Bytes processed) in 3.08s]
2021-08-13 02:25:51.749340 (Thread-1): Finished running node model.adventureworks_etl.dim_salesterritory
2021-08-13 02:25:51.749444 (Thread-1): Began running node model.adventureworks_etl.dim_store
2021-08-13 02:25:51.749580 (Thread-1): 02:25:51 | 21 of 22 START table model dbt_jrgseverino.dim_store................. [RUN]
2021-08-13 02:25:51.749772 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_store".
2021-08-13 02:25:51.749842 (Thread-1): Compiling model.adventureworks_etl.dim_store
2021-08-13 02:25:51.752235 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_store"
2021-08-13 02:25:51.761958 (Thread-1): finished collecting timing info
2021-08-13 02:25:51.763526 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:51.942507 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.dim_store"
2021-08-13 02:25:51.952890 (Thread-1): On model.adventureworks_etl.dim_store: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.dim_store"} */


  create or replace table `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
  
  
  OPTIONS()
  as (
    with selected as (
    select
    businessentityid as store_id
    , name
    , salespersonid
    from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_store`
)
, transformed as (
    select
    row_number() over (order by store_id) as store_sk
    , *
from selected
)

select * from transformed
  );
    
2021-08-13 02:25:52.863351 (Thread-190): handling poll request
2021-08-13 02:25:52.863638 (Thread-190): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d7ac310>]}
2021-08-13 02:25:52.864372 (Thread-190): sending response (<Response 6290 bytes [200 OK]>) to 10.0.6.1
2021-08-13 02:25:54.241797 (Thread-191): handling poll request
2021-08-13 02:25:54.242086 (Thread-191): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5f759730>]}
2021-08-13 02:25:54.242603 (Thread-191): sending response (<Response 288 bytes [200 OK]>) to 10.0.44.53
2021-08-13 02:25:54.649993 (Thread-1): finished collecting timing info
2021-08-13 02:25:54.650388 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a02c6c70>]}
2021-08-13 02:25:54.650688 (Thread-1): 02:25:54 | 21 of 22 OK created table model dbt_jrgseverino.dim_store............ [CREATE TABLE (701.0 rows, 26.1 KB processed) in 2.90s]
2021-08-13 02:25:54.650763 (Thread-1): Finished running node model.adventureworks_etl.dim_store
2021-08-13 02:25:54.651635 (Thread-1): Began running node model.adventureworks_etl.fact_salesorderdetail
2021-08-13 02:25:54.651847 (Thread-1): 02:25:54 | 22 of 22 START table model dbt_jrgseverino.fact_salesorderdetail..... [RUN]
2021-08-13 02:25:54.652055 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.fact_salesorderdetail".
2021-08-13 02:25:54.652127 (Thread-1): Compiling model.adventureworks_etl.fact_salesorderdetail
2021-08-13 02:25:54.656972 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.fact_salesorderdetail"
2021-08-13 02:25:54.686248 (Thread-1): finished collecting timing info
2021-08-13 02:25:54.688026 (Thread-1): Opening a new connection, currently in state closed
2021-08-13 02:25:54.874346 (Thread-1): Writing runtime SQL for node "model.adventureworks_etl.fact_salesorderdetail"
2021-08-13 02:25:54.901069 (Thread-1): On model.adventureworks_etl.fact_salesorderdetail: /* {"app": "dbt", "dbt_version": "0.19.2", "profile_name": "user", "target_name": "default", "node_id": "model.adventureworks_etl.fact_salesorderdetail"} */


  create or replace table `cursoanalytics-318700`.`dbt_jrgseverino`.`fact_salesorderdetail`
  
  
  OPTIONS()
  as (
    with 
    customer as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_customer`
    ),
    employee as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_employee`
    ),    
    person as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_person`
    ),
    personcreditcard as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_personcreditcard`
    ),
    product as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_product`
    ),
    salesperson as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesperson`
    ),        
    salesreason as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesreason`
    ),
    salesterritory as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_salesterritory`
    ),
    store as (
        select *
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`dim_store`
    ),
    orderheader_with_sk as(
        select
            orderheader.salesorderid
            , customer_sk as customer_fk
            , salesperson_sk as salesperson_fk
            , territory_sk as territory_fk
            , creditcard_sk as creditcard_fk
            , orderheader.billtoaddressid
            , orderheader.shiptoaddressid
            , orderheader.shipmethodid
            , orderheader.currencyrateid
            , orderheader.revisionnumber
            , orderheader.orderdate
            , orderheader.duedate
            , orderheader.shipdate
            , orderheader.status
            , orderheader.onlineorderflag
            , orderheader.purchaseordernumber
            , orderheader.accountnumber
            , orderheader.creditcardapprovalcode
            , orderheader.subtotal
            , orderheader.taxamt
            , orderheader.freight
            , orderheader.totaldue
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderheader` as orderheader
        left join customer on orderheader.customerid = customer.customer_id
        left join salesperson on orderheader.salespersonid = salesperson.salesperson_id
        left join salesterritory on orderheader.territoryid = salesterritory.territory_id
        left join personcreditcard on orderheader.creditcardid = personcreditcard.creditcard_id
    )
    , orderdetail_with_sk as(
        select
            orderdetail.salesorderid
            , orderdetail.salesorderdetailid
            , orderdetail.carriertrackingnumber
            , orderdetail.orderqty
            , product.product_sk as product_fk
            , orderdetail.specialofferid
            , orderdetail.unitprice
            , orderdetail.unitpricediscount      
        from `cursoanalytics-318700`.`dbt_jrgseverino`.`stg_salesorderdetail` as orderdetail
        left join product on orderdetail.productid = product.product_id
    )
    , final as (
        select
            orderdetail_with_sk.salesorderdetailid
            , orderdetail_with_sk.salesorderid
            , orderheader_with_sk.customer_fk
            , orderdetail_with_sk.product_fk
            , orderheader_with_sk.salesperson_fk
            , orderheader_with_sk.territory_fk
            , orderheader_with_sk.creditcard_fk
            , orderheader_with_sk.billtoaddressid
            , orderheader_with_sk.shiptoaddressid
            , orderheader_with_sk.shipmethodid
            , orderheader_with_sk.currencyrateid
            , orderheader_with_sk.revisionnumber
            , orderheader_with_sk.orderdate
            , orderheader_with_sk.duedate
            , orderheader_with_sk.shipdate
            , orderheader_with_sk.status
            , orderheader_with_sk.onlineorderflag
            , orderheader_with_sk.purchaseordernumber
            , orderheader_with_sk.accountnumber
            , orderheader_with_sk.creditcardapprovalcode
            , orderheader_with_sk.subtotal
            , orderheader_with_sk.taxamt
            , orderheader_with_sk.freight
            , orderheader_with_sk.totaldue
            , orderdetail_with_sk.carriertrackingnumber
            , orderdetail_with_sk.orderqty
            , orderdetail_with_sk.specialofferid
            , orderdetail_with_sk.unitprice
            , orderdetail_with_sk.unitpricediscount 
            from orderheader_with_sk
            left join orderdetail_with_sk on orderheader_with_sk.salesorderid = orderdetail_with_sk.salesorderid
    )
    select * from final
  );
    
2021-08-13 02:25:55.627656 (Thread-192): handling poll request
2021-08-13 02:25:55.627944 (Thread-192): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d842fa0>]}
2021-08-13 02:25:55.628659 (Thread-192): sending response (<Response 11285 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:25:56.975410 (Thread-193): handling poll request
2021-08-13 02:25:56.976089 (Thread-193): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5f759850>]}
2021-08-13 02:25:56.976627 (Thread-193): sending response (<Response 288 bytes [200 OK]>) to 10.0.3.12
2021-08-13 02:25:58.352588 (Thread-194): handling poll request
2021-08-13 02:25:58.352923 (Thread-194): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5f759820>]}
2021-08-13 02:25:58.353435 (Thread-194): sending response (<Response 288 bytes [200 OK]>) to 10.0.44.53
2021-08-13 02:25:59.724307 (Thread-195): handling poll request
2021-08-13 02:25:59.724596 (Thread-195): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d7ac5b0>]}
2021-08-13 02:25:59.725100 (Thread-195): sending response (<Response 288 bytes [200 OK]>) to 10.0.44.81
2021-08-13 02:26:01.088361 (Thread-196): handling poll request
2021-08-13 02:26:01.088655 (Thread-196): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d637070>]}
2021-08-13 02:26:01.089155 (Thread-196): sending response (<Response 288 bytes [200 OK]>) to 10.0.6.1
2021-08-13 02:26:01.180653 (Thread-1): finished collecting timing info
2021-08-13 02:26:01.181216 (Thread-1): Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6fc6e80a-e6b4-48d1-93f4-bf2d8e390d10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7fd5a02e84f0>]}
2021-08-13 02:26:01.181521 (Thread-1): 02:26:01 | 22 of 22 OK created table model dbt_jrgseverino.fact_salesorderdetail [CREATE TABLE (121.3k rows, 15.7 MB processed) in 6.53s]
2021-08-13 02:26:01.181597 (Thread-1): Finished running node model.adventureworks_etl.fact_salesorderdetail
2021-08-13 02:26:01.182838 (MainThread): Acquiring new bigquery connection "master".
2021-08-13 02:26:01.183210 (MainThread): 02:26:01 | 
2021-08-13 02:26:01.183280 (MainThread): 02:26:01 | Finished running 12 view models, 10 table models in 45.99s.
2021-08-13 02:26:01.183330 (MainThread): Connection 'master' was properly closed.
2021-08-13 02:26:01.183370 (MainThread): Connection 'model.adventureworks_etl.fact_salesorderdetail' was properly closed.
2021-08-13 02:26:01.247831 (MainThread): 
2021-08-13 02:26:01.247988 (MainThread): Completed successfully
2021-08-13 02:26:01.248080 (MainThread): 
Done. PASS=22 WARN=0 ERROR=0 SKIP=0 TOTAL=22
2021-08-13 02:26:02.463618 (Thread-197): handling poll request
2021-08-13 02:26:02.463913 (Thread-197): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d4844c0>]}
2021-08-13 02:26:02.467156 (Thread-197): sending response (<Response 85464 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:26:03.466353 (Thread-198): handling status request
2021-08-13 02:26:03.466651 (Thread-198): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d45eac0>]}
2021-08-13 02:26:03.467236 (Thread-198): sending response (<Response 1204 bytes [200 OK]>) to 10.0.4.54
2021-08-13 02:26:03.495627 (Thread-199): handling status request
2021-08-13 02:26:03.495973 (Thread-199): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d45eca0>]}
2021-08-13 02:26:03.496531 (Thread-199): sending response (<Response 1204 bytes [200 OK]>) to 10.0.44.81
2021-08-13 02:26:03.514004 (Thread-200): handling status request
2021-08-13 02:26:03.514255 (Thread-200): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e4a8280>]}
2021-08-13 02:26:03.514755 (Thread-200): sending response (<Response 1204 bytes [200 OK]>) to 10.0.39.231
2021-08-13 02:33:16.080944 (Thread-201): handling status request
2021-08-13 02:33:16.081230 (Thread-201): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e4a8b80>]}
2021-08-13 02:33:16.081739 (Thread-201): sending response (<Response 1204 bytes [200 OK]>) to 10.0.4.54
2021-08-13 02:33:16.110855 (Thread-202): handling status request
2021-08-13 02:33:16.111135 (Thread-202): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d7b5790>]}
2021-08-13 02:33:16.111580 (Thread-202): sending response (<Response 1204 bytes [200 OK]>) to 10.0.32.18
2021-08-13 02:33:16.202161 (Thread-203): handling status request
2021-08-13 02:33:16.202445 (Thread-203): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d475ca0>]}
2021-08-13 02:33:16.202948 (Thread-203): sending response (<Response 1204 bytes [200 OK]>) to 10.0.39.231
2021-08-13 02:33:29.491841 (Thread-204): handling status request
2021-08-13 02:33:29.492131 (Thread-204): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d7c8b80>]}
2021-08-13 02:33:29.492629 (Thread-204): sending response (<Response 1204 bytes [200 OK]>) to 10.0.45.128
2021-08-13 02:33:30.144242 (Thread-205): Parsing macros/adapters.sql
2021-08-13 02:33:30.163786 (Thread-205): Parsing macros/etc.sql
2021-08-13 02:33:30.165862 (Thread-205): Parsing macros/catalog.sql
2021-08-13 02:33:30.171781 (Thread-205): Parsing macros/materializations/copy.sql
2021-08-13 02:33:30.176316 (Thread-205): Parsing macros/materializations/table.sql
2021-08-13 02:33:30.185747 (Thread-205): Parsing macros/materializations/incremental.sql
2021-08-13 02:33:30.197652 (Thread-205): Parsing macros/materializations/seed.sql
2021-08-13 02:33:30.200284 (Thread-205): Parsing macros/materializations/snapshot.sql
2021-08-13 02:33:30.202060 (Thread-205): Parsing macros/materializations/view.sql
2021-08-13 02:33:30.205469 (Thread-205): Parsing macros/core.sql
2021-08-13 02:33:30.209246 (Thread-205): Parsing macros/materializations/helpers.sql
2021-08-13 02:33:30.218563 (Thread-205): Parsing macros/materializations/common/merge.sql
2021-08-13 02:33:30.232165 (Thread-205): Parsing macros/materializations/snapshot/snapshot_merge.sql
2021-08-13 02:33:30.233873 (Thread-205): Parsing macros/materializations/snapshot/strategies.sql
2021-08-13 02:33:30.251090 (Thread-205): Parsing macros/materializations/snapshot/snapshot.sql
2021-08-13 02:33:30.281767 (Thread-205): Parsing macros/materializations/view/create_or_replace_view.sql
2021-08-13 02:33:30.286611 (Thread-205): Parsing macros/materializations/view/view.sql
2021-08-13 02:33:30.292637 (Thread-205): Parsing macros/materializations/seed/seed.sql
2021-08-13 02:33:30.312650 (Thread-205): Parsing macros/materializations/table/table.sql
2021-08-13 02:33:30.319070 (Thread-205): Parsing macros/materializations/incremental/helpers.sql
2021-08-13 02:33:30.320840 (Thread-205): Parsing macros/materializations/incremental/incremental.sql
2021-08-13 02:33:30.326623 (Thread-205): Parsing macros/etc/is_incremental.sql
2021-08-13 02:33:30.328195 (Thread-205): Parsing macros/etc/query.sql
2021-08-13 02:33:30.329220 (Thread-205): Parsing macros/etc/datetime.sql
2021-08-13 02:33:30.337688 (Thread-205): Parsing macros/etc/get_custom_alias.sql
2021-08-13 02:33:30.338620 (Thread-205): Parsing macros/etc/get_custom_database.sql
2021-08-13 02:33:30.340255 (Thread-205): Parsing macros/etc/get_custom_schema.sql
2021-08-13 02:33:30.342155 (Thread-205): Parsing macros/schema_tests/not_null.sql
2021-08-13 02:33:30.343743 (Thread-205): Parsing macros/schema_tests/accepted_values.sql
2021-08-13 02:33:30.346363 (Thread-205): Parsing macros/schema_tests/relationships.sql
2021-08-13 02:33:30.348269 (Thread-205): Parsing macros/schema_tests/unique.sql
2021-08-13 02:33:30.349967 (Thread-205): Parsing macros/adapters/common.sql
2021-08-13 02:33:30.604048 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheader".
2021-08-13 02:33:30.610444 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheadersalesreason".
2021-08-13 02:33:30.616197 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_store".
2021-08-13 02:33:30.621924 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_product".
2021-08-13 02:33:30.627950 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderdetail".
2021-08-13 02:33:30.634346 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_person".
2021-08-13 02:33:30.640718 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesperson".
2021-08-13 02:33:30.646398 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_customer".
2021-08-13 02:33:30.653077 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_employee".
2021-08-13 02:33:30.658695 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesreason".
2021-08-13 02:33:30.663885 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesterritory".
2021-08-13 02:33:30.669429 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.stg_personcreditcard".
2021-08-13 02:33:30.675031 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.dim_product".
2021-08-13 02:33:30.680523 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.dim_store".
2021-08-13 02:33:30.686164 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.fact_salesorderdetail".
2021-08-13 02:33:30.694228 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesperson".
2021-08-13 02:33:30.699902 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.dim_person".
2021-08-13 02:33:30.705492 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.dim_customer".
2021-08-13 02:33:30.710967 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.dim_personcreditcard".
2021-08-13 02:33:30.716422 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesterritory".
2021-08-13 02:33:30.722238 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesreason".
2021-08-13 02:33:30.728154 (Thread-205): Acquiring new bigquery connection "model.adventureworks_etl.dim_employee".
2021-08-13 02:33:30.737697 (Thread-205): Acquiring new bigquery connection "test.adventureworks_etl.test_product_quantity".
2021-08-13 02:33:30.743410 (Thread-205): Acquiring new bigquery connection "test.adventureworks_etl.test_order_quantity".
2021-08-13 02:33:30.894409 (Thread-206): handling status request
2021-08-13 02:33:30.894686 (Thread-206): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e2638b0>]}
2021-08-13 02:33:30.895189 (Thread-206): sending response (<Response 185 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:33:30.952422 (Thread-207): handling status request
2021-08-13 02:33:30.952744 (Thread-207): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d571d90>]}
2021-08-13 02:33:30.953354 (Thread-207): sending response (<Response 185 bytes [200 OK]>) to 10.0.29.160
2021-08-13 02:33:30.999543 (Thread-205): Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e46a370>]}
2021-08-13 02:33:31.001819 (Thread-208): handling status request
2021-08-13 02:33:31.002247 (Thread-208): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca94250>]}
2021-08-13 02:33:31.027426 (Thread-208): sending response (<Response 16863 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:33:32.316961 (Thread-209): handling status request
2021-08-13 02:33:32.317263 (Thread-209): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e36d1f0>]}
2021-08-13 02:33:32.318277 (Thread-209): sending response (<Response 16863 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:33:32.336007 (Thread-210): handling status request
2021-08-13 02:33:32.336217 (Thread-210): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e355220>]}
2021-08-13 02:33:32.337128 (Thread-210): sending response (<Response 16863 bytes [200 OK]>) to 10.0.13.71
2021-08-13 02:33:44.566085 (Thread-211): handling status request
2021-08-13 02:33:44.566382 (Thread-211): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d62bfd0>]}
2021-08-13 02:33:44.567447 (Thread-211): sending response (<Response 16863 bytes [200 OK]>) to 10.0.44.53
2021-08-13 02:33:44.670669 (Thread-212): handling status request
2021-08-13 02:33:44.670993 (Thread-212): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d62b070>]}
2021-08-13 02:33:44.672003 (Thread-212): sending response (<Response 16863 bytes [200 OK]>) to 10.0.4.54
2021-08-13 02:33:44.940415 (Thread-213): handling docs.generate request
2021-08-13 02:33:44.940695 (Thread-213): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5d7af220>]}
2021-08-13 02:33:44.941792 (Thread-213): Connection 'test.adventureworks_etl.test_order_quantity' was properly closed.
2021-08-13 02:33:46.698946 (Thread-213): sending response (<Response 138 bytes [200 OK]>) to 10.0.25.88
2021-08-13 02:33:46.739252 (MainThread): Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '7aab0e2f-ffc0-4c53-9ce9-8f10e2f61b1a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f739ffe5c40>]}
2021-08-13 02:33:46.739753 (MainThread): Found 22 models, 22 tests, 0 snapshots, 0 analyses, 156 macros, 0 operations, 0 seed files, 16 sources, 0 exposures
2021-08-13 02:33:46.742606 (MainThread): 
2021-08-13 02:33:46.742740 (MainThread): Acquiring new bigquery connection "master".
2021-08-13 02:33:46.745433 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_cursoanalytics-318700_dbt_jrgseverino".
2021-08-13 02:33:46.745547 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2021-08-13 02:33:46.943170 (MainThread): 02:33:46 | Concurrency: 1 threads (target='default')
2021-08-13 02:33:46.943303 (MainThread): 02:33:46 | 
2021-08-13 02:33:46.945563 (Thread-1): Began running node model.adventureworks_etl.stg_customer
2021-08-13 02:33:46.945765 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_customer".
2021-08-13 02:33:46.945850 (Thread-1): Compiling model.adventureworks_etl.stg_customer
2021-08-13 02:33:46.950317 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_customer"
2021-08-13 02:33:46.965815 (Thread-1): finished collecting timing info
2021-08-13 02:33:46.965952 (Thread-1): finished collecting timing info
2021-08-13 02:33:46.966061 (Thread-1): Finished running node model.adventureworks_etl.stg_customer
2021-08-13 02:33:46.966150 (Thread-1): Began running node model.adventureworks_etl.stg_employee
2021-08-13 02:33:46.966230 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_employee".
2021-08-13 02:33:46.966288 (Thread-1): Compiling model.adventureworks_etl.stg_employee
2021-08-13 02:33:46.968398 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_employee"
2021-08-13 02:33:46.982236 (Thread-1): finished collecting timing info
2021-08-13 02:33:46.982357 (Thread-1): finished collecting timing info
2021-08-13 02:33:46.982472 (Thread-1): Finished running node model.adventureworks_etl.stg_employee
2021-08-13 02:33:46.982561 (Thread-1): Began running node model.adventureworks_etl.stg_person
2021-08-13 02:33:46.982638 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_person".
2021-08-13 02:33:46.982694 (Thread-1): Compiling model.adventureworks_etl.stg_person
2021-08-13 02:33:46.984662 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_person"
2021-08-13 02:33:46.997746 (Thread-1): finished collecting timing info
2021-08-13 02:33:46.997861 (Thread-1): finished collecting timing info
2021-08-13 02:33:46.997958 (Thread-1): Finished running node model.adventureworks_etl.stg_person
2021-08-13 02:33:46.998039 (Thread-1): Began running node model.adventureworks_etl.stg_personcreditcard
2021-08-13 02:33:46.998114 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_personcreditcard".
2021-08-13 02:33:46.998168 (Thread-1): Compiling model.adventureworks_etl.stg_personcreditcard
2021-08-13 02:33:46.999945 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_personcreditcard"
2021-08-13 02:33:47.015535 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.015654 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.015752 (Thread-1): Finished running node model.adventureworks_etl.stg_personcreditcard
2021-08-13 02:33:47.015836 (Thread-1): Began running node model.adventureworks_etl.stg_product
2021-08-13 02:33:47.015910 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_product".
2021-08-13 02:33:47.015963 (Thread-1): Compiling model.adventureworks_etl.stg_product
2021-08-13 02:33:47.017820 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_product"
2021-08-13 02:33:47.034458 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.034577 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.034676 (Thread-1): Finished running node model.adventureworks_etl.stg_product
2021-08-13 02:33:47.034758 (Thread-1): Began running node model.adventureworks_etl.stg_salesperson
2021-08-13 02:33:47.034832 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesperson".
2021-08-13 02:33:47.034891 (Thread-1): Compiling model.adventureworks_etl.stg_salesperson
2021-08-13 02:33:47.036763 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesperson"
2021-08-13 02:33:47.052178 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.052307 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.052409 (Thread-1): Finished running node model.adventureworks_etl.stg_salesperson
2021-08-13 02:33:47.052494 (Thread-1): Began running node model.adventureworks_etl.stg_salesreason
2021-08-13 02:33:47.052571 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesreason".
2021-08-13 02:33:47.052626 (Thread-1): Compiling model.adventureworks_etl.stg_salesreason
2021-08-13 02:33:47.054573 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesreason"
2021-08-13 02:33:47.065972 (Thread-214): handling poll request
2021-08-13 02:33:47.066254 (Thread-214): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e27dca0>]}
2021-08-13 02:33:47.067854 (Thread-214): sending response (<Response 23453 bytes [200 OK]>) to 10.0.32.18
2021-08-13 02:33:47.068705 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.068828 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.068930 (Thread-1): Finished running node model.adventureworks_etl.stg_salesreason
2021-08-13 02:33:47.069015 (Thread-1): Began running node model.adventureworks_etl.stg_salesterritory
2021-08-13 02:33:47.069091 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesterritory".
2021-08-13 02:33:47.069146 (Thread-1): Compiling model.adventureworks_etl.stg_salesterritory
2021-08-13 02:33:47.071002 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesterritory"
2021-08-13 02:33:47.087168 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.087282 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.087380 (Thread-1): Finished running node model.adventureworks_etl.stg_salesterritory
2021-08-13 02:33:47.087462 (Thread-1): Began running node model.adventureworks_etl.stg_store
2021-08-13 02:33:47.087537 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_store".
2021-08-13 02:33:47.087592 (Thread-1): Compiling model.adventureworks_etl.stg_store
2021-08-13 02:33:47.089427 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_store"
2021-08-13 02:33:47.104719 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.104835 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.104933 (Thread-1): Finished running node model.adventureworks_etl.stg_store
2021-08-13 02:33:47.105016 (Thread-1): Began running node model.adventureworks_etl.stg_salesorderdetail
2021-08-13 02:33:47.105091 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderdetail".
2021-08-13 02:33:47.105145 (Thread-1): Compiling model.adventureworks_etl.stg_salesorderdetail
2021-08-13 02:33:47.107039 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesorderdetail"
2021-08-13 02:33:47.121807 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.121919 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.122017 (Thread-1): Finished running node model.adventureworks_etl.stg_salesorderdetail
2021-08-13 02:33:47.122100 (Thread-1): Began running node model.adventureworks_etl.stg_salesorderheader
2021-08-13 02:33:47.122175 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheader".
2021-08-13 02:33:47.122228 (Thread-1): Compiling model.adventureworks_etl.stg_salesorderheader
2021-08-13 02:33:47.124003 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesorderheader"
2021-08-13 02:33:47.139618 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.139748 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.139847 (Thread-1): Finished running node model.adventureworks_etl.stg_salesorderheader
2021-08-13 02:33:47.139930 (Thread-1): Began running node model.adventureworks_etl.stg_salesorderheadersalesreason
2021-08-13 02:33:47.140004 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheadersalesreason".
2021-08-13 02:33:47.140057 (Thread-1): Compiling model.adventureworks_etl.stg_salesorderheadersalesreason
2021-08-13 02:33:47.143490 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesorderheadersalesreason"
2021-08-13 02:33:47.157795 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.157909 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.158006 (Thread-1): Finished running node model.adventureworks_etl.stg_salesorderheadersalesreason
2021-08-13 02:33:47.158088 (Thread-1): Began running node model.adventureworks_etl.dim_customer
2021-08-13 02:33:47.158164 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_customer".
2021-08-13 02:33:47.158219 (Thread-1): Compiling model.adventureworks_etl.dim_customer
2021-08-13 02:33:47.160190 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_customer"
2021-08-13 02:33:47.174762 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.174880 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.174997 (Thread-1): Finished running node model.adventureworks_etl.dim_customer
2021-08-13 02:33:47.175082 (Thread-1): Began running node model.adventureworks_etl.dim_employee
2021-08-13 02:33:47.175159 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_employee".
2021-08-13 02:33:47.175214 (Thread-1): Compiling model.adventureworks_etl.dim_employee
2021-08-13 02:33:47.177161 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_employee"
2021-08-13 02:33:47.191016 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.191133 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.191233 (Thread-1): Finished running node model.adventureworks_etl.dim_employee
2021-08-13 02:33:47.191317 (Thread-1): Began running node model.adventureworks_etl.dim_person
2021-08-13 02:33:47.191392 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_person".
2021-08-13 02:33:47.191446 (Thread-1): Compiling model.adventureworks_etl.dim_person
2021-08-13 02:33:47.193346 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_person"
2021-08-13 02:33:47.208012 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.208131 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.208229 (Thread-1): Finished running node model.adventureworks_etl.dim_person
2021-08-13 02:33:47.208312 (Thread-1): Began running node model.adventureworks_etl.dim_personcreditcard
2021-08-13 02:33:47.208387 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_personcreditcard".
2021-08-13 02:33:47.208442 (Thread-1): Compiling model.adventureworks_etl.dim_personcreditcard
2021-08-13 02:33:47.210134 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_personcreditcard"
2021-08-13 02:33:47.224631 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.224751 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.224849 (Thread-1): Finished running node model.adventureworks_etl.dim_personcreditcard
2021-08-13 02:33:47.224935 (Thread-1): Began running node model.adventureworks_etl.dim_product
2021-08-13 02:33:47.225010 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_product".
2021-08-13 02:33:47.225065 (Thread-1): Compiling model.adventureworks_etl.dim_product
2021-08-13 02:33:47.227087 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_product"
2021-08-13 02:33:47.241958 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.242076 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.242175 (Thread-1): Finished running node model.adventureworks_etl.dim_product
2021-08-13 02:33:47.242260 (Thread-1): Began running node model.adventureworks_etl.dim_salesperson
2021-08-13 02:33:47.242335 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesperson".
2021-08-13 02:33:47.242390 (Thread-1): Compiling model.adventureworks_etl.dim_salesperson
2021-08-13 02:33:47.244340 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_salesperson"
2021-08-13 02:33:47.272430 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.272549 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.272649 (Thread-1): Finished running node model.adventureworks_etl.dim_salesperson
2021-08-13 02:33:47.272735 (Thread-1): Began running node model.adventureworks_etl.dim_salesreason
2021-08-13 02:33:47.272811 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesreason".
2021-08-13 02:33:47.272866 (Thread-1): Compiling model.adventureworks_etl.dim_salesreason
2021-08-13 02:33:47.274674 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_salesreason"
2021-08-13 02:33:47.292914 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.293035 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.293136 (Thread-1): Finished running node model.adventureworks_etl.dim_salesreason
2021-08-13 02:33:47.293221 (Thread-1): Began running node model.adventureworks_etl.dim_salesterritory
2021-08-13 02:33:47.293296 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesterritory".
2021-08-13 02:33:47.293351 (Thread-1): Compiling model.adventureworks_etl.dim_salesterritory
2021-08-13 02:33:47.295287 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_salesterritory"
2021-08-13 02:33:47.309179 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.309300 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.309401 (Thread-1): Finished running node model.adventureworks_etl.dim_salesterritory
2021-08-13 02:33:47.309486 (Thread-1): Began running node model.adventureworks_etl.dim_store
2021-08-13 02:33:47.309562 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_store".
2021-08-13 02:33:47.309617 (Thread-1): Compiling model.adventureworks_etl.dim_store
2021-08-13 02:33:47.311439 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_store"
2021-08-13 02:33:47.338499 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.338620 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.338721 (Thread-1): Finished running node model.adventureworks_etl.dim_store
2021-08-13 02:33:47.338806 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_customer_customer_sk
2021-08-13 02:33:47.338887 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_customer_customer_sk".
2021-08-13 02:33:47.338960 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_customer_customer_sk
2021-08-13 02:33:47.345370 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_customer_customer_sk"
2021-08-13 02:33:47.366762 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.366879 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.366997 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_customer_customer_sk
2021-08-13 02:33:47.367082 (Thread-1): Began running node test.adventureworks_etl.unique_dim_customer_customer_sk
2021-08-13 02:33:47.367161 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_customer_customer_sk".
2021-08-13 02:33:47.367215 (Thread-1): Compiling test.adventureworks_etl.unique_dim_customer_customer_sk
2021-08-13 02:33:47.373335 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_customer_customer_sk"
2021-08-13 02:33:47.384150 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.384265 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.384366 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_customer_customer_sk
2021-08-13 02:33:47.384450 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_employee_employee_sk
2021-08-13 02:33:47.384527 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_employee_employee_sk".
2021-08-13 02:33:47.384583 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_employee_employee_sk
2021-08-13 02:33:47.387324 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_employee_employee_sk"
2021-08-13 02:33:47.409932 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.410070 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.410183 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_employee_employee_sk
2021-08-13 02:33:47.410273 (Thread-1): Began running node test.adventureworks_etl.unique_dim_employee_employee_sk
2021-08-13 02:33:47.410357 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_employee_employee_sk".
2021-08-13 02:33:47.410415 (Thread-1): Compiling test.adventureworks_etl.unique_dim_employee_employee_sk
2021-08-13 02:33:47.413370 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_employee_employee_sk"
2021-08-13 02:33:47.423391 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.423521 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.423630 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_employee_employee_sk
2021-08-13 02:33:47.423719 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_person_person_sk
2021-08-13 02:33:47.423800 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_person_person_sk".
2021-08-13 02:33:47.423857 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_person_person_sk
2021-08-13 02:33:47.427702 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_person_person_sk"
2021-08-13 02:33:47.456265 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.456404 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.456517 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_person_person_sk
2021-08-13 02:33:47.456605 (Thread-1): Began running node test.adventureworks_etl.unique_dim_person_person_sk
2021-08-13 02:33:47.456688 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_person_person_sk".
2021-08-13 02:33:47.456744 (Thread-1): Compiling test.adventureworks_etl.unique_dim_person_person_sk
2021-08-13 02:33:47.459503 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_person_person_sk"
2021-08-13 02:33:47.471877 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.471997 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.472102 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_person_person_sk
2021-08-13 02:33:47.472188 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_personcreditcard_creditcard_sk
2021-08-13 02:33:47.472268 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_personcreditcard_creditcard_sk".
2021-08-13 02:33:47.472326 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_personcreditcard_creditcard_sk
2021-08-13 02:33:47.475073 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_personcreditcard_creditcard_sk"
2021-08-13 02:33:47.497666 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.497787 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.497889 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_personcreditcard_creditcard_sk
2021-08-13 02:33:47.497975 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_personcreditcard_person_sk
2021-08-13 02:33:47.498054 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_personcreditcard_person_sk".
2021-08-13 02:33:47.498108 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_personcreditcard_person_sk
2021-08-13 02:33:47.500758 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_personcreditcard_person_sk"
2021-08-13 02:33:47.511640 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.511755 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.511856 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_personcreditcard_person_sk
2021-08-13 02:33:47.511939 (Thread-1): Began running node test.adventureworks_etl.unique_dim_personcreditcard_creditcard_sk
2021-08-13 02:33:47.512016 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_personcreditcard_creditcard_sk".
2021-08-13 02:33:47.512072 (Thread-1): Compiling test.adventureworks_etl.unique_dim_personcreditcard_creditcard_sk
2021-08-13 02:33:47.514745 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_personcreditcard_creditcard_sk"
2021-08-13 02:33:47.526724 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.526859 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.526990 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_personcreditcard_creditcard_sk
2021-08-13 02:33:47.527081 (Thread-1): Began running node test.adventureworks_etl.unique_dim_personcreditcard_person_sk
2021-08-13 02:33:47.527162 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_personcreditcard_person_sk".
2021-08-13 02:33:47.527219 (Thread-1): Compiling test.adventureworks_etl.unique_dim_personcreditcard_person_sk
2021-08-13 02:33:47.529909 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_personcreditcard_person_sk"
2021-08-13 02:33:47.541837 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.541964 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.542070 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_personcreditcard_person_sk
2021-08-13 02:33:47.542157 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_product_product_sk
2021-08-13 02:33:47.542237 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_product_product_sk".
2021-08-13 02:33:47.542293 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_product_product_sk
2021-08-13 02:33:47.545145 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_product_product_sk"
2021-08-13 02:33:47.568474 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.568617 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.568731 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_product_product_sk
2021-08-13 02:33:47.568821 (Thread-1): Began running node test.adventureworks_etl.test_product_quantity
2021-08-13 02:33:47.568911 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.test_product_quantity".
2021-08-13 02:33:47.568973 (Thread-1): Compiling test.adventureworks_etl.test_product_quantity
2021-08-13 02:33:47.578847 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.test_product_quantity"
2021-08-13 02:33:47.597270 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.597403 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.597513 (Thread-1): Finished running node test.adventureworks_etl.test_product_quantity
2021-08-13 02:33:47.597602 (Thread-1): Began running node test.adventureworks_etl.unique_dim_product_product_sk
2021-08-13 02:33:47.597690 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_product_product_sk".
2021-08-13 02:33:47.597749 (Thread-1): Compiling test.adventureworks_etl.unique_dim_product_product_sk
2021-08-13 02:33:47.600681 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_product_product_sk"
2021-08-13 02:33:47.612055 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.612175 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.612282 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_product_product_sk
2021-08-13 02:33:47.612367 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_salesperson_salesperson_sk
2021-08-13 02:33:47.612446 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_salesperson_salesperson_sk".
2021-08-13 02:33:47.612503 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_salesperson_salesperson_sk
2021-08-13 02:33:47.615373 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_salesperson_salesperson_sk"
2021-08-13 02:33:47.641222 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.641370 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.641487 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_salesperson_salesperson_sk
2021-08-13 02:33:47.641579 (Thread-1): Began running node test.adventureworks_etl.unique_dim_salesperson_salesperson_sk
2021-08-13 02:33:47.641665 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_salesperson_salesperson_sk".
2021-08-13 02:33:47.641726 (Thread-1): Compiling test.adventureworks_etl.unique_dim_salesperson_salesperson_sk
2021-08-13 02:33:47.644637 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_salesperson_salesperson_sk"
2021-08-13 02:33:47.656299 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.656433 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.656543 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_salesperson_salesperson_sk
2021-08-13 02:33:47.656631 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_salesreason_salesreason_sk
2021-08-13 02:33:47.656713 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_salesreason_salesreason_sk".
2021-08-13 02:33:47.656771 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_salesreason_salesreason_sk
2021-08-13 02:33:47.659628 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_salesreason_salesreason_sk"
2021-08-13 02:33:47.681720 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.681841 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.681946 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_salesreason_salesreason_sk
2021-08-13 02:33:47.682034 (Thread-1): Began running node test.adventureworks_etl.unique_dim_salesreason_salesreason_sk
2021-08-13 02:33:47.682115 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_salesreason_salesreason_sk".
2021-08-13 02:33:47.682171 (Thread-1): Compiling test.adventureworks_etl.unique_dim_salesreason_salesreason_sk
2021-08-13 02:33:47.684935 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_salesreason_salesreason_sk"
2021-08-13 02:33:47.695757 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.695877 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.695977 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_salesreason_salesreason_sk
2021-08-13 02:33:47.696063 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_salesterritory_territory_sk
2021-08-13 02:33:47.696142 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_salesterritory_territory_sk".
2021-08-13 02:33:47.696198 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_salesterritory_territory_sk
2021-08-13 02:33:47.698975 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_salesterritory_territory_sk"
2021-08-13 02:33:47.720681 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.720816 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.720927 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_salesterritory_territory_sk
2021-08-13 02:33:47.721026 (Thread-1): Began running node test.adventureworks_etl.unique_dim_salesterritory_territory_sk
2021-08-13 02:33:47.721113 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_salesterritory_territory_sk".
2021-08-13 02:33:47.721172 (Thread-1): Compiling test.adventureworks_etl.unique_dim_salesterritory_territory_sk
2021-08-13 02:33:47.724318 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_salesterritory_territory_sk"
2021-08-13 02:33:47.737263 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.737386 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.737491 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_salesterritory_territory_sk
2021-08-13 02:33:47.737578 (Thread-1): Began running node model.adventureworks_etl.fact_salesorderdetail
2021-08-13 02:33:47.737660 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.fact_salesorderdetail".
2021-08-13 02:33:47.737718 (Thread-1): Compiling model.adventureworks_etl.fact_salesorderdetail
2021-08-13 02:33:47.743370 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.fact_salesorderdetail"
2021-08-13 02:33:47.772509 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.772638 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.772741 (Thread-1): Finished running node model.adventureworks_etl.fact_salesorderdetail
2021-08-13 02:33:47.772830 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_store_store_sk
2021-08-13 02:33:47.772909 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_store_store_sk".
2021-08-13 02:33:47.772967 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_store_store_sk
2021-08-13 02:33:47.775768 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_store_store_sk"
2021-08-13 02:33:47.801456 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.801622 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.801741 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_store_store_sk
2021-08-13 02:33:47.801832 (Thread-1): Began running node test.adventureworks_etl.unique_dim_store_store_sk
2021-08-13 02:33:47.801918 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_store_store_sk".
2021-08-13 02:33:47.801980 (Thread-1): Compiling test.adventureworks_etl.unique_dim_store_store_sk
2021-08-13 02:33:47.805130 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_store_store_sk"
2021-08-13 02:33:47.816255 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.816379 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.816487 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_store_store_sk
2021-08-13 02:33:47.816575 (Thread-1): Began running node test.adventureworks_etl.test_order_quantity
2021-08-13 02:33:47.816658 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.test_order_quantity".
2021-08-13 02:33:47.816716 (Thread-1): Compiling test.adventureworks_etl.test_order_quantity
2021-08-13 02:33:47.819697 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.test_order_quantity"
2021-08-13 02:33:47.838188 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.838309 (Thread-1): finished collecting timing info
2021-08-13 02:33:47.838412 (Thread-1): Finished running node test.adventureworks_etl.test_order_quantity
2021-08-13 02:33:47.839345 (MainThread): Connection 'master' was properly closed.
2021-08-13 02:33:47.839449 (MainThread): Connection 'test.adventureworks_etl.test_order_quantity' was properly closed.
2021-08-13 02:33:47.907882 (MainThread): 02:33:47 | Done.
2021-08-13 02:33:47.954437 (MainThread): Acquiring new bigquery connection "generate_catalog".
2021-08-13 02:33:47.954552 (MainThread): 02:33:47 | Building catalog
2021-08-13 02:33:47.958542 (MainThread): Opening a new connection, currently in state init
2021-08-13 02:33:48.196950 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "cursoanalytics-318700.information_schema".
2021-08-13 02:33:48.210312 (ThreadPoolExecutor-1_0): Opening a new connection, currently in state init
2021-08-13 02:33:48.214720 (ThreadPoolExecutor-1_0): On cursoanalytics-318700.information_schema: 
    with tables as (
        select
            project_id as table_database,
            dataset_id as table_schema,
            table_id as original_table_name,

            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,

            row_count,
            size_bytes as size_bytes,
            case
                when type = 1 then 'table'
                when type = 2 then 'view'
                else 'external'
            end as table_type,

            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,
            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,
            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name

        from `cursoanalytics-318700`.`dbt_jrgseverino`.__TABLES__
        where (upper(dataset_id) = upper('dbt_jrgseverino'))
    ),

    extracted as (

        select *,
            case
                when is_date_shard then shard_base_name
                else original_table_name
            end as table_name

        from tables

    ),

    unsharded_tables as (

        select
            table_database,
            table_schema,
            table_name,
            coalesce(table_type, 'external') as table_type,
            is_date_shard,

            struct(
                min(shard_name) as shard_min,
                max(shard_name) as shard_max,
                count(*) as shard_count
            ) as table_shards,

            sum(size_bytes) as size_bytes,
            sum(row_count) as row_count,

            max(relation_id) as relation_id

        from extracted
        group by 1,2,3,4,5

    ),

    info_schema_columns as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            table_catalog as table_database,
            table_schema,
            table_name,

            -- use the "real" column name from the paths query below
            column_name as base_column_name,
            ordinal_position as column_index,

            is_partitioning_column,
            clustering_ordinal_position

        from `cursoanalytics-318700`.`dbt_jrgseverino`.INFORMATION_SCHEMA.COLUMNS
        where ordinal_position is not null

    ),

    info_schema_column_paths as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            field_path as column_name,
            data_type as column_type,
            column_name as base_column_name,
            description as column_comment

        from `cursoanalytics-318700`.`dbt_jrgseverino`.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS

    ),

    columns as (

        select * except (base_column_name)
        from info_schema_columns
        join info_schema_column_paths using (relation_id, base_column_name)

    ),

    column_stats as (

        select
            table_database,
            table_schema,
            table_name,
            max(relation_id) as relation_id,
            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,
            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,
            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,
            array_to_string(
                array_agg(
                    case
                        when clustering_ordinal_position is not null then column_name
                        else null
                    end ignore nulls
                    order by clustering_ordinal_position
                ), ', '
            ) as clustering_columns

        from columns
        group by 1,2,3

    )

    select
        unsharded_tables.table_database,
        unsharded_tables.table_schema,
        case
            when is_date_shard then concat(unsharded_tables.table_name, '*')
            else unsharded_tables.table_name
        end as table_name,
        unsharded_tables.table_type,

        -- coalesce name and type for External tables - these columns are not
        -- present in the COLUMN_FIELD_PATHS resultset
        coalesce(columns.column_name, '<unknown>') as column_name,
        -- invent a row number to account for nested fields -- BQ does
        -- not treat these nested properties as independent fields
        row_number() over (
            partition by relation_id
            order by columns.column_index, columns.column_name
        ) as column_index,
        coalesce(columns.column_type, '<unknown>') as column_type,
        columns.column_comment,

        'Shard count' as `stats__date_shards__label`,
        table_shards.shard_count as `stats__date_shards__value`,
        'The number of date shards in this table' as `stats__date_shards__description`,
        is_date_shard as `stats__date_shards__include`,

        'Shard (min)' as `stats__date_shard_min__label`,
        table_shards.shard_min as `stats__date_shard_min__value`,
        'The first date shard in this table' as `stats__date_shard_min__description`,
        is_date_shard as `stats__date_shard_min__include`,

        'Shard (max)' as `stats__date_shard_max__label`,
        table_shards.shard_max as `stats__date_shard_max__value`,
        'The last date shard in this table' as `stats__date_shard_max__description`,
        is_date_shard as `stats__date_shard_max__include`,

        '# Rows' as `stats__num_rows__label`,
        row_count as `stats__num_rows__value`,
        'Approximate count of rows in this table' as `stats__num_rows__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,

        'Approximate Size' as `stats__num_bytes__label`,
        size_bytes as `stats__num_bytes__value`,
        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,

        'Partitioned By' as `stats__partitioning_type__label`,
        partition_column as `stats__partitioning_type__value`,
        'The partitioning column for this table' as `stats__partitioning_type__description`,
        is_partitioned as `stats__partitioning_type__include`,

        'Clustered By' as `stats__clustering_fields__label`,
        clustering_columns as `stats__clustering_fields__value`,
        'The clustering columns for this table' as `stats__clustering_fields__description`,
        is_clustered as `stats__clustering_fields__include`

    -- join using relation_id (an actual relation, not a shard prefix) to make
    -- sure that column metadata is picked up through the join. This will only
    -- return the column information for the "max" table in a date-sharded table set
    from unsharded_tables
    left join columns using (relation_id)
    left join column_stats using (relation_id)
  
2021-08-13 02:33:48.409394 (Thread-215): handling poll request
2021-08-13 02:33:48.409680 (Thread-215): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca94a00>]}
2021-08-13 02:33:48.414736 (Thread-215): sending response (<Response 133840 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:33:49.782456 (Thread-216): handling poll request
2021-08-13 02:33:49.782741 (Thread-216): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5caecbb0>]}
2021-08-13 02:33:49.783325 (Thread-216): sending response (<Response 287 bytes [200 OK]>) to 10.0.45.128
2021-08-13 02:33:51.149781 (Thread-217): handling poll request
2021-08-13 02:33:51.150093 (Thread-217): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5caec730>]}
2021-08-13 02:33:51.150649 (Thread-217): sending response (<Response 287 bytes [200 OK]>) to 10.0.32.18
2021-08-13 02:33:52.536079 (Thread-218): handling poll request
2021-08-13 02:33:52.536366 (Thread-218): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5caec400>]}
2021-08-13 02:33:52.536873 (Thread-218): sending response (<Response 287 bytes [200 OK]>) to 10.0.42.208
2021-08-13 02:33:53.870555 (Thread-219): handling poll request
2021-08-13 02:33:53.870849 (Thread-219): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5caec2b0>]}
2021-08-13 02:33:53.871386 (Thread-219): sending response (<Response 287 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:33:55.937272 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "cursoanalytics-318700.information_schema".
2021-08-13 02:33:55.938706 (ThreadPoolExecutor-1_0): Opening a new connection, currently in state closed
2021-08-13 02:33:55.943233 (ThreadPoolExecutor-1_0): On cursoanalytics-318700.information_schema: 
    with tables as (
        select
            project_id as table_database,
            dataset_id as table_schema,
            table_id as original_table_name,

            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,

            row_count,
            size_bytes as size_bytes,
            case
                when type = 1 then 'table'
                when type = 2 then 'view'
                else 'external'
            end as table_type,

            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,
            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,
            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name

        from `cursoanalytics-318700`.`adventureworks_etl`.__TABLES__
        where (upper(dataset_id) = upper('adventureworks_etl'))
    ),

    extracted as (

        select *,
            case
                when is_date_shard then shard_base_name
                else original_table_name
            end as table_name

        from tables

    ),

    unsharded_tables as (

        select
            table_database,
            table_schema,
            table_name,
            coalesce(table_type, 'external') as table_type,
            is_date_shard,

            struct(
                min(shard_name) as shard_min,
                max(shard_name) as shard_max,
                count(*) as shard_count
            ) as table_shards,

            sum(size_bytes) as size_bytes,
            sum(row_count) as row_count,

            max(relation_id) as relation_id

        from extracted
        group by 1,2,3,4,5

    ),

    info_schema_columns as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            table_catalog as table_database,
            table_schema,
            table_name,

            -- use the "real" column name from the paths query below
            column_name as base_column_name,
            ordinal_position as column_index,

            is_partitioning_column,
            clustering_ordinal_position

        from `cursoanalytics-318700`.`adventureworks_etl`.INFORMATION_SCHEMA.COLUMNS
        where ordinal_position is not null

    ),

    info_schema_column_paths as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            field_path as column_name,
            data_type as column_type,
            column_name as base_column_name,
            description as column_comment

        from `cursoanalytics-318700`.`adventureworks_etl`.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS

    ),

    columns as (

        select * except (base_column_name)
        from info_schema_columns
        join info_schema_column_paths using (relation_id, base_column_name)

    ),

    column_stats as (

        select
            table_database,
            table_schema,
            table_name,
            max(relation_id) as relation_id,
            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,
            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,
            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,
            array_to_string(
                array_agg(
                    case
                        when clustering_ordinal_position is not null then column_name
                        else null
                    end ignore nulls
                    order by clustering_ordinal_position
                ), ', '
            ) as clustering_columns

        from columns
        group by 1,2,3

    )

    select
        unsharded_tables.table_database,
        unsharded_tables.table_schema,
        case
            when is_date_shard then concat(unsharded_tables.table_name, '*')
            else unsharded_tables.table_name
        end as table_name,
        unsharded_tables.table_type,

        -- coalesce name and type for External tables - these columns are not
        -- present in the COLUMN_FIELD_PATHS resultset
        coalesce(columns.column_name, '<unknown>') as column_name,
        -- invent a row number to account for nested fields -- BQ does
        -- not treat these nested properties as independent fields
        row_number() over (
            partition by relation_id
            order by columns.column_index, columns.column_name
        ) as column_index,
        coalesce(columns.column_type, '<unknown>') as column_type,
        columns.column_comment,

        'Shard count' as `stats__date_shards__label`,
        table_shards.shard_count as `stats__date_shards__value`,
        'The number of date shards in this table' as `stats__date_shards__description`,
        is_date_shard as `stats__date_shards__include`,

        'Shard (min)' as `stats__date_shard_min__label`,
        table_shards.shard_min as `stats__date_shard_min__value`,
        'The first date shard in this table' as `stats__date_shard_min__description`,
        is_date_shard as `stats__date_shard_min__include`,

        'Shard (max)' as `stats__date_shard_max__label`,
        table_shards.shard_max as `stats__date_shard_max__value`,
        'The last date shard in this table' as `stats__date_shard_max__description`,
        is_date_shard as `stats__date_shard_max__include`,

        '# Rows' as `stats__num_rows__label`,
        row_count as `stats__num_rows__value`,
        'Approximate count of rows in this table' as `stats__num_rows__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,

        'Approximate Size' as `stats__num_bytes__label`,
        size_bytes as `stats__num_bytes__value`,
        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,

        'Partitioned By' as `stats__partitioning_type__label`,
        partition_column as `stats__partitioning_type__value`,
        'The partitioning column for this table' as `stats__partitioning_type__description`,
        is_partitioned as `stats__partitioning_type__include`,

        'Clustered By' as `stats__clustering_fields__label`,
        clustering_columns as `stats__clustering_fields__value`,
        'The clustering columns for this table' as `stats__clustering_fields__description`,
        is_clustered as `stats__clustering_fields__include`

    -- join using relation_id (an actual relation, not a shard prefix) to make
    -- sure that column metadata is picked up through the join. This will only
    -- return the column information for the "max" table in a date-sharded table set
    from unsharded_tables
    left join columns using (relation_id)
    left join column_stats using (relation_id)
  
2021-08-13 02:33:56.343811 (Thread-220): handling poll request
2021-08-13 02:33:56.344095 (Thread-220): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5caec880>]}
2021-08-13 02:33:56.344681 (Thread-220): sending response (<Response 8264 bytes [200 OK]>) to 10.0.25.88
2021-08-13 02:33:58.194567 (Thread-221): handling poll request
2021-08-13 02:33:58.194887 (Thread-221): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5caecd60>]}
2021-08-13 02:33:58.195450 (Thread-221): sending response (<Response 288 bytes [200 OK]>) to 10.0.7.69
2021-08-13 02:34:00.241377 (Thread-222): handling poll request
2021-08-13 02:34:00.241675 (Thread-222): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5caeccd0>]}
2021-08-13 02:34:00.242210 (Thread-222): sending response (<Response 288 bytes [200 OK]>) to 10.0.6.1
2021-08-13 02:34:00.555794 (MainThread): 02:34:00 | Catalog written to /usr/src/develop/user-31714/environment-37304/repository-30612/target/catalog.json
2021-08-13 02:34:02.207743 (Thread-223): handling poll request
2021-08-13 02:34:02.208106 (Thread-223): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e411be0>]}
2021-08-13 02:34:02.210542 (Thread-223): sending response (<Response 61979 bytes [200 OK]>) to 10.0.44.53
2021-08-13 02:34:03.075192 (Thread-224): handling status request
2021-08-13 02:34:03.075491 (Thread-224): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e417820>]}
2021-08-13 02:34:03.076489 (Thread-224): sending response (<Response 16863 bytes [200 OK]>) to 10.0.32.18
2021-08-13 02:34:03.187836 (Thread-225): handling status request
2021-08-13 02:34:03.188115 (Thread-225): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e41c280>]}
2021-08-13 02:34:03.189038 (Thread-225): sending response (<Response 16863 bytes [200 OK]>) to 10.0.13.71
2021-08-13 02:34:03.348115 (Thread-226): handling status request
2021-08-13 02:34:03.348438 (Thread-226): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e41ca60>]}
2021-08-13 02:34:03.349381 (Thread-226): sending response (<Response 16863 bytes [200 OK]>) to 10.0.13.71
2021-08-13 02:34:03.586860 (Thread-227): handling status request
2021-08-13 02:34:03.587171 (Thread-227): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e44c100>]}
2021-08-13 02:34:03.588096 (Thread-227): sending response (<Response 16863 bytes [200 OK]>) to 10.0.25.88
2021-08-13 02:39:28.180390 (Thread-228): handling status request
2021-08-13 02:39:28.180676 (Thread-228): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e421250>]}
2021-08-13 02:39:28.181594 (Thread-228): sending response (<Response 16863 bytes [200 OK]>) to 10.0.42.208
2021-08-13 02:39:28.241894 (Thread-229): handling status request
2021-08-13 02:39:28.242155 (Thread-229): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e4174c0>]}
2021-08-13 02:39:28.243058 (Thread-229): sending response (<Response 16863 bytes [200 OK]>) to 10.0.44.53
2021-08-13 02:39:28.260447 (Thread-230): handling status request
2021-08-13 02:39:28.260639 (Thread-230): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca4c190>]}
2021-08-13 02:39:28.261462 (Thread-230): sending response (<Response 16863 bytes [200 OK]>) to 10.0.44.53
2021-08-13 02:39:28.304354 (Thread-231): handling status request
2021-08-13 02:39:28.304615 (Thread-231): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca4c1f0>]}
2021-08-13 02:39:28.305531 (Thread-231): sending response (<Response 16863 bytes [200 OK]>) to 10.0.45.128
2021-08-13 02:39:28.329038 (Thread-232): handling status request
2021-08-13 02:39:28.329249 (Thread-232): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca50040>]}
2021-08-13 02:39:28.330088 (Thread-232): sending response (<Response 16863 bytes [200 OK]>) to 10.0.44.81
2021-08-13 02:39:28.345006 (Thread-233): handling ps request
2021-08-13 02:39:28.345203 (Thread-233): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca564f0>]}
2021-08-13 02:39:28.346054 (Thread-233): sending response (<Response 5018 bytes [200 OK]>) to 10.0.6.1
2021-08-13 02:39:29.239366 (Thread-234): handling poll request
2021-08-13 02:39:29.239661 (Thread-234): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca5ab80>]}
2021-08-13 02:39:29.245527 (Thread-234): sending response (<Response 226680 bytes [200 OK]>) to 10.0.4.54
2021-08-13 02:39:29.927432 (Thread-235): handling status request
2021-08-13 02:39:29.927732 (Thread-235): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca509d0>]}
2021-08-13 02:39:29.928694 (Thread-235): sending response (<Response 16863 bytes [200 OK]>) to 10.0.13.71
2021-08-13 02:39:30.032306 (Thread-236): handling status request
2021-08-13 02:39:30.032639 (Thread-236): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca4c1f0>]}
2021-08-13 02:39:30.033600 (Thread-236): sending response (<Response 16863 bytes [200 OK]>) to 10.0.32.18
2021-08-13 02:39:30.051430 (Thread-237): handling status request
2021-08-13 02:39:30.051669 (Thread-237): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e418ca0>]}
2021-08-13 02:39:30.074299 (Thread-237): sending response (<Response 16863 bytes [200 OK]>) to 10.0.30.255
2021-08-13 02:39:41.148739 (Thread-238): handling status request
2021-08-13 02:39:41.149032 (Thread-238): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e44c160>]}
2021-08-13 02:39:41.149967 (Thread-238): sending response (<Response 16863 bytes [200 OK]>) to 10.0.25.88
2021-08-13 02:39:41.243543 (Thread-239): handling status request
2021-08-13 02:39:41.243821 (Thread-239): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e421bb0>]}
2021-08-13 02:39:41.244752 (Thread-239): sending response (<Response 16863 bytes [200 OK]>) to 10.0.10.107
2021-08-13 02:39:41.490172 (Thread-240): handling docs.generate request
2021-08-13 02:39:41.490488 (Thread-240): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5e421b50>]}
2021-08-13 02:39:43.267522 (Thread-240): sending response (<Response 138 bytes [200 OK]>) to 10.0.7.69
2021-08-13 02:39:43.307386 (MainThread): Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '0a003234-a95c-49a6-aa89-28522858d30a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f3b3a32fca0>]}
2021-08-13 02:39:43.307923 (MainThread): Found 22 models, 22 tests, 0 snapshots, 0 analyses, 156 macros, 0 operations, 0 seed files, 16 sources, 0 exposures
2021-08-13 02:39:43.310839 (MainThread): 
2021-08-13 02:39:43.310996 (MainThread): Acquiring new bigquery connection "master".
2021-08-13 02:39:43.313695 (ThreadPoolExecutor-0_0): Acquiring new bigquery connection "list_cursoanalytics-318700_dbt_jrgseverino".
2021-08-13 02:39:43.313797 (ThreadPoolExecutor-0_0): Opening a new connection, currently in state init
2021-08-13 02:39:43.515047 (MainThread): 02:39:43 | Concurrency: 1 threads (target='default')
2021-08-13 02:39:43.515177 (MainThread): 02:39:43 | 
2021-08-13 02:39:43.517442 (Thread-1): Began running node model.adventureworks_etl.stg_customer
2021-08-13 02:39:43.517615 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_customer".
2021-08-13 02:39:43.517694 (Thread-1): Compiling model.adventureworks_etl.stg_customer
2021-08-13 02:39:43.522160 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_customer"
2021-08-13 02:39:43.538478 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.538624 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.538739 (Thread-1): Finished running node model.adventureworks_etl.stg_customer
2021-08-13 02:39:43.538826 (Thread-1): Began running node model.adventureworks_etl.stg_employee
2021-08-13 02:39:43.538930 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_employee".
2021-08-13 02:39:43.538991 (Thread-1): Compiling model.adventureworks_etl.stg_employee
2021-08-13 02:39:43.541175 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_employee"
2021-08-13 02:39:43.555387 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.555512 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.555613 (Thread-1): Finished running node model.adventureworks_etl.stg_employee
2021-08-13 02:39:43.555693 (Thread-1): Began running node model.adventureworks_etl.stg_person
2021-08-13 02:39:43.555779 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_person".
2021-08-13 02:39:43.555834 (Thread-1): Compiling model.adventureworks_etl.stg_person
2021-08-13 02:39:43.557775 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_person"
2021-08-13 02:39:43.576583 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.576708 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.576805 (Thread-1): Finished running node model.adventureworks_etl.stg_person
2021-08-13 02:39:43.576885 (Thread-1): Began running node model.adventureworks_etl.stg_personcreditcard
2021-08-13 02:39:43.576959 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_personcreditcard".
2021-08-13 02:39:43.577012 (Thread-1): Compiling model.adventureworks_etl.stg_personcreditcard
2021-08-13 02:39:43.578753 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_personcreditcard"
2021-08-13 02:39:43.598612 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.598745 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.598845 (Thread-1): Finished running node model.adventureworks_etl.stg_personcreditcard
2021-08-13 02:39:43.598941 (Thread-1): Began running node model.adventureworks_etl.stg_product
2021-08-13 02:39:43.599020 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_product".
2021-08-13 02:39:43.599074 (Thread-1): Compiling model.adventureworks_etl.stg_product
2021-08-13 02:39:43.601064 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_product"
2021-08-13 02:39:43.618665 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.618796 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.618931 (Thread-1): Finished running node model.adventureworks_etl.stg_product
2021-08-13 02:39:43.619030 (Thread-1): Began running node model.adventureworks_etl.stg_salesperson
2021-08-13 02:39:43.619111 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesperson".
2021-08-13 02:39:43.619167 (Thread-1): Compiling model.adventureworks_etl.stg_salesperson
2021-08-13 02:39:43.621088 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesperson"
2021-08-13 02:39:43.628484 (Thread-241): handling poll request
2021-08-13 02:39:43.628792 (Thread-241): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca7cd90>]}
2021-08-13 02:39:43.630219 (Thread-241): sending response (<Response 20295 bytes [200 OK]>) to 10.0.7.69
2021-08-13 02:39:43.635460 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.635585 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.635686 (Thread-1): Finished running node model.adventureworks_etl.stg_salesperson
2021-08-13 02:39:43.635777 (Thread-1): Began running node model.adventureworks_etl.stg_salesreason
2021-08-13 02:39:43.635870 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesreason".
2021-08-13 02:39:43.635938 (Thread-1): Compiling model.adventureworks_etl.stg_salesreason
2021-08-13 02:39:43.637967 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesreason"
2021-08-13 02:39:43.653303 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.653425 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.653523 (Thread-1): Finished running node model.adventureworks_etl.stg_salesreason
2021-08-13 02:39:43.653603 (Thread-1): Began running node model.adventureworks_etl.stg_salesterritory
2021-08-13 02:39:43.653678 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesterritory".
2021-08-13 02:39:43.653733 (Thread-1): Compiling model.adventureworks_etl.stg_salesterritory
2021-08-13 02:39:43.655632 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesterritory"
2021-08-13 02:39:43.670558 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.670672 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.670768 (Thread-1): Finished running node model.adventureworks_etl.stg_salesterritory
2021-08-13 02:39:43.670847 (Thread-1): Began running node model.adventureworks_etl.stg_store
2021-08-13 02:39:43.670944 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_store".
2021-08-13 02:39:43.670999 (Thread-1): Compiling model.adventureworks_etl.stg_store
2021-08-13 02:39:43.672856 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_store"
2021-08-13 02:39:43.693931 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.694046 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.694140 (Thread-1): Finished running node model.adventureworks_etl.stg_store
2021-08-13 02:39:43.694218 (Thread-1): Began running node model.adventureworks_etl.stg_salesorderdetail
2021-08-13 02:39:43.694293 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderdetail".
2021-08-13 02:39:43.694346 (Thread-1): Compiling model.adventureworks_etl.stg_salesorderdetail
2021-08-13 02:39:43.696244 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesorderdetail"
2021-08-13 02:39:43.711368 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.711482 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.711577 (Thread-1): Finished running node model.adventureworks_etl.stg_salesorderdetail
2021-08-13 02:39:43.711658 (Thread-1): Began running node model.adventureworks_etl.stg_salesorderheader
2021-08-13 02:39:43.711733 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheader".
2021-08-13 02:39:43.711788 (Thread-1): Compiling model.adventureworks_etl.stg_salesorderheader
2021-08-13 02:39:43.713555 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesorderheader"
2021-08-13 02:39:43.730525 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.730640 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.730733 (Thread-1): Finished running node model.adventureworks_etl.stg_salesorderheader
2021-08-13 02:39:43.730810 (Thread-1): Began running node model.adventureworks_etl.stg_salesorderheadersalesreason
2021-08-13 02:39:43.730885 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheadersalesreason".
2021-08-13 02:39:43.730959 (Thread-1): Compiling model.adventureworks_etl.stg_salesorderheadersalesreason
2021-08-13 02:39:43.734306 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.stg_salesorderheadersalesreason"
2021-08-13 02:39:43.750280 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.750403 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.750501 (Thread-1): Finished running node model.adventureworks_etl.stg_salesorderheadersalesreason
2021-08-13 02:39:43.750580 (Thread-1): Began running node model.adventureworks_etl.dim_customer
2021-08-13 02:39:43.750658 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_customer".
2021-08-13 02:39:43.750716 (Thread-1): Compiling model.adventureworks_etl.dim_customer
2021-08-13 02:39:43.752726 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_customer"
2021-08-13 02:39:43.768844 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.768968 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.769068 (Thread-1): Finished running node model.adventureworks_etl.dim_customer
2021-08-13 02:39:43.769150 (Thread-1): Began running node model.adventureworks_etl.dim_employee
2021-08-13 02:39:43.769226 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_employee".
2021-08-13 02:39:43.769282 (Thread-1): Compiling model.adventureworks_etl.dim_employee
2021-08-13 02:39:43.772028 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_employee"
2021-08-13 02:39:43.787173 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.787306 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.787411 (Thread-1): Finished running node model.adventureworks_etl.dim_employee
2021-08-13 02:39:43.787492 (Thread-1): Began running node model.adventureworks_etl.dim_person
2021-08-13 02:39:43.787570 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_person".
2021-08-13 02:39:43.787626 (Thread-1): Compiling model.adventureworks_etl.dim_person
2021-08-13 02:39:43.789626 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_person"
2021-08-13 02:39:43.804771 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.804896 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.804999 (Thread-1): Finished running node model.adventureworks_etl.dim_person
2021-08-13 02:39:43.805082 (Thread-1): Began running node model.adventureworks_etl.dim_personcreditcard
2021-08-13 02:39:43.805159 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_personcreditcard".
2021-08-13 02:39:43.805215 (Thread-1): Compiling model.adventureworks_etl.dim_personcreditcard
2021-08-13 02:39:43.807060 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_personcreditcard"
2021-08-13 02:39:43.823718 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.823839 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.823940 (Thread-1): Finished running node model.adventureworks_etl.dim_personcreditcard
2021-08-13 02:39:43.824022 (Thread-1): Began running node model.adventureworks_etl.dim_product
2021-08-13 02:39:43.824099 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_product".
2021-08-13 02:39:43.824154 (Thread-1): Compiling model.adventureworks_etl.dim_product
2021-08-13 02:39:43.826212 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_product"
2021-08-13 02:39:43.841243 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.841364 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.841462 (Thread-1): Finished running node model.adventureworks_etl.dim_product
2021-08-13 02:39:43.841543 (Thread-1): Began running node model.adventureworks_etl.dim_salesperson
2021-08-13 02:39:43.841619 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesperson".
2021-08-13 02:39:43.841674 (Thread-1): Compiling model.adventureworks_etl.dim_salesperson
2021-08-13 02:39:43.843588 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_salesperson"
2021-08-13 02:39:43.860982 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.861100 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.861197 (Thread-1): Finished running node model.adventureworks_etl.dim_salesperson
2021-08-13 02:39:43.861277 (Thread-1): Began running node model.adventureworks_etl.dim_salesreason
2021-08-13 02:39:43.861351 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesreason".
2021-08-13 02:39:43.861405 (Thread-1): Compiling model.adventureworks_etl.dim_salesreason
2021-08-13 02:39:43.863236 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_salesreason"
2021-08-13 02:39:43.877374 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.877493 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.877591 (Thread-1): Finished running node model.adventureworks_etl.dim_salesreason
2021-08-13 02:39:43.877672 (Thread-1): Began running node model.adventureworks_etl.dim_salesterritory
2021-08-13 02:39:43.877747 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesterritory".
2021-08-13 02:39:43.877801 (Thread-1): Compiling model.adventureworks_etl.dim_salesterritory
2021-08-13 02:39:43.879745 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_salesterritory"
2021-08-13 02:39:43.896254 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.896373 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.896470 (Thread-1): Finished running node model.adventureworks_etl.dim_salesterritory
2021-08-13 02:39:43.896551 (Thread-1): Began running node model.adventureworks_etl.dim_store
2021-08-13 02:39:43.896625 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_store".
2021-08-13 02:39:43.896679 (Thread-1): Compiling model.adventureworks_etl.dim_store
2021-08-13 02:39:43.898420 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.dim_store"
2021-08-13 02:39:43.914122 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.914240 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.914336 (Thread-1): Finished running node model.adventureworks_etl.dim_store
2021-08-13 02:39:43.914415 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_customer_customer_sk
2021-08-13 02:39:43.914494 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_customer_customer_sk".
2021-08-13 02:39:43.914549 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_customer_customer_sk
2021-08-13 02:39:43.920800 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_customer_customer_sk"
2021-08-13 02:39:43.937160 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.937277 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.937374 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_customer_customer_sk
2021-08-13 02:39:43.937455 (Thread-1): Began running node test.adventureworks_etl.unique_dim_customer_customer_sk
2021-08-13 02:39:43.937532 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_customer_customer_sk".
2021-08-13 02:39:43.937585 (Thread-1): Compiling test.adventureworks_etl.unique_dim_customer_customer_sk
2021-08-13 02:39:43.943531 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_customer_customer_sk"
2021-08-13 02:39:43.959911 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.960026 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.960122 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_customer_customer_sk
2021-08-13 02:39:43.960203 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_employee_employee_sk
2021-08-13 02:39:43.960282 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_employee_employee_sk".
2021-08-13 02:39:43.960336 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_employee_employee_sk
2021-08-13 02:39:43.963035 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_employee_employee_sk"
2021-08-13 02:39:43.978373 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.978489 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.978586 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_employee_employee_sk
2021-08-13 02:39:43.978667 (Thread-1): Began running node test.adventureworks_etl.unique_dim_employee_employee_sk
2021-08-13 02:39:43.978745 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_employee_employee_sk".
2021-08-13 02:39:43.978801 (Thread-1): Compiling test.adventureworks_etl.unique_dim_employee_employee_sk
2021-08-13 02:39:43.981474 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_employee_employee_sk"
2021-08-13 02:39:43.995783 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.995908 (Thread-1): finished collecting timing info
2021-08-13 02:39:43.996008 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_employee_employee_sk
2021-08-13 02:39:43.996091 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_person_person_sk
2021-08-13 02:39:43.996172 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_person_person_sk".
2021-08-13 02:39:43.996229 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_person_person_sk
2021-08-13 02:39:43.999919 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_person_person_sk"
2021-08-13 02:39:44.013935 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.014058 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.014159 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_person_person_sk
2021-08-13 02:39:44.014241 (Thread-1): Began running node test.adventureworks_etl.unique_dim_person_person_sk
2021-08-13 02:39:44.014320 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_person_person_sk".
2021-08-13 02:39:44.014375 (Thread-1): Compiling test.adventureworks_etl.unique_dim_person_person_sk
2021-08-13 02:39:44.016953 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_person_person_sk"
2021-08-13 02:39:44.032788 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.032906 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.033006 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_person_person_sk
2021-08-13 02:39:44.033089 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_personcreditcard_creditcard_sk
2021-08-13 02:39:44.033168 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_personcreditcard_creditcard_sk".
2021-08-13 02:39:44.033224 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_personcreditcard_creditcard_sk
2021-08-13 02:39:44.035986 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_personcreditcard_creditcard_sk"
2021-08-13 02:39:44.050991 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.051107 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.051204 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_personcreditcard_creditcard_sk
2021-08-13 02:39:44.051286 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_personcreditcard_person_sk
2021-08-13 02:39:44.051364 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_personcreditcard_person_sk".
2021-08-13 02:39:44.051418 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_personcreditcard_person_sk
2021-08-13 02:39:44.054096 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_personcreditcard_person_sk"
2021-08-13 02:39:44.070633 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.070751 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.070849 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_personcreditcard_person_sk
2021-08-13 02:39:44.070947 (Thread-1): Began running node test.adventureworks_etl.unique_dim_personcreditcard_creditcard_sk
2021-08-13 02:39:44.071029 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_personcreditcard_creditcard_sk".
2021-08-13 02:39:44.071085 (Thread-1): Compiling test.adventureworks_etl.unique_dim_personcreditcard_creditcard_sk
2021-08-13 02:39:44.073766 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_personcreditcard_creditcard_sk"
2021-08-13 02:39:44.089881 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.089998 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.090095 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_personcreditcard_creditcard_sk
2021-08-13 02:39:44.090176 (Thread-1): Began running node test.adventureworks_etl.unique_dim_personcreditcard_person_sk
2021-08-13 02:39:44.090255 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_personcreditcard_person_sk".
2021-08-13 02:39:44.090310 (Thread-1): Compiling test.adventureworks_etl.unique_dim_personcreditcard_person_sk
2021-08-13 02:39:44.092857 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_personcreditcard_person_sk"
2021-08-13 02:39:44.111546 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.111660 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.111755 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_personcreditcard_person_sk
2021-08-13 02:39:44.111834 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_product_product_sk
2021-08-13 02:39:44.111911 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_product_product_sk".
2021-08-13 02:39:44.111965 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_product_product_sk
2021-08-13 02:39:44.114585 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_product_product_sk"
2021-08-13 02:39:44.130014 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.130137 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.130236 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_product_product_sk
2021-08-13 02:39:44.130319 (Thread-1): Began running node test.adventureworks_etl.test_product_quantity
2021-08-13 02:39:44.130401 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.test_product_quantity".
2021-08-13 02:39:44.130456 (Thread-1): Compiling test.adventureworks_etl.test_product_quantity
2021-08-13 02:39:44.140203 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.test_product_quantity"
2021-08-13 02:39:44.162601 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.162726 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.162830 (Thread-1): Finished running node test.adventureworks_etl.test_product_quantity
2021-08-13 02:39:44.162935 (Thread-1): Began running node test.adventureworks_etl.unique_dim_product_product_sk
2021-08-13 02:39:44.163018 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_product_product_sk".
2021-08-13 02:39:44.163074 (Thread-1): Compiling test.adventureworks_etl.unique_dim_product_product_sk
2021-08-13 02:39:44.165813 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_product_product_sk"
2021-08-13 02:39:44.201803 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.201925 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.202023 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_product_product_sk
2021-08-13 02:39:44.202103 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_salesperson_salesperson_sk
2021-08-13 02:39:44.202179 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_salesperson_salesperson_sk".
2021-08-13 02:39:44.202233 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_salesperson_salesperson_sk
2021-08-13 02:39:44.204926 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_salesperson_salesperson_sk"
2021-08-13 02:39:44.221575 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.221696 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.221793 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_salesperson_salesperson_sk
2021-08-13 02:39:44.221874 (Thread-1): Began running node test.adventureworks_etl.unique_dim_salesperson_salesperson_sk
2021-08-13 02:39:44.221950 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_salesperson_salesperson_sk".
2021-08-13 02:39:44.222005 (Thread-1): Compiling test.adventureworks_etl.unique_dim_salesperson_salesperson_sk
2021-08-13 02:39:44.224537 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_salesperson_salesperson_sk"
2021-08-13 02:39:44.246941 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.247061 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.247159 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_salesperson_salesperson_sk
2021-08-13 02:39:44.247240 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_salesreason_salesreason_sk
2021-08-13 02:39:44.247317 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_salesreason_salesreason_sk".
2021-08-13 02:39:44.247371 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_salesreason_salesreason_sk
2021-08-13 02:39:44.249988 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_salesreason_salesreason_sk"
2021-08-13 02:39:44.268928 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.269048 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.269146 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_salesreason_salesreason_sk
2021-08-13 02:39:44.269228 (Thread-1): Began running node test.adventureworks_etl.unique_dim_salesreason_salesreason_sk
2021-08-13 02:39:44.269304 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_salesreason_salesreason_sk".
2021-08-13 02:39:44.269358 (Thread-1): Compiling test.adventureworks_etl.unique_dim_salesreason_salesreason_sk
2021-08-13 02:39:44.272005 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_salesreason_salesreason_sk"
2021-08-13 02:39:44.288615 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.288734 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.288832 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_salesreason_salesreason_sk
2021-08-13 02:39:44.288913 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_salesterritory_territory_sk
2021-08-13 02:39:44.288990 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_salesterritory_territory_sk".
2021-08-13 02:39:44.289045 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_salesterritory_territory_sk
2021-08-13 02:39:44.291758 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_salesterritory_territory_sk"
2021-08-13 02:39:44.306849 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.306983 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.307082 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_salesterritory_territory_sk
2021-08-13 02:39:44.307164 (Thread-1): Began running node test.adventureworks_etl.unique_dim_salesterritory_territory_sk
2021-08-13 02:39:44.307242 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_salesterritory_territory_sk".
2021-08-13 02:39:44.307296 (Thread-1): Compiling test.adventureworks_etl.unique_dim_salesterritory_territory_sk
2021-08-13 02:39:44.309838 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_salesterritory_territory_sk"
2021-08-13 02:39:44.326100 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.326219 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.326317 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_salesterritory_territory_sk
2021-08-13 02:39:44.326398 (Thread-1): Began running node model.adventureworks_etl.fact_salesorderdetail
2021-08-13 02:39:44.326475 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.fact_salesorderdetail".
2021-08-13 02:39:44.326529 (Thread-1): Compiling model.adventureworks_etl.fact_salesorderdetail
2021-08-13 02:39:44.331906 (Thread-1): Writing injected SQL for node "model.adventureworks_etl.fact_salesorderdetail"
2021-08-13 02:39:44.362143 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.362263 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.362360 (Thread-1): Finished running node model.adventureworks_etl.fact_salesorderdetail
2021-08-13 02:39:44.362441 (Thread-1): Began running node test.adventureworks_etl.not_null_dim_store_store_sk
2021-08-13 02:39:44.362516 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.not_null_dim_store_store_sk".
2021-08-13 02:39:44.362571 (Thread-1): Compiling test.adventureworks_etl.not_null_dim_store_store_sk
2021-08-13 02:39:44.365223 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.not_null_dim_store_store_sk"
2021-08-13 02:39:44.381003 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.381121 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.381218 (Thread-1): Finished running node test.adventureworks_etl.not_null_dim_store_store_sk
2021-08-13 02:39:44.381299 (Thread-1): Began running node test.adventureworks_etl.unique_dim_store_store_sk
2021-08-13 02:39:44.381376 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.unique_dim_store_store_sk".
2021-08-13 02:39:44.381430 (Thread-1): Compiling test.adventureworks_etl.unique_dim_store_store_sk
2021-08-13 02:39:44.384086 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.unique_dim_store_store_sk"
2021-08-13 02:39:44.400586 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.400702 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.400799 (Thread-1): Finished running node test.adventureworks_etl.unique_dim_store_store_sk
2021-08-13 02:39:44.400879 (Thread-1): Began running node test.adventureworks_etl.test_order_quantity
2021-08-13 02:39:44.400956 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.test_order_quantity".
2021-08-13 02:39:44.401011 (Thread-1): Compiling test.adventureworks_etl.test_order_quantity
2021-08-13 02:39:44.403837 (Thread-1): Writing injected SQL for node "test.adventureworks_etl.test_order_quantity"
2021-08-13 02:39:44.419012 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.419133 (Thread-1): finished collecting timing info
2021-08-13 02:39:44.419231 (Thread-1): Finished running node test.adventureworks_etl.test_order_quantity
2021-08-13 02:39:44.420159 (MainThread): Connection 'master' was properly closed.
2021-08-13 02:39:44.420242 (MainThread): Connection 'test.adventureworks_etl.test_order_quantity' was properly closed.
2021-08-13 02:39:44.496828 (MainThread): 02:39:44 | Done.
2021-08-13 02:39:44.557981 (MainThread): Acquiring new bigquery connection "generate_catalog".
2021-08-13 02:39:44.558076 (MainThread): 02:39:44 | Building catalog
2021-08-13 02:39:44.562068 (MainThread): Opening a new connection, currently in state init
2021-08-13 02:39:44.751571 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "cursoanalytics-318700.information_schema".
2021-08-13 02:39:44.764662 (ThreadPoolExecutor-1_0): Opening a new connection, currently in state init
2021-08-13 02:39:44.769204 (ThreadPoolExecutor-1_0): On cursoanalytics-318700.information_schema: 
    with tables as (
        select
            project_id as table_database,
            dataset_id as table_schema,
            table_id as original_table_name,

            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,

            row_count,
            size_bytes as size_bytes,
            case
                when type = 1 then 'table'
                when type = 2 then 'view'
                else 'external'
            end as table_type,

            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,
            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,
            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name

        from `cursoanalytics-318700`.`dbt_jrgseverino`.__TABLES__
        where (upper(dataset_id) = upper('dbt_jrgseverino'))
    ),

    extracted as (

        select *,
            case
                when is_date_shard then shard_base_name
                else original_table_name
            end as table_name

        from tables

    ),

    unsharded_tables as (

        select
            table_database,
            table_schema,
            table_name,
            coalesce(table_type, 'external') as table_type,
            is_date_shard,

            struct(
                min(shard_name) as shard_min,
                max(shard_name) as shard_max,
                count(*) as shard_count
            ) as table_shards,

            sum(size_bytes) as size_bytes,
            sum(row_count) as row_count,

            max(relation_id) as relation_id

        from extracted
        group by 1,2,3,4,5

    ),

    info_schema_columns as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            table_catalog as table_database,
            table_schema,
            table_name,

            -- use the "real" column name from the paths query below
            column_name as base_column_name,
            ordinal_position as column_index,

            is_partitioning_column,
            clustering_ordinal_position

        from `cursoanalytics-318700`.`dbt_jrgseverino`.INFORMATION_SCHEMA.COLUMNS
        where ordinal_position is not null

    ),

    info_schema_column_paths as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            field_path as column_name,
            data_type as column_type,
            column_name as base_column_name,
            description as column_comment

        from `cursoanalytics-318700`.`dbt_jrgseverino`.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS

    ),

    columns as (

        select * except (base_column_name)
        from info_schema_columns
        join info_schema_column_paths using (relation_id, base_column_name)

    ),

    column_stats as (

        select
            table_database,
            table_schema,
            table_name,
            max(relation_id) as relation_id,
            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,
            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,
            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,
            array_to_string(
                array_agg(
                    case
                        when clustering_ordinal_position is not null then column_name
                        else null
                    end ignore nulls
                    order by clustering_ordinal_position
                ), ', '
            ) as clustering_columns

        from columns
        group by 1,2,3

    )

    select
        unsharded_tables.table_database,
        unsharded_tables.table_schema,
        case
            when is_date_shard then concat(unsharded_tables.table_name, '*')
            else unsharded_tables.table_name
        end as table_name,
        unsharded_tables.table_type,

        -- coalesce name and type for External tables - these columns are not
        -- present in the COLUMN_FIELD_PATHS resultset
        coalesce(columns.column_name, '<unknown>') as column_name,
        -- invent a row number to account for nested fields -- BQ does
        -- not treat these nested properties as independent fields
        row_number() over (
            partition by relation_id
            order by columns.column_index, columns.column_name
        ) as column_index,
        coalesce(columns.column_type, '<unknown>') as column_type,
        columns.column_comment,

        'Shard count' as `stats__date_shards__label`,
        table_shards.shard_count as `stats__date_shards__value`,
        'The number of date shards in this table' as `stats__date_shards__description`,
        is_date_shard as `stats__date_shards__include`,

        'Shard (min)' as `stats__date_shard_min__label`,
        table_shards.shard_min as `stats__date_shard_min__value`,
        'The first date shard in this table' as `stats__date_shard_min__description`,
        is_date_shard as `stats__date_shard_min__include`,

        'Shard (max)' as `stats__date_shard_max__label`,
        table_shards.shard_max as `stats__date_shard_max__value`,
        'The last date shard in this table' as `stats__date_shard_max__description`,
        is_date_shard as `stats__date_shard_max__include`,

        '# Rows' as `stats__num_rows__label`,
        row_count as `stats__num_rows__value`,
        'Approximate count of rows in this table' as `stats__num_rows__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,

        'Approximate Size' as `stats__num_bytes__label`,
        size_bytes as `stats__num_bytes__value`,
        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,

        'Partitioned By' as `stats__partitioning_type__label`,
        partition_column as `stats__partitioning_type__value`,
        'The partitioning column for this table' as `stats__partitioning_type__description`,
        is_partitioned as `stats__partitioning_type__include`,

        'Clustered By' as `stats__clustering_fields__label`,
        clustering_columns as `stats__clustering_fields__value`,
        'The clustering columns for this table' as `stats__clustering_fields__description`,
        is_clustered as `stats__clustering_fields__include`

    -- join using relation_id (an actual relation, not a shard prefix) to make
    -- sure that column metadata is picked up through the join. This will only
    -- return the column information for the "max" table in a date-sharded table set
    from unsharded_tables
    left join columns using (relation_id)
    left join column_stats using (relation_id)
  
2021-08-13 02:39:44.985177 (Thread-242): handling poll request
2021-08-13 02:39:44.985498 (Thread-242): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca45b80>]}
2021-08-13 02:39:44.989144 (Thread-242): sending response (<Response 137015 bytes [200 OK]>) to 10.0.29.164
2021-08-13 02:39:46.357778 (Thread-243): handling poll request
2021-08-13 02:39:46.358055 (Thread-243): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5ca45c40>]}
2021-08-13 02:39:46.358599 (Thread-243): sending response (<Response 296 bytes [200 OK]>) to 10.0.7.69
2021-08-13 02:39:47.211144 (ThreadPoolExecutor-1_0): Acquiring new bigquery connection "cursoanalytics-318700.information_schema".
2021-08-13 02:39:47.212515 (ThreadPoolExecutor-1_0): Opening a new connection, currently in state closed
2021-08-13 02:39:47.217136 (ThreadPoolExecutor-1_0): On cursoanalytics-318700.information_schema: 
    with tables as (
        select
            project_id as table_database,
            dataset_id as table_schema,
            table_id as original_table_name,

            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,

            row_count,
            size_bytes as size_bytes,
            case
                when type = 1 then 'table'
                when type = 2 then 'view'
                else 'external'
            end as table_type,

            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,
            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,
            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name

        from `cursoanalytics-318700`.`adventureworks_etl`.__TABLES__
        where (upper(dataset_id) = upper('adventureworks_etl'))
    ),

    extracted as (

        select *,
            case
                when is_date_shard then shard_base_name
                else original_table_name
            end as table_name

        from tables

    ),

    unsharded_tables as (

        select
            table_database,
            table_schema,
            table_name,
            coalesce(table_type, 'external') as table_type,
            is_date_shard,

            struct(
                min(shard_name) as shard_min,
                max(shard_name) as shard_max,
                count(*) as shard_count
            ) as table_shards,

            sum(size_bytes) as size_bytes,
            sum(row_count) as row_count,

            max(relation_id) as relation_id

        from extracted
        group by 1,2,3,4,5

    ),

    info_schema_columns as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            table_catalog as table_database,
            table_schema,
            table_name,

            -- use the "real" column name from the paths query below
            column_name as base_column_name,
            ordinal_position as column_index,

            is_partitioning_column,
            clustering_ordinal_position

        from `cursoanalytics-318700`.`adventureworks_etl`.INFORMATION_SCHEMA.COLUMNS
        where ordinal_position is not null

    ),

    info_schema_column_paths as (

        select
            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,
            field_path as column_name,
            data_type as column_type,
            column_name as base_column_name,
            description as column_comment

        from `cursoanalytics-318700`.`adventureworks_etl`.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS

    ),

    columns as (

        select * except (base_column_name)
        from info_schema_columns
        join info_schema_column_paths using (relation_id, base_column_name)

    ),

    column_stats as (

        select
            table_database,
            table_schema,
            table_name,
            max(relation_id) as relation_id,
            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,
            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,
            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,
            array_to_string(
                array_agg(
                    case
                        when clustering_ordinal_position is not null then column_name
                        else null
                    end ignore nulls
                    order by clustering_ordinal_position
                ), ', '
            ) as clustering_columns

        from columns
        group by 1,2,3

    )

    select
        unsharded_tables.table_database,
        unsharded_tables.table_schema,
        case
            when is_date_shard then concat(unsharded_tables.table_name, '*')
            else unsharded_tables.table_name
        end as table_name,
        unsharded_tables.table_type,

        -- coalesce name and type for External tables - these columns are not
        -- present in the COLUMN_FIELD_PATHS resultset
        coalesce(columns.column_name, '<unknown>') as column_name,
        -- invent a row number to account for nested fields -- BQ does
        -- not treat these nested properties as independent fields
        row_number() over (
            partition by relation_id
            order by columns.column_index, columns.column_name
        ) as column_index,
        coalesce(columns.column_type, '<unknown>') as column_type,
        columns.column_comment,

        'Shard count' as `stats__date_shards__label`,
        table_shards.shard_count as `stats__date_shards__value`,
        'The number of date shards in this table' as `stats__date_shards__description`,
        is_date_shard as `stats__date_shards__include`,

        'Shard (min)' as `stats__date_shard_min__label`,
        table_shards.shard_min as `stats__date_shard_min__value`,
        'The first date shard in this table' as `stats__date_shard_min__description`,
        is_date_shard as `stats__date_shard_min__include`,

        'Shard (max)' as `stats__date_shard_max__label`,
        table_shards.shard_max as `stats__date_shard_max__value`,
        'The last date shard in this table' as `stats__date_shard_max__description`,
        is_date_shard as `stats__date_shard_max__include`,

        '# Rows' as `stats__num_rows__label`,
        row_count as `stats__num_rows__value`,
        'Approximate count of rows in this table' as `stats__num_rows__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,

        'Approximate Size' as `stats__num_bytes__label`,
        size_bytes as `stats__num_bytes__value`,
        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,
        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,

        'Partitioned By' as `stats__partitioning_type__label`,
        partition_column as `stats__partitioning_type__value`,
        'The partitioning column for this table' as `stats__partitioning_type__description`,
        is_partitioned as `stats__partitioning_type__include`,

        'Clustered By' as `stats__clustering_fields__label`,
        clustering_columns as `stats__clustering_fields__value`,
        'The clustering columns for this table' as `stats__clustering_fields__description`,
        is_clustered as `stats__clustering_fields__include`

    -- join using relation_id (an actual relation, not a shard prefix) to make
    -- sure that column metadata is picked up through the join. This will only
    -- return the column information for the "max" table in a date-sharded table set
    from unsharded_tables
    left join columns using (relation_id)
    left join column_stats using (relation_id)
  
2021-08-13 02:39:47.719390 (Thread-244): handling poll request
2021-08-13 02:39:47.719673 (Thread-244): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5c9e20a0>]}
2021-08-13 02:39:47.720249 (Thread-244): sending response (<Response 8272 bytes [200 OK]>) to 10.0.45.128
2021-08-13 02:39:49.050377 (Thread-245): handling poll request
2021-08-13 02:39:49.050664 (Thread-245): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5c9e2220>]}
2021-08-13 02:39:49.051193 (Thread-245): sending response (<Response 296 bytes [200 OK]>) to 10.0.29.70
2021-08-13 02:39:51.186829 (Thread-246): handling poll request
2021-08-13 02:39:51.187144 (Thread-246): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5c9e23d0>]}
2021-08-13 02:39:51.187659 (Thread-246): sending response (<Response 295 bytes [200 OK]>) to 10.0.25.88
2021-08-13 02:39:52.451859 (MainThread): 02:39:52 | Catalog written to /usr/src/develop/user-31714/environment-37304/repository-30612/target/catalog.json
2021-08-13 02:39:53.323091 (Thread-247): handling poll request
2021-08-13 02:39:53.323382 (Thread-247): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5c98e1f0>]}
2021-08-13 02:39:53.325983 (Thread-247): sending response (<Response 61989 bytes [200 OK]>) to 10.0.44.81
2021-08-13 02:39:54.278535 (Thread-248): handling status request
2021-08-13 02:39:54.278828 (Thread-248): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5c98e250>]}
2021-08-13 02:39:54.279970 (Thread-248): sending response (<Response 16863 bytes [200 OK]>) to 10.0.4.54
2021-08-13 02:39:54.356878 (Thread-249): handling status request
2021-08-13 02:39:54.357159 (Thread-249): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5c992490>]}
2021-08-13 02:39:54.358139 (Thread-249): sending response (<Response 16863 bytes [200 OK]>) to 10.0.39.231
2021-08-13 02:39:54.471251 (Thread-250): handling status request
2021-08-13 02:39:54.471532 (Thread-250): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5c9971f0>]}
2021-08-13 02:39:54.472515 (Thread-250): sending response (<Response 16863 bytes [200 OK]>) to 10.0.42.208
2021-08-13 02:39:54.567570 (Thread-251): handling status request
2021-08-13 02:39:54.567857 (Thread-251): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': '1e33b51f-96da-4bbc-81dd-af938ba36d3e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f5d5c997d60>]}
2021-08-13 02:39:54.568844 (Thread-251): sending response (<Response 16863 bytes [200 OK]>) to 10.0.6.1
2021-08-13 20:14:30.847354 (MainThread): Running with dbt=0.19.2
2021-08-13 20:14:30.990123 (MainThread): running dbt with arguments Namespace(cls=<class 'dbt.task.rpc.server.RPCServerTask'>, debug=False, defer=None, exclude=None, host='0.0.0.0', log_cache_events=False, log_format='default', models=None, partial_parse=True, port=8580, profile='user', profiles_dir='/usr/src/develop/.dbt', project_dir=None, record_timing_info=None, rpc_method=None, single_threaded=False, state=None, strict=False, target=None, test_new_parser=False, threads=None, use_cache=True, use_colors=None, vars='{}', version_check=True, warn_error=False, which='rpc', write_json=True)
2021-08-13 20:14:30.997997 (MainThread): Tracking: tracking
2021-08-13 20:14:31.013115 (Thread-1): Parsing macros/adapters.sql
2021-08-13 20:14:31.033250 (Thread-1): Parsing macros/etc.sql
2021-08-13 20:14:31.035525 (Thread-1): Parsing macros/catalog.sql
2021-08-13 20:14:31.041539 (Thread-1): Parsing macros/materializations/copy.sql
2021-08-13 20:14:31.046051 (Thread-1): Parsing macros/materializations/table.sql
2021-08-13 20:14:31.055539 (Thread-1): Parsing macros/materializations/incremental.sql
2021-08-13 20:14:31.067342 (Thread-1): Parsing macros/materializations/seed.sql
2021-08-13 20:14:31.070116 (Thread-1): Parsing macros/materializations/snapshot.sql
2021-08-13 20:14:31.071968 (Thread-1): Parsing macros/materializations/view.sql
2021-08-13 20:14:31.075132 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4e859e20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a9a6eb0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a9a6df0>]}
2021-08-13 20:14:31.075560 (MainThread): Serving RPC server at 0.0.0.0:8580, pid=16
2021-08-13 20:14:31.075818 (MainThread): Supported methods: ['cli_args', 'compile', 'compile_sql', 'deps', 'docs.generate', 'gc', 'get-manifest', 'kill', 'poll', 'ps', 'run', 'run-operation', 'run_sql', 'seed', 'snapshot', 'snapshot-freshness', 'status', 'test']
2021-08-13 20:14:31.076049 (MainThread): Send requests to http://localhost:8580/jsonrpc
2021-08-13 20:14:31.077145 (Thread-1): Parsing macros/core.sql
2021-08-13 20:14:31.080770 (Thread-1): Parsing macros/materializations/helpers.sql
2021-08-13 20:14:31.089247 (Thread-1): Parsing macros/materializations/common/merge.sql
2021-08-13 20:14:31.102110 (Thread-1): Parsing macros/materializations/snapshot/snapshot_merge.sql
2021-08-13 20:14:31.103868 (Thread-1): Parsing macros/materializations/snapshot/strategies.sql
2021-08-13 20:14:31.120135 (Thread-1): Parsing macros/materializations/snapshot/snapshot.sql
2021-08-13 20:14:31.150823 (Thread-1): Parsing macros/materializations/view/create_or_replace_view.sql
2021-08-13 20:14:31.155954 (Thread-1): Parsing macros/materializations/view/view.sql
2021-08-13 20:14:31.162118 (Thread-1): Parsing macros/materializations/seed/seed.sql
2021-08-13 20:14:31.332060 (Thread-1): Parsing macros/materializations/table/table.sql
2021-08-13 20:14:31.338717 (Thread-1): Parsing macros/materializations/incremental/helpers.sql
2021-08-13 20:14:31.340890 (Thread-1): Parsing macros/materializations/incremental/incremental.sql
2021-08-13 20:14:31.347171 (Thread-1): Parsing macros/etc/is_incremental.sql
2021-08-13 20:14:31.349028 (Thread-1): Parsing macros/etc/query.sql
2021-08-13 20:14:31.350271 (Thread-1): Parsing macros/etc/datetime.sql
2021-08-13 20:14:31.358907 (Thread-1): Parsing macros/etc/get_custom_alias.sql
2021-08-13 20:14:31.360096 (Thread-1): Parsing macros/etc/get_custom_database.sql
2021-08-13 20:14:31.361966 (Thread-1): Parsing macros/etc/get_custom_schema.sql
2021-08-13 20:14:31.364104 (Thread-1): Parsing macros/schema_tests/not_null.sql
2021-08-13 20:14:31.365846 (Thread-1): Parsing macros/schema_tests/accepted_values.sql
2021-08-13 20:14:31.368519 (Thread-1): Parsing macros/schema_tests/relationships.sql
2021-08-13 20:14:31.370558 (Thread-1): Parsing macros/schema_tests/unique.sql
2021-08-13 20:14:31.372382 (Thread-1): Parsing macros/adapters/common.sql
2021-08-13 20:14:31.613850 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheader".
2021-08-13 20:14:31.631832 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderheadersalesreason".
2021-08-13 20:14:31.641383 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_store".
2021-08-13 20:14:31.651012 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_product".
2021-08-13 20:14:31.661561 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesorderdetail".
2021-08-13 20:14:31.671295 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_person".
2021-08-13 20:14:31.681168 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesperson".
2021-08-13 20:14:31.691035 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_customer".
2021-08-13 20:14:31.701440 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_employee".
2021-08-13 20:14:31.712222 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesreason".
2021-08-13 20:14:31.724601 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_salesterritory".
2021-08-13 20:14:31.737304 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.stg_personcreditcard".
2021-08-13 20:14:31.750637 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_product".
2021-08-13 20:14:31.760626 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_store".
2021-08-13 20:14:31.772005 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.fact_salesorderdetail".
2021-08-13 20:14:31.784306 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesperson".
2021-08-13 20:14:31.793571 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_person".
2021-08-13 20:14:31.802682 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_customer".
2021-08-13 20:14:31.811658 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_personcreditcard".
2021-08-13 20:14:31.822403 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesterritory".
2021-08-13 20:14:31.832307 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_salesreason".
2021-08-13 20:14:31.841993 (Thread-1): Acquiring new bigquery connection "model.adventureworks_etl.dim_employee".
2021-08-13 20:14:31.859245 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.test_product_quantity".
2021-08-13 20:14:31.868991 (Thread-1): Acquiring new bigquery connection "test.adventureworks_etl.test_order_quantity".
2021-08-13 20:14:32.164881 (Thread-1): Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'b7ecd012-1483-4f2c-bdc3-d54f70af99b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c495f1fa0>]}
2021-08-13 20:14:48.138321 (Thread-2): handling status request
2021-08-13 20:14:48.138699 (Thread-2): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': 'b7ecd012-1483-4f2c-bdc3-d54f70af99b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4982e970>]}
2021-08-13 20:14:48.139739 (Thread-2): sending response (<Response 16560 bytes [200 OK]>) to 10.0.19.71
2021-08-13 20:14:48.152769 (Thread-3): handling status request
2021-08-13 20:14:48.153087 (Thread-3): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': 'b7ecd012-1483-4f2c-bdc3-d54f70af99b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c49822460>]}
2021-08-13 20:14:48.154161 (Thread-3): sending response (<Response 16560 bytes [200 OK]>) to 10.0.21.36
2021-08-13 20:14:48.169914 (Thread-4): handling status request
2021-08-13 20:14:48.170197 (Thread-4): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': 'b7ecd012-1483-4f2c-bdc3-d54f70af99b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c49855df0>]}
2021-08-13 20:14:48.171138 (Thread-4): sending response (<Response 16560 bytes [200 OK]>) to 10.0.5.252
2021-08-13 20:14:48.208319 (Thread-5): handling ps request
2021-08-13 20:14:48.208666 (Thread-5): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': 'b7ecd012-1483-4f2c-bdc3-d54f70af99b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c49822430>]}
2021-08-13 20:14:48.209198 (Thread-5): sending response (<Response 105 bytes [200 OK]>) to 10.0.33.223
2021-08-13 20:14:48.214347 (Thread-6): handling status request
2021-08-13 20:14:48.214590 (Thread-6): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': 'b7ecd012-1483-4f2c-bdc3-d54f70af99b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4982e970>]}
2021-08-13 20:14:48.215467 (Thread-6): sending response (<Response 16560 bytes [200 OK]>) to 10.0.42.18
2021-08-13 20:14:48.233619 (Thread-7): handling status request
2021-08-13 20:14:48.233922 (Thread-7): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': 'b7ecd012-1483-4f2c-bdc3-d54f70af99b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c49857c70>]}
2021-08-13 20:14:48.234843 (Thread-7): sending response (<Response 16560 bytes [200 OK]>) to 10.0.42.18
2021-08-13 20:22:35.299056 (Thread-8): handling status request
2021-08-13 20:22:35.300624 (Thread-8): Sending event: {'category': 'dbt', 'action': 'rpc_request', 'label': 'b7ecd012-1483-4f2c-bdc3-d54f70af99b9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c498554f0>]}
2021-08-13 20:22:35.301629 (Thread-8): sending response (<Response 16560 bytes [200 OK]>) to 10.0.34.201
2021-08-13 20:22:37.118927 (MainThread): Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4e859e20>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a9a6eb0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x7f1c4a9a6a30>]}
2021-08-13 20:22:37.119231 (MainThread): Flushing usage events
2021-08-13 20:22:37.140107 (MainThread): Connection 'test.adventureworks_etl.test_order_quantity' was properly closed.
2021-08-13 20:22:37.142618 (MainThread): Runtime Error
  no dbt_project.yml found at expected path /usr/src/develop/user-31714/environment-37304/repository-30612/dbt_project.yml
